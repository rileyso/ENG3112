/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 16.04.2025 13:33:53

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 70368;
#else
constexpr int kTensorArenaSize = 69344;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[6] = { 14681, -32196, -29640, -25501, -22417, -28890, };
const TfArray<1, int> tensor_dimension2 = { 1, { 6 } };
const TfArray<6, float> quant2_scale = { 6, { 0.00026110283215530217, 0.00016253751527983695, 0.00018540286691859365, 0.00017714731802698225, 0.0002885408466681838, 0.0001650041522225365, } };
const TfArray<6, int> quant2_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[6*1*1*32] = { 
  /* [0][0][][] */ 51,53,-31,-44,-16,13,-4,32,-17,6,24,21,-38,-26,81,-53,-9,-55,-44,-7,5,58,57,-26,-77,13,13,-43,127,4,-51,-31, 
  /* [1][0][][] */ 37,-47,-3,-11,112,-16,-49,42,112,12,-91,108,33,13,-62,23,16,16,-45,-59,-1,57,-46,-45,85,69,53,-45,-127,13,-32,126, 
  /* [2][0][][] */ -29,-47,78,-13,77,91,-72,79,-70,20,43,-25,45,-2,19,87,42,21,-78,-29,66,85,-91,9,-85,64,-127,-4,-79,38,-25,-99, 
  /* [3][0][][] */ 47,-52,17,34,42,-34,-72,33,71,88,-11,-68,82,18,2,-7,87,63,108,-74,46,-49,-115,59,-34,78,-127,1,-60,-40,84,86, 
  /* [4][0][][] */ -20,20,74,13,-9,-34,56,-11,-27,-46,16,40,9,-1,-127,-9,19,53,16,14,15,65,45,-5,42,3,-26,34,-93,-29,34,19, 
  /* [5][0][][] */ 56,81,-26,113,42,7,-68,115,-49,-87,104,-63,-27,-87,-67,-7,-56,-66,-56,108,-14,-5,12,42,127,1,-96,81,-75,66,-40,-12, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 6,1,1,32 } };
const TfArray<6, float> quant3_scale = { 6, { 0.0058662979863584042, 0.0036517928820103407, 0.0041655176319181919, 0.0039800368249416351, 0.0064827580936253071, 0.003707211697474122, } };
const TfArray<6, int> quant3_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -1124, -1186, 286, 527, 422, -135, -276, 719, -207, -346, -141, -1188, -433, -1467, -79, -351, -153, -379, 264, -750, 323, 905, 1387, 37, 412, -229, 2135, 525, 2671, 682, -963, 96, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.9648231652099639e-05, 5.0620536057977006e-05, 5.729675103793852e-05, 6.205824320204556e-05, 6.8306224420666695e-05, 5.6822591432137415e-05, 9.6337716968264431e-05, 5.6843371567083523e-05, 7.6876938692294061e-05, 5.6095792388077825e-05, 6.0417343775043264e-05, 4.7920777433319017e-05, 5.5884829635033384e-05, 5.164189133211039e-05, 0.00011193319369340315, 6.2353821704164147e-05, 6.8983477831352502e-05, 5.9511698054848239e-05, 5.7942033890867606e-05, 4.8508085455978289e-05, 5.8702549722511321e-05, 6.0575759562198073e-05, 9.9624456197489053e-05, 6.6817920014727861e-05, 5.4683991038473323e-05, 6.9713634729851037e-05, 7.0062196755316108e-05, 6.5063271904364228e-05, 9.7259326139464974e-05, 5.0960399676114321e-05, 4.8190133384196088e-05, 6.6576089011505246e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -41,-65,82,-7,66,-14,-98,-110,57,-93,-104,-21,41,-11,-52,33,-53,-47,-63,-65,-78,-122,-21,86,-108,-13,51,-46,86,-3,-38,-99,57,-74,-110,41,-127,-94,-100,6,46,-96,-111,74,45,-106,99,-38, 
  /* [1][0][][] */ -54,5,-91,-26,-60,49,9,-7,51,-122,-121,72,46,-50,-1,49,127,-63,8,83,-70,-30,11,8,9,-10,-13,73,-18,-22,65,-85,78,69,-31,4,23,32,-38,-82,-83,1,-44,-94,-56,10,-49,-79, 
  /* [2][0][][] */ 48,-27,-41,49,-23,-22,102,102,-39,110,-21,105,69,22,91,-127,-22,-10,37,75,-69,-15,76,-12,9,85,45,47,-40,85,75,88,-106,-46,-82,-95,-70,74,27,-24,-97,-119,31,-54,-50,125,-9,-112, 
  /* [3][0][][] */ 86,8,32,-25,-61,59,-70,45,67,27,72,8,94,74,73,-35,127,92,-12,11,109,-63,-45,-94,12,-92,-81,86,42,-48,88,25,-102,-27,2,14,-68,-5,58,-30,-14,-77,-56,-53,85,39,-3,-51, 
  /* [4][0][][] */ 37,87,14,38,8,-2,45,14,63,82,24,51,29,-9,8,-80,-35,8,-23,21,90,-47,59,-1,12,24,-14,-16,-14,45,-22,-20,-17,90,18,-60,-16,18,-59,25,-7,-60,-42,-127,47,88,49,46, 
  /* [5][0][][] */ 53,-89,51,59,49,-127,24,49,98,-80,4,-44,-9,95,28,17,19,44,-75,74,19,49,12,-40,-83,-16,-39,-66,22,24,29,-83,-48,-13,-81,0,-88,-27,51,58,-48,-70,34,81,-24,28,32,-79, 
  /* [6][0][][] */ 9,-27,48,31,-47,-35,-7,36,-12,-45,-4,-45,44,22,51,-62,127,2,-4,45,-40,-62,49,24,-23,-45,73,-33,-18,-56,20,-41,60,-63,-22,-55,-9,13,-56,38,36,22,8,-1,-58,52,37,-21, 
  /* [7][0][][] */ 112,48,-22,-41,-44,109,8,15,127,26,-51,24,63,-54,59,36,49,29,23,102,65,41,2,63,-30,101,6,67,-49,113,9,48,-39,19,65,103,-75,93,16,-41,101,-82,89,-5,71,19,114,-89, 
  /* [8][0][][] */ -14,60,-4,-35,65,35,-32,-42,-19,27,42,79,2,-34,-59,-90,-67,61,-19,19,31,-3,44,57,-52,82,-20,58,-15,20,-34,76,1,16,37,-26,93,12,6,-4,61,61,-99,-127,-4,-26,20,110, 
  /* [9][0][][] */ -15,13,102,51,58,-79,-34,-111,35,55,-10,39,-37,-59,-91,-45,-16,-5,-81,-51,3,75,-102,-92,96,-11,-49,25,-5,-47,-79,78,4,15,15,-22,-69,9,-46,-64,27,-88,40,-127,64,17,-95,32, 
  /* [10][0][][] */ -38,30,58,-76,-44,81,69,32,10,-13,8,-98,80,26,-27,-1,-32,51,-73,-59,-15,-6,31,-37,2,5,-127,-118,-57,50,-99,-59,4,50,87,62,-75,-10,-31,2,-56,103,-84,-53,-85,-82,-15,-74, 
  /* [11][0][][] */ 82,18,-37,80,94,19,28,2,83,64,-98,85,-31,-106,3,-67,-75,-125,37,15,5,49,1,-127,-125,-114,-3,45,52,-33,1,-43,-68,-89,26,20,-84,50,-46,-53,-48,100,-98,9,-65,-83,-105,-103, 
  /* [12][0][][] */ 1,75,-44,2,60,15,-26,15,-48,69,-21,3,-80,15,32,-113,-89,-32,-28,-66,22,-20,5,65,-52,-73,28,-96,51,19,-33,92,-127,-48,-59,4,-13,-75,-30,-19,71,-7,-99,-90,-18,-83,-32,95, 
  /* [13][0][][] */ 71,-41,67,64,57,75,43,24,39,-116,-13,-51,50,40,32,-68,-127,-94,-92,-2,28,-53,78,-75,-84,9,-20,-8,-112,-111,46,1,7,67,-52,3,-101,-53,-11,31,-85,40,-77,-10,-65,-2,-30,-54, 
  /* [14][0][][] */ -31,-28,35,30,38,-15,-12,-50,-42,-19,24,41,-21,-36,-43,-31,57,-24,0,8,-23,17,1,24,-59,-23,65,8,-53,-57,-31,14,127,-8,-14,-2,44,45,12,23,-1,-43,10,57,20,-53,29,-20, 
  /* [15][0][][] */ -7,-68,-30,10,79,-77,63,-69,71,24,-32,5,66,27,-57,-118,-3,-2,-80,17,31,11,29,36,65,68,-25,89,11,47,64,-77,-57,-36,-69,-12,-53,101,51,-20,33,19,-20,-37,34,-46,-28,-127, 
  /* [16][0][][] */ -80,27,88,-26,50,93,-19,16,43,59,-67,64,-30,-11,-33,-59,46,54,54,65,78,63,-31,24,-5,62,-92,68,-50,19,34,13,-127,74,30,19,-7,37,-61,-62,19,-57,39,8,44,78,69,-10, 
  /* [17][0][][] */ 14,-52,47,82,-15,-57,-33,-74,48,-33,57,57,60,73,-88,17,39,41,84,127,-72,-9,-4,-42,44,86,-86,56,109,-34,-23,67,-51,17,18,-26,-24,63,-108,-43,-88,-50,-26,-63,1,22,66,-100, 
  /* [18][0][][] */ -70,127,115,-15,0,-59,-86,1,-20,73,-109,-25,-58,33,38,-65,56,-5,65,-1,95,-28,33,-38,21,-92,-15,80,27,32,5,43,32,21,-81,-85,-14,-4,-27,0,-74,16,-54,-54,-101,6,33,33, 
  /* [19][0][][] */ 11,12,60,28,42,-88,79,83,73,-72,12,-24,-104,20,-66,46,76,-109,90,43,-32,64,-63,3,57,-90,53,-79,-100,-127,-75,31,89,-87,22,-9,-5,-79,-54,-107,28,-112,-89,-3,-98,18,98,-99, 
  /* [20][0][][] */ -13,59,69,77,-47,89,42,61,43,43,-50,17,-9,99,51,-68,-65,-19,-38,-4,30,-22,-60,-69,85,-30,-127,68,33,31,-17,104,38,40,-14,43,47,-12,-42,-77,-49,-50,-53,-108,-3,-28,-48,65, 
  /* [21][0][][] */ 94,-6,59,-127,73,-47,77,34,26,-33,-45,35,14,48,-17,-83,-78,-12,37,4,101,-31,58,-61,55,-60,-44,70,16,20,5,4,-32,-23,-63,-80,84,94,-95,-2,10,-7,49,-25,-55,-46,-55,35, 
  /* [22][0][][] */ 53,-40,-22,-30,23,-9,54,55,-36,37,-40,-47,74,-52,-36,7,57,62,-35,-14,61,-25,53,58,44,-14,2,42,-21,-25,-26,-34,105,35,33,51,1,-1,7,-56,-6,13,36,127,37,-42,52,10, 
  /* [23][0][][] */ 56,-58,2,39,57,-71,8,-61,59,-42,66,49,11,-66,17,-55,80,-19,-61,69,71,-62,67,-35,-3,-21,18,18,45,46,54,-24,-72,31,7,37,63,-8,-85,-40,-87,-21,17,-127,-35,-55,82,12, 
  /* [24][0][][] */ -32,-38,-91,-74,-76,-72,-49,-73,63,76,89,41,127,20,-23,-123,-18,52,54,-54,107,-69,-49,-46,67,-37,44,39,102,68,23,-36,-56,12,63,46,-48,-58,89,-46,-54,-84,87,-116,45,-28,73,87, 
  /* [25][0][][] */ -73,-50,-50,-30,70,-44,-53,31,40,-65,-13,17,44,4,-70,-54,-76,39,29,-70,49,57,-25,-73,25,-21,-127,38,60,-51,32,80,5,-77,24,33,69,-34,-26,-47,-44,30,-78,-55,75,32,53,9, 
  /* [26][0][][] */ 48,-61,27,32,-40,-5,-9,-5,-114,-105,104,82,-30,-34,26,6,41,40,-39,-28,31,90,127,51,15,53,18,22,23,-4,-39,26,5,6,-21,-26,-7,101,32,87,-14,81,51,94,-50,39,-12,125, 
  /* [27][0][][] */ 48,-76,-69,-119,-127,-30,-43,13,64,81,37,-77,8,40,79,-72,104,9,72,-60,-44,-3,-19,-75,-46,13,-78,0,42,46,-7,10,16,12,-49,-31,-79,-45,-51,-22,-79,-42,43,-76,99,38,82,77, 
  /* [28][0][][] */ 76,-22,62,40,-42,-47,-57,16,-26,-77,33,46,-10,-26,39,124,35,80,-50,47,-12,51,17,36,-84,36,41,-39,-25,-55,-4,8,43,4,77,113,31,-17,17,71,89,63,33,127,-67,9,-32,40, 
  /* [29][0][][] */ 60,36,51,-83,-58,9,-86,12,120,-5,-40,-77,112,-84,-22,-46,-108,105,43,-61,-53,-17,60,-9,-20,21,-61,-10,-91,12,119,13,3,-16,-66,-21,1,127,26,100,78,75,-14,29,28,106,-27,-18, 
  /* [30][0][][] */ 6,-75,-77,43,-120,16,-67,-30,96,-27,-13,-58,-109,0,34,-6,-8,20,71,-125,26,-115,-127,-2,-115,17,-84,105,-6,-112,-103,-16,-85,-80,-123,-63,-5,-30,-17,10,71,-84,-29,75,91,-46,91,47, 
  /* [31][0][][] */ 50,-25,48,89,64,76,-21,-91,-35,-1,-38,-33,80,-84,-30,43,-23,-48,58,53,68,42,-21,69,63,-46,-43,47,-18,-28,60,95,-60,50,-46,-20,94,-11,-29,-127,54,-46,-50,-34,19,-34,9,57, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0024654392618685961, 0.00251372205093503, 0.0028452505357563496, 0.0030816972721368074, 0.0033919604029506445, 0.0028217046055942774, 0.004783952608704567, 0.0028227365110069513, 0.003817566204816103, 0.0027856130618602037, 0.003000213298946619, 0.0023796570021659136, 0.0027751370798796415, 0.0025644407141953707, 0.0055583948269486427, 0.003096375148743391, 0.0034255916252732277, 0.0029552406631410122, 0.002877294085919857, 0.0024088216014206409, 0.0029150599148124456, 0.0030080799479037523, 0.0049471659585833549, 0.0033180541358888149, 0.0027155056595802307, 0.0034618498757481575, 0.0034791587386280298, 0.00323092145845294, 0.0048297178000211716, 0.0025305990129709244, 0.0023930326569825411, 0.0033060451969504356, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[48] = { 1885, -2705, 3604, 2759, 2309, -44, 1928, 3945, -3097, -1198, -1301, 7518, 4819, 3536, 6861, -2331, -3230, 15297, 3221, 4361, 6166, 13839, 22767, 952, -3138, 1718, 154, -1066, 1928, 3551, 4260, 8625, 250, 492, 10082, 2954, 6104, 2248, 1315, -1161, 2647, -2038, 11002, 749, 592, 3126, -2031, 3970, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00020981274428777397, 0.00014856220514047891, 0.00019692447676789016, 0.00018475198885425925, 0.00019562095985747874, 0.00021696163457818329, 0.00013896047312300652, 0.00018280754738952965, 0.0001377254375256598, 0.00023871469602454454, 0.00026884223916567862, 9.7943840955849737e-05, 0.00013691242202185094, 0.0001417962193954736, 0.00012095259444322437, 0.00018705592083279043, 0.00016774369578342885, 6.6629094362724572e-05, 0.00015225954120978713, 0.00016461985069327056, 0.00013037241296842694, 7.4553761805873364e-05, 4.1189719922840595e-05, 0.00023214385146275163, 0.00012968940427526832, 0.00016547075938433409, 0.00019619580416474491, 0.00017657055286690593, 0.00014740995538886636, 0.00012086307833669707, 0.00013662816490978003, 0.00010007689706981182, 0.00023700713063590229, 0.00020966659940313548, 8.8301159848924726e-05, 0.00020083635172341019, 0.0001311303349211812, 0.00025415822165086865, 0.00025859038578346372, 0.00029241311131045222, 0.00023985559528227895, 0.00024482863955199718, 9.2720445536542684e-05, 0.00037810992216691375, 0.00018556663417257369, 0.00016682539717294276, 0.00018953134713228792, 0.00020310038235038519, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ -5,17,127,-4,-12,91,-12,-96, 
  /* [1][0][][] */ 110,-77,97,-77,-13,-73,127,12, 
  /* [2][0][][] */ 60,53,55,-71,-55,12,127,-26, 
  /* [3][0][][] */ 17,29,15,-24,39,-81,127,16, 
  /* [4][0][][] */ 127,-34,-49,-26,-74,-66,-25,73, 
  /* [5][0][][] */ 46,69,127,-18,27,-42,42,-12, 
  /* [6][0][][] */ 90,127,-42,113,-82,14,16,77, 
  /* [7][0][][] */ -32,-5,-38,30,26,-103,-127,-54, 
  /* [8][0][][] */ 102,51,-37,95,-55,64,-127,-39, 
  /* [9][0][][] */ 127,-14,-14,52,0,-27,17,-65, 
  /* [10][0][][] */ 54,7,2,2,-18,127,29,22, 
  /* [11][0][][] */ 127,-18,-11,-109,82,-75,-31,85, 
  /* [12][0][][] */ -50,123,108,-29,22,97,-118,127, 
  /* [13][0][][] */ 120,-1,-127,1,24,-99,6,-125, 
  /* [14][0][][] */ 87,23,-1,-19,-127,52,-99,-31, 
  /* [15][0][][] */ -19,31,-66,-14,-127,-32,89,60, 
  /* [16][0][][] */ -13,-47,120,28,127,-36,-97,-81, 
  /* [17][0][][] */ 29,-14,112,0,127,-42,-85,-7, 
  /* [18][0][][] */ 101,-47,127,25,-18,2,-37,15, 
  /* [19][0][][] */ 79,44,44,-67,-30,-127,14,-49, 
  /* [20][0][][] */ 60,-45,64,127,12,-40,-74,76, 
  /* [21][0][][] */ 70,-18,-89,-127,40,-68,27,108, 
  /* [22][0][][] */ -30,-127,-55,-57,60,-17,82,-56, 
  /* [23][0][][] */ -7,20,37,-41,-123,-127,6,-35, 
  /* [24][0][][] */ 127,15,82,63,-32,-43,-109,76, 
  /* [25][0][][] */ 119,93,-90,-80,-69,-2,-6,127, 
  /* [26][0][][] */ -86,-33,26,-127,116,9,-47,-101, 
  /* [27][0][][] */ 127,124,16,-38,13,62,25,-1, 
  /* [28][0][][] */ 0,88,53,4,-11,-59,-27,127, 
  /* [29][0][][] */ 127,25,61,111,29,-12,-124,37, 
  /* [30][0][][] */ 127,-110,-69,115,55,22,-102,81, 
  /* [31][0][][] */ 121,-83,30,62,-83,-127,-104,68, 
  /* [32][0][][] */ -72,-77,16,-127,62,-6,-44,-66, 
  /* [33][0][][] */ 44,1,54,45,29,-65,127,52, 
  /* [34][0][][] */ -90,47,127,-57,67,-38,-30,121, 
  /* [35][0][][] */ -77,4,0,98,-18,127,55,-3, 
  /* [36][0][][] */ 78,20,-7,-127,38,-19,36,71, 
  /* [37][0][][] */ 60,57,-36,14,-73,127,57,37, 
  /* [38][0][][] */ -24,-65,29,98,17,68,-18,127, 
  /* [39][0][][] */ 8,-28,-127,12,-9,-28,-4,76, 
  /* [40][0][][] */ 50,8,-75,7,-47,57,-30,127, 
  /* [41][0][][] */ 19,-3,8,-61,-127,-110,-43,-10, 
  /* [42][0][][] */ -78,63,-76,114,-20,91,-35,-127, 
  /* [43][0][][] */ 3,-4,-27,-127,-18,-1,-4,-53, 
  /* [44][0][][] */ 82,30,38,88,13,127,-43,40, 
  /* [45][0][][] */ 16,90,-28,26,127,-29,-82,-12, 
  /* [46][0][][] */ 70,-67,42,127,48,41,-62,68, 
  /* [47][0][][] */ 6,-67,79,7,127,19,37,63, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0027525138575583696, 0.0019489737460389733, 0.0025834338739514351, 0.0024237441830337048, 0.0025663331616669893, 0.0028462994378060102, 0.0018230094574391842, 0.0023982352577149868, 0.0018068072386085987, 0.0031316759996116161, 0.0035269164945930243, 0.0012849161867052317, 0.0017961413832381368, 0.001860211486928165, 0.0015867658657953143, 0.0024539693258702755, 0.0022006139624863863, 0.00087410089327022433, 0.0019974787719547749, 0.0021596325095742941, 0.0017103435238823295, 0.00097806390840560198, 0.00054036412620916963, 0.0030454737134277821, 0.0017013832693919539, 0.0021707955747842789, 0.0025738745462149382, 0.0023164127487689257, 0.0019338575657457113, 0.0015855914680287242, 0.0017924122512340546, 0.0013128995196893811, 0.0031092744320631027, 0.0027505967300385237, 0.001158414757810533, 0.0026347534731030464, 0.0017202866729348898, 0.0033342780079692602, 0.0033924232702702284, 0.0038361402694135904, 0.0031466432847082615, 0.003211884293705225, 0.0012163908686488867, 0.0049603888764977455, 0.002434431342408061, 0.0021885668393224478, 0.0024864440783858299, 0.0026644549798220396, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[8] = { -7644, -3450, 5172, -10210, 6363, -64, 9942, 15306, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00011961075506405905, 0.00016098785272333771, 0.00011951774649787694, 0.00013594917254522443, 0.000127656981931068, 0.00015327367873396724, 9.6667368779890239e-05, 0.00017430818115826696, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 127,-38,14,-11,38,72,14,27,126,-88,42,-12,-73,55,9,-75,25,-47,-16,-30,7,-70,15,-58,-54,-45,-41,-51,-37,82,-31,55,11,-88,13,-49,69,-90,-64,11,9,-37,-79,-25,65,-59,40,-33, 
  /* [1][0][][] */ 49,-7,-6,75,62,73,5,40,101,-102,-16,-9,36,16,-63,-22,-44,-56,-75,-3,17,-47,58,70,-1,-73,0,54,-33,69,-76,127,-31,27,-36,-26,-78,-20,-12,-24,-63,-32,-34,37,11,-31,5,-95, 
  /* [2][0][][] */ -22,-46,-111,41,-69,-9,-19,40,-127,-56,-95,-82,-57,27,-127,-24,94,-54,50,-4,109,57,-12,-24,47,94,20,-117,-62,27,63,18,-66,0,63,-67,62,-15,70,109,-68,91,35,-16,-67,39,-59,92, 
  /* [3][0][][] */ -8,-34,-16,29,-14,14,12,56,82,74,-127,-48,19,-27,-32,60,-54,2,9,51,-18,1,58,0,5,20,-44,46,-29,40,-22,-14,1,0,15,14,45,-8,28,10,-54,71,62,7,24,-37,-17,-39, 
  /* [4][0][][] */ -19,-76,11,-41,8,101,-56,-67,-17,-34,60,15,-61,-33,-18,13,76,55,-18,49,-75,-44,106,-22,-108,-21,-10,-12,30,-13,-6,65,-87,25,-24,46,-35,39,-14,24,-44,38,-34,35,127,42,-15,4, 
  /* [5][0][][] */ -60,-64,36,-127,-28,22,-49,-36,10,29,-47,43,-60,23,32,15,46,62,55,25,37,-1,-17,-47,34,-57,-2,-37,-25,-9,45,-87,-10,-34,40,6,-23,34,26,59,67,14,13,-25,-13,-13,-8,14, 
  /* [6][0][][] */ -46,-45,40,29,-70,-72,0,-97,-127,31,-108,62,21,-33,72,33,-33,0,4,113,-25,-9,88,70,-85,-19,43,22,21,-52,-38,-60,-18,94,77,-92,-32,62,59,-40,-56,74,77,-45,-9,-10,-35,15, 
  /* [7][0][][] */ 8,-19,-2,-14,5,30,-38,-58,-127,-35,73,5,6,-30,25,4,27,32,1,-21,-47,-3,-9,-60,54,-10,-42,-3,-11,-16,-15,-38,-107,-62,-26,0,43,-37,-21,2,40,-8,45,-35,19,-52,30,12, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0052345022559165955, 0.0070452801883220673, 0.0052304319106042385, 0.0059495172463357449, 0.005586627870798111, 0.0067076864652335644, 0.0042304354719817638, 0.0076282150112092495, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[48] = { 1272, 2979, 8275, 2058, -1366, -6518, -168, 8336, 5377, -3555, -5675, -7502, 1238, 10211, 13140, -2001, 5908, -3197, 4575, -1054, 20581, -6344, -935, -1170, 1610, -2599, -1444, -5717, 11772, -25656, -8329, -252, -4570, -1708, -2148, -1062, 15578, -6881, 869, -10440, -2706, 5648, 302, -2357, 2650, -3178, 8833, -5393, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00018897779227700084, 0.00017220366862602532, 0.0001078967543435283, 0.00011028123117284849, 0.00015285471454262733, 0.0001197800665977411, 0.00023224035976454616, 0.00014669939992018044, 0.00016858636809047312, 0.00033805050770752132, 0.00024034245871007442, 9.1435453214216977e-05, 0.0002456334768794477, 7.6305950642563403e-05, 0.00013004240463487804, 0.00018747278954833746, 0.00014338950859382749, 0.00027246677200309932, 0.0001056462642736733, 0.00026391283608973026, 6.2198458181228489e-05, 0.00010906058014370501, 0.00015883122978266329, 0.00019206354045309126, 0.00013429294631350785, 0.0004512299201451242, 0.0001862029021140188, 0.00033915598760358989, 8.3403741882648319e-05, 7.5890297011937946e-05, 0.00013838280574418604, 0.00011879375233547762, 9.4269700639415532e-05, 0.00028906570514664054, 0.00011617472773650661, 0.0002842785615939647, 9.6506511908955872e-05, 0.00010459290933795273, 6.477473652921617e-05, 0.00010044150985777378, 0.00023139372933655977, 0.00015031725342851132, 0.00020162784494459629, 0.00014340609777718782, 0.00012712641910184175, 8.0438301665708423e-05, 0.00010206549632130191, 0.00015137267473619431, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 69,38,-40,26,15,12,-58,37,40,-30,36,22,-12,-87,-44,64,104,33,-56,-13,112,38,-9,-8,83,15,34,-3,-127,38,7,-63,83,20,107,44,-65,37,105,7,-75,58,-99,-42,21,-107,-54,14, 104,127,-72,117,30,54,-73,-127,53,73,127,67,-26,-19,-14,21,-15,127,-77,33,82,127,53,-32,44,6,30,127,-116,109,-16,-127,111,-29,3,97,-80,127,90,47,-127,-72,53,12,-3,20,-116,84, 50,12,-39,38,13,26,-44,48,49,-92,21,61,-7,-80,-48,3,110,3,-30,-24,119,83,-18,25,76,20,26,9,-65,52,-6,-31,45,7,79,31,-36,38,127,19,-52,70,34,68,22,108,2,-5, 
  /* [0][1][][] */ -62,-61,-127,115,24,73,77,-35,40,45,-38,127,125,18,-36,-65,-25,59,77,-22,-107,20,6,-82,37,13,9,19,-25,109,33,65,127,127,58,18,-98,6,-68,35,54,9,40,-79,18,-123,-23,127, 26,-98,-30,-127,127,-5,127,-95,-127,127,19,42,-127,127,127,-5,-127,39,13,127,32,-10,127,-11,-127,127,39,-49,-121,53,-127,118,91,-89,53,127,127,34,-37,127,85,-57,-34,20,114,-43,-12,64, -33,-52,-81,76,-25,127,48,-15,43,28,-36,36,-18,13,-46,-9,-47,79,127,-50,-112,62,-70,127,38,11,12,32,1,127,57,56,11,-4,-19,-109,-65,-1,-16,17,12,54,-26,127,-4,127,-53,85, 
  /* [0][2][][] */ -43,-27,8,15,-10,33,-22,30,28,-50,-10,64,39,-47,-57,33,78,50,14,0,-94,49,-17,-14,44,3,-15,17,-12,-34,74,11,15,25,127,17,-12,83,90,22,54,35,83,-24,-57,-115,5,-2, -127,-11,-38,51,-109,1,-61,-2,24,57,-63,88,-25,-44,-11,127,-107,41,-77,-26,-127,43,15,-43,3,59,-127,-7,-53,96,84,12,67,-26,-4,27,-26,45,-71,60,-13,-127,-127,-50,-127,54,-127,110, -31,-35,19,10,-7,12,-34,19,29,-75,-23,50,-12,-72,-50,20,82,-6,90,21,-83,-4,-4,34,32,-30,-20,11,8,-6,93,17,32,7,65,46,-14,86,99,26,57,39,-63,26,-32,91,-14,-15, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0090311141684651375, 0.0082294903695583344, 0.0051563088782131672, 0.0052702613174915314, 0.0073048179037868977, 0.0057242037728428841, 0.011098600924015045, 0.0070106596685945988, 0.0080566219985485077, 0.016155192628502846, 0.011485794559121132, 0.004369635134935379, 0.011738648638129234, 0.0036466070450842381, 0.0062146340496838093, 0.0089591909199953079, 0.006852482445538044, 0.013020992279052734, 0.0050487597472965717, 0.012612205930054188, 0.0029724198393523693, 0.0052119274623692036, 0.0075904307886958122, 0.0091785797849297523, 0.006417764350771904, 0.021563956514000893, 0.0088985040783882141, 0.016208022832870483, 0.0039858054369688034, 0.0036267430987209082, 0.0066132154315710068, 0.0056770686060190201, 0.0045050815679132938, 0.013814243488013744, 0.0055519072338938713, 0.0135854696854949, 0.0046119773760437965, 0.0049984203651547432, 0.0030955385882407427, 0.0048000281676650047, 0.011058141477406025, 0.0071835541166365147, 0.0096356505528092384, 0.0068532750010490417, 0.0060752811841666698, 0.0038440888747572899, 0.0048776371404528618, 0.0072339922189712524, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[48] = { 39844, 4470, 766, 952, 2654, 2786, 4940, 2834, 3316, -4039, 14640, 602, 4949, 1452, 6600, 1879, 6412, -1392, 10307, 228, 3642, -46, 3195, 3264, 2259, -3532, 2073, 7174, 1628, 7548, 1621, 6040, 1704, 4578, -663, -4111, 2287, 1520, 308, 3718, 10261, -635, 15590, 2030, 861, 3570, 3021, -1359, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 2.7084604880656116e-05, 0.00017194694373756647, 0.00026661276933737099, 0.00021884587476961315, 0.00023497195797972381, 0.00017396337352693081, 0.00015888675989117473, 0.00021315322373993695, 0.00012456672266125679, 0.0001500942453276366, 7.0458147092722356e-05, 0.0002727061219047755, 0.00016533723101019859, 0.00020653712272178382, 0.00011163993622176349, 0.00016476397286169231, 0.00012772798072546721, 0.00022698081738781184, 9.6462834335397929e-05, 0.00016188794688787311, 0.00018981585162691772, 0.00018817953241523355, 0.00017037872748915106, 0.00019323042943142354, 0.00020927292644046247, 0.0001982785906875506, 0.00020466747810132802, 0.00011633289977908134, 0.00018666226242203265, 9.6203606517519802e-05, 0.00021325572743080556, 0.00014577024558093399, 0.0001562928082421422, 0.00015400091069750488, 0.00020755922014359385, 0.00014175614342093468, 0.00023664720356464386, 0.00019415913266129792, 0.00020467818831093609, 0.00010839049355126917, 9.2252303147688508e-05, 0.00025880822795443237, 5.9586618590401486e-05, 0.00018302066018804908, 0.00027532211970537901, 0.00020414427854120731, 0.00018420354172121733, 0.00021499137801583856, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -127,68,-31,-52,68,86,-40,-54, 
  /* [1][0][][] */ -17,-38,-34,10,-54,-127,12,-1, 
  /* [2][0][][] */ -53,43,-10,-58,-46,33,-51,127, 
  /* [3][0][][] */ 77,37,20,-28,-46,-127,33,-10, 
  /* [4][0][][] */ 16,70,-113,46,-127,81,33,23, 
  /* [5][0][][] */ -19,66,55,-21,-101,-127,-80,-11, 
  /* [6][0][][] */ -42,127,99,-17,-63,-33,16,-36, 
  /* [7][0][][] */ -13,-5,39,45,16,-127,-7,46, 
  /* [8][0][][] */ 127,33,-62,106,-110,-93,-118,-27, 
  /* [9][0][][] */ 116,-35,-71,-76,24,-25,-35,127, 
  /* [10][0][][] */ -127,2,-17,124,11,68,38,-117, 
  /* [11][0][][] */ 14,36,61,3,23,127,109,68, 
  /* [12][0][][] */ 7,-37,-57,-38,127,-20,-33,18, 
  /* [13][0][][] */ -37,-9,-22,42,30,-127,75,63, 
  /* [14][0][][] */ 44,52,127,17,41,-124,-86,2, 
  /* [15][0][][] */ -57,127,76,117,-34,28,59,-110, 
  /* [16][0][][] */ -127,-48,67,-81,120,-35,-56,20, 
  /* [17][0][][] */ 28,-29,-29,2,1,127,-31,21, 
  /* [18][0][][] */ -52,127,76,-69,-73,76,85,-78, 
  /* [19][0][][] */ 14,125,115,127,-22,25,47,44, 
  /* [20][0][][] */ -7,-14,57,-127,-29,-2,85,-17, 
  /* [21][0][][] */ -127,91,11,-86,111,50,102,3, 
  /* [22][0][][] */ 86,-46,-99,65,41,-38,-67,127, 
  /* [23][0][][] */ 44,-39,-127,-22,67,-19,-52,75, 
  /* [24][0][][] */ 30,-6,-62,24,-49,30,-127,79, 
  /* [25][0][][] */ 16,9,44,-7,127,-20,-78,-21, 
  /* [26][0][][] */ 0,114,127,-8,-4,-37,75,-84, 
  /* [27][0][][] */ -2,51,102,-55,37,27,71,-127, 
  /* [28][0][][] */ 64,-26,69,127,32,-20,19,93, 
  /* [29][0][][] */ 79,70,80,38,-67,26,-127,81, 
  /* [30][0][][] */ 44,7,-85,64,-127,-50,-22,40, 
  /* [31][0][][] */ 21,89,86,-42,-59,37,96,-127, 
  /* [32][0][][] */ 70,14,-10,62,118,127,23,-46, 
  /* [33][0][][] */ 70,-30,-127,31,39,-18,-64,120, 
  /* [34][0][][] */ 6,-47,27,-127,-18,57,-13,14, 
  /* [35][0][][] */ -80,39,127,25,-13,-116,-13,-41, 
  /* [36][0][][] */ 4,31,-44,-127,-6,15,19,-63, 
  /* [37][0][][] */ 63,15,-10,-78,-62,127,-64,-84, 
  /* [38][0][][] */ 96,-58,-9,124,71,56,-33,127, 
  /* [39][0][][] */ 127,78,80,122,-49,126,-92,14, 
  /* [40][0][][] */ 39,-127,-94,-36,32,-12,-3,86, 
  /* [41][0][][] */ -3,-21,-127,-66,29,-58,-41,-3, 
  /* [42][0][][] */ 48,107,94,127,-88,-7,22,51, 
  /* [43][0][][] */ 103,-45,-77,-127,-45,-24,27,59, 
  /* [44][0][][] */ 21,83,89,-78,-127,-10,63,-110, 
  /* [45][0][][] */ 43,46,-127,47,-15,16,16,30, 
  /* [46][0][][] */ 48,-26,-87,-127,31,-21,-34,46, 
  /* [47][0][][] */ 75,-127,118,-74,84,-17,11,4, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.0003990289696957916, 0.0025332402437925339, 0.0039279223419725895, 0.0032241875305771828, 0.0034617679193615913, 0.0025629478041082621, 0.0023408287670463324, 0.0031403193715959787, 0.0018352024490013719, 0.0022112913429737091, 0.0010380377061665058, 0.0040176934562623501, 0.0024358613882213831, 0.0030428464524447918, 0.001644756062887609, 0.0024274159222841263, 0.0018817761447280645, 0.0033440371043980122, 0.0014211565721780062, 0.0023850442375987768, 0.0027964971959590912, 0.0027723899111151695, 0.0025101362261921167, 0.0028468032833188772, 0.0030831522308290005, 0.0029211761429905891, 0.0030153016559779644, 0.0017138960538432002, 0.0027500365395098925, 0.0014173374511301517, 0.0031418295111507177, 0.0021475872490555048, 0.0023026128765195608, 0.0022688470780849457, 0.0030579047743231058, 0.0020884487312287092, 0.0034864488989114761, 0.0028604855760931969, 0.0030154595151543617, 0.0015968830557540059, 0.0013591242022812366, 0.0038129400927573442, 0.0008778709452599287, 0.0026963858399540186, 0.0040562343783676624, 0.0030075935646891594, 0.0027138129808008671, 0.0031674003694206476, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[8] = { -15513, -37398, 5378, 8592, -15912, 5035, -33143, -604, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 0.00016906231758184731, 4.7757090214872733e-05, 6.8894740252289921e-05, 7.119111978681758e-05, 6.7190783738624305e-05, 7.2983581048902124e-05, 7.1878348535392433e-05, 6.6856118792202324e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 56,58,-86,75,21,15,-116,-32,22,-10,0,-43,-30,-5,58,17,64,-12,56,-11,22,-59,55,1,5,-42,-29,10,-26,13,-29,-5,55,4,7,9,127,69,30,-34,-4,-20,-9,-37,75,20,19,-58, 
  /* [1][0][][] */ 63,28,20,5,46,84,-22,-28,19,59,-48,-77,92,-10,22,34,29,44,17,-78,127,-24,50,49,27,23,45,16,14,-56,67,79,60,85,-2,118,52,28,13,29,98,40,49,27,9,38,103,-90, 
  /* [2][0][][] */ -10,7,65,127,-30,11,-24,25,13,79,-4,-51,-67,87,48,40,-89,-79,62,2,-4,32,-35,-75,-38,-43,28,8,-99,13,-10,-18,-33,-31,-99,-47,-3,25,-76,-31,-26,-53,-7,-3,43,-84,-12,-5, 
  /* [3][0][][] */ -26,43,-68,0,32,-67,0,55,105,-59,-41,16,-26,11,12,45,19,16,-29,-27,0,15,-65,34,-50,-19,35,-17,47,-20,40,-70,31,-24,-50,-41,-127,-11,-77,11,-6,-51,42,-23,-68,9,-11,-46, 
  /* [4][0][][] */ 57,-22,26,-7,-60,76,35,50,-127,-31,43,27,52,-49,-26,-64,73,57,69,-21,17,-72,11,34,-34,-1,-37,-96,-46,-48,79,58,75,-10,94,66,65,75,68,14,15,25,-59,-39,79,54,80,-30, 
  /* [5][0][][] */ 24,64,13,77,27,41,-31,-106,-127,37,1,-3,29,95,21,-100,95,84,-42,34,10,-51,-21,-83,-125,-82,-65,62,-20,62,5,49,4,-101,57,23,-31,125,-52,-127,-28,-23,-24,-36,-19,10,-80,84, 
  /* [6][0][][] */ 114,55,-11,104,-118,19,53,85,21,-122,78,91,89,-59,-18,-35,51,25,-51,13,79,-9,-36,-4,55,65,-40,-34,31,-70,57,87,6,-43,-6,102,102,-75,11,34,-104,79,-119,83,85,118,127,-34, 
  /* [7][0][][] */ 47,17,127,56,-58,49,-104,8,-37,112,-18,-26,49,53,23,-7,-65,-10,-50,22,-14,30,1,-51,-10,24,49,-17,-3,9,5,-15,-76,-22,66,7,91,10,46,-17,-30,-64,-26,-68,6,-48,22,34, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0081350747495889664, 0.0022980135399848223, 0.0033151316456496716, 0.0034256309736520052, 0.0032331396359950304, 0.0035118819214403629, 0.003458699444308877, 0.0032170356716960669, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[48] = { 12256, -19167, -1307, 3963, -61, 12414, 5085, -1824, -12109, 1608, -1717, -5809, -4418, -10623, 6888, 454, -7992, 28342, -5736, -10750, 13518, -302, -900, 2415, 842, 2417, -1834, -1575, -1645, 5300, 372, 20646, 15837, 1618, 848, 16658, -4922, 29336, 258, 70, -7275, -9798, -471, 2230, 3887, 24723, 12116, -5653, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 9.412212239112705e-05, 7.9956298577599227e-05, 0.00075726123759523034, 0.00024962564930319786, 0.00015098326548468322, 0.00011409173021093011, 0.00012842607975471765, 0.00029375546728260815, 0.00013485806994140148, 0.00042546438635326922, 0.0001644273434067145, 7.7293399954214692e-05, 0.00012667945702560246, 0.00015005398017819971, 0.00011738097236957401, 7.9871395428199321e-05, 9.2622220108751208e-05, 4.9451096856500953e-05, 0.00030407481244765222, 6.24588064965792e-05, 0.00011826883564935997, 0.00026968843303620815, 0.00017748039681464434, 0.00014007212303113192, 0.00025557959452271461, 0.00017765194934327155, 0.00022011251712683588, 0.00018052934319712222, 0.00018967529467772692, 0.00016052646969910711, 0.00012873293599113822, 0.00011729525431292132, 0.00010240152914775535, 0.00017182386363856494, 0.00010252530046273023, 0.00010447885142639279, 0.00040688549051992595, 6.8060733610764146e-05, 8.9834386017173529e-05, 0.00037386667099781334, 0.00012094397970940918, 0.00011193077807547525, 0.00014852314780000597, 0.00014287301746662706, 0.0001841266785049811, 6.2805251218378544e-05, 0.00015745409473311156, 0.00013496125757228583, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -70,28,27,6,127,-54,5,5,40,36,96,44,-13,24,-68,42,108,26,-15,94,-30,10,-32,-17,-24,-3,28,-49,-25,127,30,-77,-15,127,96,-104,22,-78,-127,-28,22,-27,-11,-56,-12,-43,-127,23, -88,54,7,64,-11,-87,109,-18,81,21,-13,127,31,127,-22,70,125,-59,14,76,-5,-50,127,-127,-16,37,-97,19,-25,-104,127,-127,-127,-81,42,-39,-44,-41,-107,21,-38,-18,40,-127,9,-92,-14,47, -27,20,29,2,63,-40,12,-7,62,29,56,-12,-59,30,-47,68,59,-22,1,46,-34,-2,-62,-16,26,-15,32,-109,-30,68,-30,-88,30,-12,127,-127,21,-76,-88,1,41,-9,34,-54,-10,-112,-118,2, 
  /* [0][1][][] */ -127,105,-37,-104,1,-109,-22,-7,27,11,-22,63,127,54,-77,5,113,-127,18,127,-39,-61,-97,-24,-127,-8,-27,8,3,-20,35,-45,-31,112,-103,-97,47,-120,50,57,-63,45,-118,74,-17,-49,11,-51, -10,52,127,127,-54,53,-127,127,127,-127,-127,108,109,45,127,-86,-66,-125,127,-3,-127,127,98,-9,89,101,75,127,127,-106,37,2,-83,-119,-6,-30,127,127,122,56,-36,127,-28,71,127,78,-9,-127, -58,42,-68,-94,-62,-100,-10,-21,0,5,45,90,34,69,-69,98,127,-74,5,67,17,-91,-111,-62,5,-22,-44,18,-4,10,32,-55,-11,-70,-79,-52,20,-127,61,-127,-33,45,127,93,-24,-127,6,106, 
  /* [0][2][][] */ -13,54,-1,-8,29,-44,10,4,43,21,124,43,38,5,-67,127,31,-81,-40,-2,-33,26,-51,71,-11,-27,-35,-20,13,49,-3,-26,-8,51,-79,47,-30,-66,47,-27,84,-4,-28,-4,-30,-58,12,-35, -7,127,-11,25,-90,-127,88,-75,47,20,17,-74,-87,12,-69,109,36,-28,3,50,-35,13,96,107,11,-127,127,5,23,-64,-33,-72,-22,-50,-88,-44,-69,-106,15,33,127,45,-66,11,-35,-60,-49,-33, 55,18,20,-3,-25,-15,13,12,45,26,99,3,-9,-20,-30,82,41,-86,-41,-39,-30,-5,-37,32,9,-43,-58,-66,-3,-3,3,-16,-14,-8,-25,50,-38,-43,51,4,71,31,22,12,-25,-91,19,60, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0049217077903449535, 0.0041809673421084881, 0.039597690105438232, 0.013053089380264282, 0.0078950142487883568, 0.0059659318067133427, 0.0067154844291508198, 0.015360666438937187, 0.0070518176071345806, 0.022247813642024994, 0.0085980137810111046, 0.0040417229756712914, 0.0066241519525647163, 0.0078464215621352196, 0.0061379284597933292, 0.0041765277273952961, 0.0048432769253849983, 0.0025858303997665644, 0.015900272876024246, 0.0032660122960805893, 0.0061843553557991982, 0.01410218607634306, 0.0092805670574307442, 0.0073244636878371239, 0.013364425860345364, 0.0092895375564694405, 0.011509828269481659, 0.0094399983063340187, 0.0099182464182376862, 0.0083940345793962479, 0.0067315301857888699, 0.0061334460042417049, 0.0053546433337032795, 0.0089847827330231667, 0.0053611155599355698, 0.0054632681421935558, 0.021276310086250305, 0.0035589407198131084, 0.004697499331086874, 0.019549734890460968, 0.0063242404721677303, 0.0058529339730739594, 0.0077663734555244446, 0.0074709239415824413, 0.0096281049773097038, 0.0032841279171407223, 0.008233378641307354, 0.0070572132244706154, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[48] = { 1619, 10709, -14287, 7528, 3517, 4382, 4758, 14258, 12912, 9349, -2062, 145, 737, 11136, 2509, -228, 511, 8031, 14501, 336, 3165, 9978, 2460, 7686, 10876, 12701, 2581, 8034, 3840, 3586, -2130, 13944, 1890, 5962, 6793, 14905, 28738, 11658, 5149, 16825, 1830, 1190, 8187, 1901, 5173, 4365, 4367, 3076, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00014286398072727025, 7.9265802924055606e-05, 6.1840088164899498e-05, 0.00010627136362018064, 0.00014985284360591322, 0.00013586832210421562, 0.00012976571451872587, 6.5307060140185058e-05, 7.4843635957222432e-05, 8.5223779024090618e-05, 0.00013778805441688746, 0.00016450574912596494, 0.00019208526646252722, 6.8075190938543528e-05, 0.00016078486805781722, 0.0001570294116390869, 0.00020638221758417785, 9.0853711299132556e-05, 6.0815527831437066e-05, 0.00013126064732205123, 0.00015067904314491898, 8.2417544035706669e-05, 0.0001915356406243518, 0.00010331066005164757, 7.7542237704619765e-05, 7.5715506682172418e-05, 0.00012130215327488258, 0.00011229984374949709, 8.5987994680181146e-05, 0.00022747842012904584, 0.00022592311142943799, 6.6851993324235082e-05, 0.00025151704903692007, 0.00010807949001900852, 9.3423288490157574e-05, 6.3123850850388408e-05, 5.1237373554613441e-05, 6.7908280470874161e-05, 0.00011643235484370962, 5.9487745602382347e-05, 0.00018622582138050348, 0.0001973016478586942, 8.9174318418372422e-05, 0.00014227627252694219, 0.00012331777543295175, 0.0001071365550160408, 0.00014626017946284264, 0.00010676385863916948, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ -84,-127,-28,15,-27,-4,51,-52, 
  /* [1][0][][] */ -7,127,46,-71,0,-97,-56,84, 
  /* [2][0][][] */ -127,-77,25,0,81,15,25,-25, 
  /* [3][0][][] */ 21,-29,-127,-29,21,-56,-30,56, 
  /* [4][0][][] */ -47,-127,91,-16,119,-53,59,-3, 
  /* [5][0][][] */ -36,63,83,-113,97,71,-53,127, 
  /* [6][0][][] */ -93,124,53,97,-43,4,16,-127, 
  /* [7][0][][] */ 38,-30,39,21,49,-127,5,98, 
  /* [8][0][][] */ 9,60,-11,-51,35,87,127,-57, 
  /* [9][0][][] */ 66,106,35,-105,-63,-41,-65,127, 
  /* [10][0][][] */ 19,-21,30,-13,-19,51,-127,-88, 
  /* [11][0][][] */ -58,14,-109,-56,127,13,17,45, 
  /* [12][0][][] */ 127,55,-16,22,97,92,7,10, 
  /* [13][0][][] */ -111,-104,-10,88,-127,21,92,42, 
  /* [14][0][][] */ 6,127,-115,113,-18,121,-32,3, 
  /* [15][0][][] */ 2,-90,-4,-86,127,63,-14,109, 
  /* [16][0][][] */ 60,-70,9,54,33,-6,33,-127, 
  /* [17][0][][] */ -56,-70,-127,70,31,65,80,-104, 
  /* [18][0][][] */ 95,2,99,23,-27,-127,-63,-44, 
  /* [19][0][][] */ -39,127,26,29,117,-107,-95,-32, 
  /* [20][0][][] */ -71,-17,-127,-47,30,-4,-1,5, 
  /* [21][0][][] */ -107,-17,42,44,-59,-85,127,-43, 
  /* [22][0][][] */ 41,-4,-127,-49,-29,-13,-4,51, 
  /* [23][0][][] */ -28,29,79,-49,-52,42,-7,-127, 
  /* [24][0][][] */ -115,72,90,69,127,108,-7,-36, 
  /* [25][0][][] */ -29,-127,-69,12,-28,22,16,-5, 
  /* [26][0][][] */ 115,127,-78,-23,-79,-34,-41,36, 
  /* [27][0][][] */ 45,40,-71,9,-127,15,-23,0, 
  /* [28][0][][] */ 2,92,43,-72,87,100,-114,-127, 
  /* [29][0][][] */ 62,16,-3,-43,-127,-2,17,-70, 
  /* [30][0][][] */ -83,-1,40,127,30,17,-31,-1, 
  /* [31][0][][] */ 10,-127,1,-117,-102,26,-22,-95, 
  /* [32][0][][] */ -127,14,26,-14,9,-38,-12,23, 
  /* [33][0][][] */ 27,-99,-109,-127,-49,33,-29,44, 
  /* [34][0][][] */ 68,116,127,58,-92,-44,43,-82, 
  /* [35][0][][] */ 119,30,11,1,-126,-56,-127,-49, 
  /* [36][0][][] */ 127,-7,46,-50,12,-19,59,58, 
  /* [37][0][][] */ 107,92,-50,-5,79,105,-127,23, 
  /* [38][0][][] */ -20,110,87,127,1,30,32,-104, 
  /* [39][0][][] */ 7,51,127,-50,72,-32,-24,3, 
  /* [40][0][][] */ 65,12,10,-18,-41,-127,13,-58, 
  /* [41][0][][] */ 38,-31,9,127,6,58,14,75, 
  /* [42][0][][] */ -39,-127,84,-85,126,-38,93,21, 
  /* [43][0][][] */ 15,-35,-113,-29,127,20,-83,117, 
  /* [44][0][][] */ 127,-12,106,7,4,30,-64,-6, 
  /* [45][0][][] */ -23,9,56,-27,-89,-127,6,92, 
  /* [46][0][][] */ -59,59,76,19,1,-12,38,-127, 
  /* [47][0][][] */ -7,-65,24,127,-70,-70,97,82, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0031599977519363165, 0.0017532743513584137, 0.001367836375720799, 0.0023506083525717258, 0.0033145840279757977, 0.0030052613001316786, 0.002870278200134635, 0.0014445219421759248, 0.0016554608009755611, 0.001885058474726975, 0.0030477237887680531, 0.0036386903375387192, 0.0042487196624279022, 0.0015057501150295138, 0.0035563884302973747, 0.003473321907222271, 0.0045649530366063118, 0.0020095864310860634, 0.001345174154266715, 0.0029033445753157139, 0.0033328586723655462, 0.0018229875713586807, 0.0042365626432001591, 0.0022851207759231329, 0.0017151510110124946, 0.001674745581112802, 0.0026830732822418213, 0.0024839518591761589, 0.0019019620958715677, 0.0050315782427787781, 0.0049971765838563442, 0.0014786942629143596, 0.0055632865987718105, 0.0023906021378934383, 0.0020664227195084095, 0.0013962317025288939, 0.0011333156144246459, 0.0015020581195130944, 0.0025753586087375879, 0.0013158050132915378, 0.004119114950299263, 0.0043641002848744392, 0.0019724401645362377, 0.0031469983514398336, 0.0027276566252112389, 0.0023697454016655684, 0.0032351179979741573, 0.0023615017998963594, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[8] = { 5091, -3735, 15683, -9660, -9790, -12683, -7826, 337, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 9.6596886578481644e-05, 0.00010744806786533445, 8.1969286839012057e-05, 0.00011559366976143792, 9.6094925538636744e-05, 0.00010581471724435687, 0.00016818036965560168, 0.00017359147022943944, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -18,-30,48,-57,50,82,61,86,104,-41,-35,42,-38,-26,16,-10,44,40,17,-38,-22,11,-73,-33,27,-26,19,-46,-32,6,35,27,29,36,45,9,127,-58,-66,-5,-59,-64,-36,-7,-70,-82,-122,59, 
  /* [1][0][][] */ -8,-1,-33,49,11,17,-46,-16,-61,36,22,89,-30,9,-25,127,44,79,2,-32,-45,-19,-58,20,16,-13,-25,-95,52,-13,-59,-65,65,-32,-33,-56,35,32,46,-39,1,67,51,-42,7,-38,-57,-14, 
  /* [2][0][][] */ 5,-77,-18,-25,-28,24,2,19,109,23,-9,-27,-45,-99,29,15,8,-52,-20,-2,-93,67,0,26,-10,44,-35,-35,-46,-30,33,-44,-91,22,-63,54,-71,54,-24,-23,127,-24,6,37,12,34,-63,-34, 
  /* [3][0][][] */ -11,-101,91,54,22,-93,-10,-5,-104,127,67,-53,47,12,-9,30,48,39,-27,50,61,75,35,-61,4,64,51,17,-37,-57,27,23,-20,11,46,14,-13,-78,-45,50,-18,1,36,-58,-64,30,-2,30, 
  /* [4][0][][] */ -10,49,-5,78,34,5,4,-14,-66,81,35,86,4,21,53,8,11,-97,-8,-25,86,-12,-115,59,73,-34,31,35,55,33,-3,-64,-47,127,12,3,61,-34,18,23,-38,27,2,-25,-10,-53,-42,17, 
  /* [5][0][][] */ 2,2,5,-59,-127,25,107,27,12,62,-18,-21,-87,1,50,-33,-97,45,-72,-76,-9,109,-2,27,96,16,2,14,-11,-10,127,-58,-14,93,78,69,-31,50,79,48,-26,-40,-11,37,-53,66,24,61, 
  /* [6][0][][] */ 20,-19,-22,33,-61,-64,20,1,27,-22,45,-2,-51,-27,35,53,6,-76,20,-66,79,-30,1,-26,13,7,20,50,45,13,3,127,41,-18,-5,27,4,-1,27,31,-1,41,-46,-57,4,-10,-18,30, 
  /* [7][0][][] */ -43,-23,-46,-2,12,-25,-5,9,38,7,11,-8,-9,11,4,-1,35,-4,1,-5,-61,5,13,-34,-2,-11,-66,-14,-9,-28,21,34,21,-15,23,12,-16,127,-20,-52,-39,-7,-48,-41,29,53,-78,-9, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0041053676977753639, 0.0045665428042411804, 0.0034836945123970509, 0.0049127307720482349, 0.0040840343572199345, 0.0044971252791583538, 0.0071476656012237072, 0.0073776375502347946, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { -364, 23427, 33024, -1544, -1417, -15573, 20792, 17499, -11343, 7745, -2019, 15144, 15338, -16009, -13042, -820, 236, 32128, -1109, -1317, 55800, 9952, -7991, -12261, 14538, 10785, -2722, -1809, -3843, -30, 31271, 329, -1651, 7197, 12510, 9169, -4293, 44097, -6367, 694, 23264, -2691, -4753, 11920, -842, -504, 2037, 12802, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00023912313918117434, 9.1175454144831747e-05, 7.8580371337011456e-05, 0.00013976597983855754, 4.6979763283161446e-05, 0.00012239292846061289, 0.00015300068480428308, 8.0059478932525963e-05, 0.00018173232092522085, 3.7942936614854261e-05, 0.00010963348904624581, 0.00013782548194285482, 0.00011230738164158538, 0.00019378396973479539, 7.5919735536444932e-05, 6.6657798015512526e-05, 7.6982389145996422e-05, 0.00013289354683365673, 0.00032377161551266909, 8.0665864516049623e-05, 3.9603663026355207e-05, 0.00013841567852068692, 0.00010751022637123242, 8.5314270108938217e-05, 9.9480188509915024e-05, 9.0972367615904659e-05, 0.00012389547191560268, 0.0001493242452852428, 0.00010907421528827399, 0.00027445887099020183, 0.000120125463581644, 8.7240339780692011e-05, 4.5987191697349772e-05, 9.1533816885203123e-05, 9.4635877758264542e-05, 8.4215222159400582e-05, 0.00011166382319061086, 7.5133553764317185e-05, 0.00010147265857085586, 7.2504903073422611e-05, 0.00012796606461051852, 0.00016611577302683145, 6.7372020566835999e-05, 0.00012649658310692757, 0.00018887822807300836, 0.00011773573351092637, 0.00021382510021794587, 9.2778020189143717e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 43,-35,-36,38,92,25,-80,-44,-4,91,127,-50,-64,115,94,75,53,-111,54,85,-85,-90,46,97,-20,-28,122,89,45,21,-44,64,67,-54,-111,-16,87,-48,87,62,-69,69,65,-28,88,116,27,-97, 82,-21,-47,68,127,66,-112,-104,28,89,90,-47,-127,85,116,78,44,-127,69,48,-80,-93,53,127,-53,-58,123,127,42,118,-69,86,94,-77,-98,-20,127,-55,83,112,-78,127,82,-73,35,127,30,-112, 48,-4,-49,14,44,11,-30,-98,9,74,-8,2,-82,32,63,25,-12,-47,9,17,-36,-98,23,79,-14,-13,82,67,66,117,-28,7,25,-95,-38,21,47,-41,9,97,-26,-8,65,-17,18,29,-16,-72, 
  /* [0][1][][] */ 19,-87,-78,77,117,71,-127,-62,81,127,123,-92,-63,127,81,90,95,-125,96,127,-102,-127,73,82,-125,-95,127,92,83,73,-64,126,111,-125,-103,-83,60,-103,127,58,-95,121,118,-127,127,95,24,-56, 24,-127,-127,127,119,111,-125,-127,127,112,86,-127,-86,123,108,127,127,-105,74,107,-127,-11,127,120,-127,-127,114,109,127,127,-127,127,127,-127,-127,-127,102,-127,94,127,-127,70,127,-116,73,104,26,-127, -45,-68,-126,44,68,46,-35,-90,48,67,3,-58,-24,21,127,60,45,-49,2,33,-25,-56,55,36,-111,-6,0,92,79,84,-49,22,67,-113,-63,-67,31,-44,38,41,-37,18,122,-62,76,-16,-4,-85, 
  /* [0][2][][] */ -59,-78,-66,49,59,77,3,10,-113,90,55,-66,-34,53,74,51,76,-24,-71,29,-29,-53,31,113,-62,-35,50,46,18,13,-58,24,46,-78,-18,5,22,-24,66,72,-11,90,18,-23,54,-23,-108,16, -127,-75,-97,66,108,127,-27,-6,-85,96,85,-61,-69,44,28,88,122,-28,-127,30,-36,-124,48,105,-56,-22,63,45,11,3,-96,41,85,-95,-5,-50,18,-69,66,106,-19,126,84,-61,23,-28,-127,-61, -81,-44,-64,27,72,32,13,-34,-103,68,-21,-24,25,23,52,42,54,-12,-62,28,-33,-20,16,80,-78,37,14,56,28,48,-52,-1,33,-31,-25,-1,20,-16,-7,43,2,-5,86,-1,11,4,-66,-65, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.010162733495235443, 0.003874956863000989, 0.0033396657090634108, 0.005940054077655077, 0.00199663988314569, 0.0052016992121934891, 0.0065025286749005318, 0.003402527654543519, 0.0077236234210431576, 0.0016125747933983803, 0.0046594231389462948, 0.0058575831353664398, 0.0047730635851621628, 0.0082358187064528465, 0.0032265887130051851, 0.0028329563792794943, 0.0032717513386160135, 0.0056479754857718945, 0.013760292902588844, 0.0034282992128282785, 0.0016831556567922235, 0.0058826659806072712, 0.0045691845007240772, 0.0036258564796298742, 0.0042279078625142574, 0.0038663255982100964, 0.0052655572071671486, 0.0063462802208960056, 0.0046356539241969585, 0.011664502322673798, 0.0051053320057690144, 0.0037077143788337708, 0.0019544556271284819, 0.0038901872467249632, 0.0040220245718955994, 0.0035791469272226095, 0.0047457125037908554, 0.0031931761186569929, 0.0043125879019498825, 0.0030814583878964186, 0.0054385573603212833, 0.0070599201135337353, 0.0028633107431232929, 0.0053761047311127186, 0.008027324452996254, 0.0050037684850394726, 0.0090875662863254547, 0.0039430656470358372, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { -1697, 5889, 3837, -1069, 26, 11912, 5139, 1775, 14563, 1076, -2802, 2503, 4288, 2029, -197, 1230, -1508, 8345, -2600, -746, 2001, 2098, 858, -188, 298, 2562, -1731, -1651, -594, -3417, 13371, 2291, 591, 1267, 546, 941, 1524, 10623, 2113, 65, 6100, -667, 218, 1634, -1310, -2056, 24943, 2038, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00026336952578276396, 0.00013624061830341816, 0.00022173995967023075, 0.00026811633142642677, 0.00045916330418549478, 7.8337572631426156e-05, 0.00018429328338243067, 0.00024439892149530351, 7.1819020377006382e-05, 0.00036555287078954279, 0.00016635525389574468, 0.00022374837135430425, 0.00016306666657328606, 0.00025645745336078107, 0.00033756805351004004, 0.00020584445155691355, 0.00025749581982381642, 0.00011174869723618031, 0.00015955622075125575, 0.00032316910801455379, 0.00025584702962078154, 0.00019957499171141535, 0.00025018281303346157, 0.00025162199744954705, 0.00029318020096980035, 0.00019662526028696448, 0.00027456457610242069, 0.00020376608881633729, 0.00034363113809376955, 0.0001454951852792874, 8.2559192378539592e-05, 0.00026576436357572675, 0.00029755625291727483, 0.00025082132196985185, 0.00024474653764627874, 0.00028601149097084999, 0.0001756641868269071, 8.7627580796834081e-05, 0.00025855965213850141, 0.00023659713042434305, 0.0001547556312289089, 0.00017286733782384545, 0.00033765481202863157, 0.00025364768225699663, 0.00030107173370197415, 0.00021043821470811963, 4.702675505541265e-05, 0.00022663641721010208, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 48,10,-63,32,-23,28,-127,53, 
  /* [1][0][][] */ 5,-61,-100,15,-15,-15,127,-106, 
  /* [2][0][][] */ -110,-51,-72,-41,-27,30,-127,-21, 
  /* [3][0][][] */ -34,-32,35,2,-1,-118,-127,-31, 
  /* [4][0][][] */ -31,-127,-36,12,62,16,-33,-44, 
  /* [5][0][][] */ 109,-46,115,57,-121,54,-81,-127, 
  /* [6][0][][] */ 47,-127,-54,-25,-4,44,-48,-66, 
  /* [7][0][][] */ -45,-76,-88,-84,66,-127,-11,37, 
  /* [8][0][][] */ 50,58,58,59,34,-51,2,127, 
  /* [9][0][][] */ -20,-54,-45,14,57,-12,127,-6, 
  /* [10][0][][] */ -40,13,-126,34,24,24,127,-119, 
  /* [11][0][][] */ -6,-31,-52,-3,-127,42,4,72, 
  /* [12][0][][] */ 95,60,-40,54,-96,127,88,-22, 
  /* [13][0][][] */ -72,-24,40,-24,41,-127,10,74, 
  /* [14][0][][] */ -81,-34,11,57,21,45,-120,-127, 
  /* [15][0][][] */ 56,66,47,-5,-124,40,127,-62, 
  /* [16][0][][] */ 14,-70,4,40,8,-48,3,-127, 
  /* [17][0][][] */ -71,127,29,-9,-52,-61,-95,-81, 
  /* [18][0][][] */ 63,99,-52,-106,127,81,-69,-67, 
  /* [19][0][][] */ -25,70,-12,21,-127,23,-44,-100, 
  /* [20][0][][] */ -127,-24,12,7,19,22,127,46, 
  /* [21][0][][] */ -38,-6,31,37,-100,-111,-127,-2, 
  /* [22][0][][] */ -6,-33,-49,-4,-127,2,9,53, 
  /* [23][0][][] */ 62,7,-18,1,127,56,-75,71, 
  /* [24][0][][] */ 127,13,-65,19,-108,22,8,-8, 
  /* [25][0][][] */ 22,-55,61,74,-53,-127,1,101, 
  /* [26][0][][] */ 9,127,-5,57,63,-14,6,-4, 
  /* [27][0][][] */ -111,112,61,-7,127,-77,0,77, 
  /* [28][0][][] */ -73,-83,-58,-20,66,-127,13,-17, 
  /* [29][0][][] */ -60,-14,31,40,127,-93,-81,89, 
  /* [30][0][][] */ 122,41,-127,-119,-84,-104,-89,-84, 
  /* [31][0][][] */ 12,6,34,46,-127,5,22,1, 
  /* [32][0][][] */ 127,-8,62,26,-57,-90,94,79, 
  /* [33][0][][] */ 122,32,-36,-1,-127,-67,18,44, 
  /* [34][0][][] */ 50,-6,-33,31,-45,127,7,-95, 
  /* [35][0][][] */ 97,23,-14,-48,20,-87,34,127, 
  /* [36][0][][] */ -22,-41,97,-127,-15,-29,80,-126, 
  /* [37][0][][] */ 83,-58,72,55,123,-6,42,-127, 
  /* [38][0][][] */ 61,127,-5,-24,-13,10,10,78, 
  /* [39][0][][] */ 32,22,-87,74,-1,-50,-84,127, 
  /* [40][0][][] */ -12,-26,1,-40,33,-127,8,47, 
  /* [41][0][][] */ -50,42,-127,-61,82,91,51,-96, 
  /* [42][0][][] */ 28,-40,-54,32,58,127,35,52, 
  /* [43][0][][] */ -10,32,-11,26,-127,-81,38,-37, 
  /* [44][0][][] */ -127,-60,-17,-40,57,50,-117,-86, 
  /* [45][0][][] */ -67,49,-81,31,27,16,-45,127, 
  /* [46][0][][] */ -33,41,127,-18,-40,-51,-33,47, 
  /* [47][0][][] */ -107,-127,-22,-30,113,90,-24,86, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0027691770810633898, 0.0014324906514957547, 0.0023314664140343666, 0.0028190868906676769, 0.0048278342001140118, 0.00082367390859872103, 0.001937736407853663, 0.0025697122327983379, 0.00075513514457270503, 0.0038435752503573895, 0.0017491284525021911, 0.0023525836877524853, 0.0017145508900284767, 0.0026965003926306963, 0.0035493313334882259, 0.0021643342915922403, 0.0027074182871729136, 0.0011749723926186562, 0.0016776405973359942, 0.0033979346044361591, 0.0026900824159383774, 0.0020984145812690258, 0.0026305264327675104, 0.0026456585619598627, 0.0030826188158243895, 0.0020673999097198248, 0.0028868862427771091, 0.0021424815058708191, 0.0036130810622125864, 0.0015297969803214073, 0.00086806173203513026, 0.0027943572495132685, 0.0031286303419619799, 0.0026372398715466261, 0.0025733669754117727, 0.0030072440858930349, 0.0018470064969733357, 0.00092135288286954165, 0.0027186039369553328, 0.0024876808747649193, 0.00162716512568295, 0.0018175991717725992, 0.0035502433311194181, 0.0026669574435800314, 0.0031655936036258936, 0.0022126350086182356, 0.00049445888726040721, 0.0023829496931284666, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 10520, 12738, 2964, 2411, 4964, -10915, 3609, -9771, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.0001167498339782469, 0.00013534611207433045, 0.00019038534082937986, 0.00018921834998764098, 0.00010814567212946713, 0.00012494914699345827, 6.7813823989126831e-05, 0.00012915358820464462, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 38,-71,114,60,33,-41,12,3,-1,59,-21,18,-42,-89,30,-8,-116,65,-35,71,-49,64,20,-42,2,-56,70,-31,-28,32,-48,118,-64,-13,-37,-81,-63,-51,-38,-5,-10,52,-127,12,44,24,26,54, 
  /* [1][0][][] */ -50,-28,63,-11,-30,19,-32,-35,46,-16,4,-33,-23,13,-8,26,-11,8,12,-4,-48,-33,-78,-5,37,-18,-39,-21,28,-64,-14,-127,14,-70,-65,-65,-42,-80,-25,32,39,-19,94,-96,-34,-7,-17,-4, 
  /* [2][0][][] */ -52,87,-1,31,16,6,20,-44,72,-31,74,85,88,9,30,-43,100,-5,13,24,-18,28,21,127,-89,-53,4,-30,-17,79,-31,-72,-13,-8,12,-69,-21,-7,-27,-17,91,-66,28,-12,24,-102,-8,-10, 
  /* [3][0][][] */ 64,-21,-32,24,90,-86,-14,-103,-21,10,-38,-78,-25,127,-2,23,-36,-31,-51,-39,24,69,-8,-58,125,39,68,-64,21,-76,37,-57,54,62,109,-78,-46,18,-19,49,20,89,-63,23,-13,30,32,41, 
  /* [4][0][][] */ -61,30,-54,80,87,-19,39,-32,-43,-11,-76,21,-47,-10,6,-63,2,83,-34,-54,-48,48,-85,-76,19,-8,12,-42,27,-50,-26,52,-23,91,-73,-87,-86,-53,-44,-17,58,-57,127,12,7,82,-65,-61, 
  /* [5][0][][] */ 56,-13,88,-1,-6,20,48,42,127,-3,65,-1,65,61,29,-74,-36,29,33,-52,-63,-81,4,25,7,-14,33,53,-41,-40,22,-24,-35,57,-18,57,48,9,-31,-50,-16,64,21,29,-35,-3,72,2, 
  /* [6][0][][] */ 0,-72,-18,4,45,-4,1,24,-40,-3,113,59,105,66,-26,39,107,-108,-13,-4,-14,-46,-85,23,-85,57,-40,4,-11,-48,54,-48,74,33,-64,-1,-46,27,67,4,75,-83,0,-82,-127,33,-37,23, 
  /* [7][0][][] */ -7,-17,-65,-45,16,94,-19,-5,9,-58,-119,-115,53,68,-77,-53,-24,23,101,33,-25,-74,60,-11,127,-20,-64,106,-45,3,-34,-66,-42,74,42,123,90,-51,-15,-30,-32,-1,47,-4,3,-15,16,-53, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0049618678167462349, 0.0057522095739841461, 0.0080913770943880081, 0.0080417795106768608, 0.0045961909927427769, 0.0053103389218449593, 0.0028820876032114029, 0.0054890275932848454, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -1382, 700, -732, 2736, 1607, 9148, 655, -4206, -5756, 142, -6249, 529, -4260, -3859, 339, -1141, -7465, 17328, -4260, 1692, -1957, 251, -2324, -521, 15671, -1601, -337, -851, 540, 549, 1494, -9979, -1116, 12297, 250, 6668, -1188, -2143, -1211, -190, -2970, -1172, 3697, 4943, 407, 7704, 1155, -2802, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00034055043943226337, 0.00010622698027873412, 0.00047093635657802224, 8.9286135334987193e-05, 0.00012481500743888319, 0.00025637142243795097, 0.00026296506985090673, 0.00022536772303283215, 0.00034595560282468796, 0.00018262348021380603, 0.00039723212830722332, 0.00022219154925551265, 0.0001495605829404667, 0.00017513911006972194, 0.00014451415336225182, 0.0003710893215611577, 0.00020158589177299291, 5.678371962858364e-05, 9.4325470854528248e-05, 0.00031061205663718283, 0.00022056789021007717, 0.00028156113694421947, 0.00014126756286714226, 0.00052127434173598886, 0.00025023342459462583, 0.00028595636831596494, 0.00020759759354405105, 0.00019293419609311968, 0.00018933041428681463, 0.00014924487913958728, 0.00050482421647757292, 0.0003302913683000952, 0.00038304639747366309, 0.00012348627205938101, 0.00044662566506303847, 0.00020066561410203576, 0.0001793916744645685, 8.6158783233258873e-05, 0.00037555507151409984, 0.00081789225805550814, 0.00025963201187551022, 0.00062504247762262821, 0.00052618299378082156, 0.00013445304648485035, 0.00017839486827142537, 0.00016680867702234536, 0.00019772647647187114, 0.00024768814910203218, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -6,-49,42,-49,127,-15,-36,-13,-32,44,-30,26,59,-2,127,-29,20,-25,-69,-20,-39,-25,-55,36,-87,53,43,-61,-14,12,-15,13,-29,9,18,-1,82,59,35,-13,72,18,-13,11,-105,-17,-40,-36, 10,-99,-64,-50,-82,-4,19,23,12,-3,89,127,-11,32,-67,127,-62,-67,27,-59,-49,-127,-74,97,-127,-65,15,127,5,18,87,27,-127,-112,-43,39,127,-81,125,8,56,-10,-24,7,-50,-7,68,-1, 20,-19,-9,127,36,-2,-102,0,-29,-43,-25,-8,53,-9,-78,-34,23,42,0,-18,22,-6,-43,23,-51,-43,-28,28,5,20,-67,-1,33,50,14,31,5,59,-123,-4,31,-3,-11,48,-127,5,-63,45, 
  /* [0][1][][] */ -109,-66,127,-27,-46,-38,54,13,21,85,-15,13,27,14,85,27,80,-119,81,35,64,-11,67,-42,13,-25,36,-66,38,55,28,78,23,-73,-2,127,14,69,-44,-116,17,101,-17,-89,17,-80,-55,25, 127,-60,-71,-101,-7,-127,127,127,127,9,127,-48,-127,15,-52,-35,127,-127,127,127,127,78,127,-127,9,-13,87,5,127,127,-127,127,27,-113,127,-101,-52,127,-96,127,-127,-127,127,-127,78,-127,127,-119, -5,-109,14,64,-60,-5,-60,4,-17,-127,-46,40,76,6,-70,42,57,6,14,4,15,-26,50,-19,-1,15,-127,95,-61,16,51,21,-11,-60,-19,-33,63,-6,127,17,50,52,-43,-2,48,-27,-65,127, 
  /* [0][2][][] */ -15,124,28,-74,115,6,-67,-16,-21,6,-18,-1,46,24,92,4,-37,-38,-4,-54,-18,15,-2,9,-6,-29,43,-9,-50,-115,2,7,-23,24,-22,40,-44,32,16,102,4,24,-1,6,24,2,-30,-36, -6,95,-42,-5,31,-28,17,36,39,3,24,-37,45,127,-57,-70,-33,-87,123,-89,-54,82,2,50,40,127,-1,118,-87,-99,-18,-2,108,-127,-86,1,-52,-43,-28,-126,66,-23,-60,81,59,21,7,17, 13,127,-7,33,37,13,-62,-3,-12,-28,-1,-8,53,15,-60,-4,-42,-32,-26,-41,-5,7,7,-3,-42,30,-48,22,18,-75,9,1,10,20,-4,-24,-35,19,17,-1,-31,-8,1,-31,26,12,-23,46, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.014473393559455872, 0.0045146467164158821, 0.020014794543385506, 0.0037946607917547226, 0.0053046378307044506, 0.010895784944295883, 0.011176015250384808, 0.009578128345310688, 0.014703112654387951, 0.0077614979818463326, 0.016882365569472313, 0.0094431405887007713, 0.0063563245348632336, 0.0074434122070670128, 0.0061418511904776096, 0.015771295875310898, 0.0085674002766609192, 0.0024133080150932074, 0.0040088323876261711, 0.013201012276113033, 0.0093741351738572121, 0.011966347694396973, 0.0060038715600967407, 0.022154159843921661, 0.010634920559823513, 0.012153145857155323, 0.0088228974491357803, 0.0081997029483318329, 0.0080465422943234444, 0.0063429069705307484, 0.021455029025673866, 0.014037382788956165, 0.016279472038149834, 0.0052481666207313538, 0.018981590867042542, 0.0085282884538173676, 0.0076241460628807545, 0.0036617482546716928, 0.015961090102791786, 0.034760419279336929, 0.011034360155463219, 0.026564303785562515, 0.022362776100635529, 0.0057142544537782669, 0.0075817815959453583, 0.0070893685333430767, 0.0084033748134970665, 0.010526746511459351, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 8264, 1636, 19958, -2358, -874, 6994, -763, 1195, 3609, 444, 9394, 1062, 2168, 2633, 2624, 3714, 1901, 1942, -641, 6855, 1839, 420, 999, 11787, 48496, 3602, 4783, -1119, -179, 6443, 8801, 10012, 13547, 3636, 8027, -1161, 361, 2359, 6915, 10123, 1128, 15644, 11518, 4662, 5642, 1913, 4626, 1049, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00011209859076188877, 0.00025824198382906616, 6.0418900829972699e-05, 0.00019327799964230508, 0.00034331550705246627, 0.00014732437557540834, 0.00024553461116738617, 0.00044647548929788172, 0.00019051283015869558, 0.00018936250125989318, 0.00010373665281804278, 0.00022618814546149224, 0.00022243884450290352, 0.00025031197583302855, 0.00021169903629925102, 0.00020094918727409095, 0.00023827115364838392, 0.00020379031775519252, 0.00031883272458799183, 0.00013711440260522068, 0.00017539680993650109, 0.00026186933973804116, 0.00023249235528055578, 8.3105085650458932e-05, 3.3144428016385064e-05, 0.00021719907817896456, 0.00017320350161753595, 0.00030200358014553785, 0.00038133299676701427, 0.00013076368486508727, 0.00010066775575978681, 9.1457761300262064e-05, 7.1682457928545773e-05, 0.0002087054745061323, 0.00011797273327829316, 0.00021839122928213328, 0.00026047497522085905, 0.00020534940995275974, 0.00012814065848942846, 9.4308648840524256e-05, 0.00020508190209511667, 6.7983761255163699e-05, 9.2504131316673011e-05, 0.0001782036415534094, 0.00016464832879137248, 0.0003200546489097178, 0.00016027869423851371, 0.00020345261145848781, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -21,20,17,-127,-88,12,14,127, 
  /* [1][0][][] */ 127,-9,-6,-10,-71,68,120,40, 
  /* [2][0][][] */ -26,127,-36,-24,-57,79,-42,-110, 
  /* [3][0][][] */ 86,-66,-86,127,-108,-1,-20,-50, 
  /* [4][0][][] */ 60,-74,77,-5,-127,19,60,39, 
  /* [5][0][][] */ -20,41,-8,-77,-127,-9,-28,20, 
  /* [6][0][][] */ 42,-15,61,60,127,-33,9,-64, 
  /* [7][0][][] */ 23,22,26,127,44,-15,-6,24, 
  /* [8][0][][] */ 31,23,15,-58,55,127,4,-39, 
  /* [9][0][][] */ 121,4,8,39,-52,-91,127,76, 
  /* [10][0][][] */ -4,72,-88,-36,-7,127,81,-72, 
  /* [11][0][][] */ -8,-44,-127,116,-53,18,-11,98, 
  /* [12][0][][] */ -103,-116,85,84,49,-127,-48,2, 
  /* [13][0][][] */ 47,40,42,71,-64,127,24,-41, 
  /* [14][0][][] */ 24,-127,25,42,-47,-99,-66,97, 
  /* [15][0][][] */ -73,27,-29,18,89,-15,-127,-41, 
  /* [16][0][][] */ 104,72,-97,-113,60,106,127,56, 
  /* [17][0][][] */ -100,122,-127,32,-31,-30,16,-87, 
  /* [18][0][][] */ 26,13,-89,127,-22,-38,-27,-54, 
  /* [19][0][][] */ 101,11,5,24,-48,-3,127,56, 
  /* [20][0][][] */ 46,-125,-113,127,44,-57,-24,-80, 
  /* [21][0][][] */ 12,42,127,-115,45,-34,16,-102, 
  /* [22][0][][] */ -102,-38,-127,55,-46,4,4,106, 
  /* [23][0][][] */ 119,29,52,64,-127,119,84,-33, 
  /* [24][0][][] */ -9,-12,-127,63,-52,21,38,74, 
  /* [25][0][][] */ 39,-9,-66,127,31,-2,-18,-11, 
  /* [26][0][][] */ -62,30,127,-83,8,11,39,14, 
  /* [27][0][][] */ -60,63,127,-4,23,-7,67,-4, 
  /* [28][0][][] */ -54,-127,42,-120,-13,-10,5,-41, 
  /* [29][0][][] */ -108,-51,-72,127,-23,-110,-7,58, 
  /* [30][0][][] */ -127,73,118,-43,54,64,73,11, 
  /* [31][0][][] */ -60,48,92,-127,-46,19,38,69, 
  /* [32][0][][] */ -89,92,90,-127,6,-1,21,124, 
  /* [33][0][][] */ 2,98,-47,29,6,11,-127,-32, 
  /* [34][0][][] */ 75,19,127,-75,-114,-108,57,-55, 
  /* [35][0][][] */ 86,13,29,62,67,-33,-1,-127, 
  /* [36][0][][] */ 14,54,124,-109,16,-7,42,-127, 
  /* [37][0][][] */ -48,-53,101,67,-10,-127,92,-15, 
  /* [38][0][][] */ 76,-4,102,64,-21,-61,127,61, 
  /* [39][0][][] */ 68,-80,-25,28,-127,-23,59,50, 
  /* [40][0][][] */ -37,56,-127,120,-37,36,-76,118, 
  /* [41][0][][] */ -92,9,-56,2,127,15,-98,8, 
  /* [42][0][][] */ -81,52,-6,-23,127,29,-115,-52, 
  /* [43][0][][] */ 127,110,-39,99,7,-100,23,53, 
  /* [44][0][][] */ 11,-7,86,-36,54,-127,18,-44, 
  /* [45][0][][] */ -12,-68,108,64,-15,-11,-127,29, 
  /* [46][0][][] */ 57,-121,-127,34,-76,27,-29,-5, 
  /* [47][0][][] */ -127,-25,38,-25,78,40,-123,-45, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0021507896017283201, 0.0049547827802598476, 0.0011592325754463673, 0.0037083453498780727, 0.0065870531834661961, 0.0028266522567719221, 0.0047109713777899742, 0.0085663413628935814, 0.0036552913952618837, 0.0036332204472273588, 0.0019903525244444609, 0.004339778795838356, 0.0042678425088524818, 0.0048026330769062042, 0.0040617822669446468, 0.0038555294740945101, 0.0045716105960309505, 0.0039100409485399723, 0.0061173122376203537, 0.0026307576335966587, 0.0033652663696557283, 0.0050243791192770004, 0.0044607352465391159, 0.0015945030609145761, 0.0006359285325743258, 0.0041673094965517521, 0.0033231843262910843, 0.0057944185100495815, 0.0073164794594049454, 0.0025089089758694172, 0.0019314708188176155, 0.0017547624884173274, 0.0013753417879343033, 0.0040043462067842484, 0.0022634943015873432, 0.0041901827789843082, 0.0049976264126598835, 0.0039399545639753342, 0.002458582166582346, 0.0018094612751156092, 0.0039348220452666283, 0.0013043764047324657, 0.0017748387763276696, 0.0034191200975328684, 0.0031590396538376808, 0.0061407568864524364, 0.0030752012971788645, 0.0039035615045577288, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -12142, -1635, -14144, -5267, 3241, 1908, 13038, 2583, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00013586101704277098, 0.00012120268365833908, 0.00010315397958038375, 7.2356764576397836e-05, 0.00015228193660732359, 9.5077652076724917e-05, 0.00010619038948789239, 0.00013211583427619189, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ 46,119,-42,68,1,-12,-22,17,72,-61,5,-24,1,9,-40,-51,-1,-25,34,11,-58,-32,-35,7,18,19,23,4,25,13,-33,29,-67,21,108,-127,-20,38,-9,112,-36,16,9,-5,-10,42,29,-44, 
  /* [1][0][][] */ 10,-44,35,42,1,-20,-7,-17,51,-29,102,42,30,18,-40,-72,127,36,17,17,-60,30,31,-12,-53,-83,-46,-55,-8,-59,35,-36,0,-10,-19,22,13,-25,89,-48,-23,31,-44,39,78,48,21,50, 
  /* [2][0][][] */ 74,-24,-13,-5,112,114,68,65,-39,-9,-7,-40,-21,41,60,37,-21,-53,44,-70,-42,-61,-46,59,-92,-107,113,22,72,-77,-70,8,-127,86,100,13,-22,-4,-8,26,14,76,18,-68,-17,8,66,-62, 
  /* [3][0][][] */ 67,-27,22,-12,118,115,21,56,-32,-22,56,53,-120,56,80,34,14,21,88,-89,-85,18,21,97,10,-30,50,29,38,-56,8,-2,-122,49,-62,-127,36,-34,70,-32,48,-103,-96,-4,-58,54,2,74, 
  /* [4][0][][] */ 35,41,-31,-42,-13,-3,-20,-24,-1,-8,-4,-16,-26,-21,64,51,-38,-11,-36,46,26,-14,-7,6,-54,-42,-4,47,-23,10,-26,32,-30,-22,31,-127,-12,16,7,56,5,-19,-13,-23,39,-4,74,-17, 
  /* [5][0][][] */ 76,56,-99,56,-1,13,-7,22,-100,-69,-61,-31,44,23,44,31,35,-65,49,127,-82,-55,-59,52,18,-25,-49,66,32,16,-63,-7,-16,-9,-60,0,-19,20,-35,57,14,82,-18,-47,126,25,19,-63, 
  /* [6][0][][] */ -26,-65,15,-50,-36,-32,-73,-63,-27,-63,-114,31,-53,-55,77,69,-127,11,15,-33,5,55,65,9,-7,-9,-54,81,-64,-35,33,59,8,-48,70,38,28,51,-9,-89,-9,-49,-33,10,-41,-12,-15,52, 
  /* [7][0][][] */ 75,8,-23,44,6,8,12,-4,79,-13,-10,-16,45,-4,-11,-18,-50,2,-29,-3,-6,-20,-20,-32,62,-127,18,1,-2,99,-23,24,-81,20,-59,-49,-8,30,21,27,22,52,-49,-21,-46,26,32,-26, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.005774092860519886, 0.0051511139608919621, 0.0043840440921485424, 0.0030751624144613743, 0.0064719822257757187, 0.0040408000349998474, 0.0045130914077162743, 0.0056149228475987911, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 1501, 8669, -1380, -1109, 385, -2563, 8579, 7565, -1708, -6018, -951, -285, 7763, 5852, 19963, 17590, -2931, -1578, 3905, 3584, 14054, -590, -179, 28, 5676, 2025, 2105, 16894, 8888, 10333, -658, 3134, -443, -3894, 5407, 1002, 1630, 267, -376, 4752, 6381, 4265, -5307, 435, -2553, -83, 8185, -3045, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00010027700773207471, 0.00015886916662566364, 0.00057132943766191602, 9.5316805527545512e-05, 0.00083195912884548306, 0.00037937625893391669, 0.00012101356696803123, 0.00015883191372267902, 8.5546234913635999e-05, 0.00023432179295923561, 0.00037677143700420856, 0.00026351565611548722, 0.00016139823128469288, 0.00013630780449602753, 6.4260115323122591e-05, 5.4128911870066077e-05, 0.00013885824591852725, 0.00045674463035538793, 6.4391242631245404e-05, 0.00010976766498060897, 6.5564498072490096e-05, 0.00063443789258599281, 0.0010388136142864823, 0.00017406599363312125, 5.0821101467590779e-05, 0.00014346289390232414, 0.00013227111776359379, 0.00012765711289830506, 0.00013280579878482968, 0.00011771202844101936, 0.00046079515595920384, 0.00017288159870076925, 8.703679486643523e-05, 0.00025238652597181499, 5.4131811339175329e-05, 8.254941349150613e-05, 0.00036048374022357166, 0.00027538524591363966, 0.00012246205005794764, 0.00020280193712096661, 9.8863871244248003e-05, 0.00019299003179185092, 0.00010512630251469091, 0.0004266336327418685, 7.5022981036454439e-05, 0.00033949216594919562, 0.00010170680616283789, 0.0006608148105442524, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -32,-88,-83,61,-86,12,-92,-74,56,57,81,-35,-15,0,-54,-65,83,-75,38,-47,-28,-102,-40,-71,100,98,-17,-127,4,-91,50,65,48,65,89,14,60,93,52,7,-127,-18,5,38,-25,71,-11,-82, 70,-15,46,88,-127,60,-58,8,127,127,127,73,-11,-94,-127,-127,124,-32,117,-79,-114,127,127,4,127,55,28,-121,-99,-51,-100,105,96,127,115,108,-8,94,56,-54,-105,-53,19,-52,-39,1,-29,106, 127,8,60,43,-82,7,-44,-17,38,71,38,-15,-77,-1,-13,-75,51,84,36,-13,-91,-29,-86,93,49,34,19,-76,-17,-6,19,40,51,104,10,38,-2,22,72,-10,-46,-1,6,4,-6,-14,-16,11, 
  /* [0][1][][] */ 47,-127,115,67,88,-67,-127,-127,84,34,84,-42,-7,0,-92,-94,99,127,50,-94,-11,117,30,-127,110,127,92,-87,-17,-120,-54,63,95,-13,91,57,17,127,70,-8,-8,-48,52,111,-112,127,-81,127, 122,-22,3,127,120,-127,-91,5,89,95,122,47,-16,-127,-123,-104,127,63,127,-127,-127,-102,-106,23,81,75,127,-80,-127,-108,127,127,127,4,127,127,-1,105,127,-127,-4,-127,121,-71,-127,97,-90,-117, 96,8,-127,47,82,-68,-5,-19,35,70,71,-8,-127,-6,-9,-44,48,-95,55,-32,-63,18,84,88,41,38,4,-42,-24,-53,-33,14,45,6,-7,60,0,-5,100,-4,-19,11,35,-6,-77,25,-30,24, 
  /* [0][2][][] */ 62,-64,0,-3,3,89,-88,-72,54,-6,43,36,5,1,-13,-58,21,-46,23,-32,-17,-12,13,-104,27,41,69,-11,11,-127,17,12,60,-81,92,30,-127,-6,16,-11,35,-23,73,-127,-52,45,-99,1, 47,6,6,66,10,119,-49,-10,31,29,81,-127,-11,-105,-48,-34,57,-15,35,-61,15,-17,-30,22,10,47,60,-26,-116,-83,-24,41,48,-84,86,45,18,29,46,-61,107,-62,127,87,-83,-48,-127,20, -47,3,-7,21,-19,49,0,-15,36,-5,4,36,-95,-7,20,-21,0,16,16,12,-5,19,6,59,32,46,17,7,-15,-31,17,-10,2,-49,31,22,10,-29,83,8,54,-2,36,-20,-12,-13,-29,6, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0042617726139724255, 0.0067519391886889935, 0.024281501770019531, 0.0040509640239179134, 0.035358261317014694, 0.016123490408062935, 0.0051430766470730305, 0.0067503564059734344, 0.0036357147619128227, 0.0099586760625243187, 0.016012785956263542, 0.011199415661394596, 0.0068594245240092278, 0.005793081596493721, 0.0027310547884553671, 0.0023004787508398294, 0.0059014754369854927, 0.019411645829677582, 0.0027366278227418661, 0.0046651256270706654, 0.0027864910662174225, 0.026963610202074051, 0.044149577617645264, 0.0073978048749268055, 0.0021598967723548412, 0.0060971728526055813, 0.0056215221993625164, 0.005425427109003067, 0.0056442464701831341, 0.0050027612596750259, 0.019583793357014656, 0.0073474678210914135, 0.0036990635562688112, 0.010726426728069782, 0.0023006019182503223, 0.0035083498805761337, 0.015320559032261372, 0.011703873053193092, 0.0052046370692551136, 0.0086190821602940559, 0.0042017144151031971, 0.0082020759582519531, 0.0044678677804768085, 0.018131928518414497, 0.0031884766649454832, 0.014428416267037392, 0.0043225390836596489, 0.028084628283977509, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 13640, 5533, 10603, 3463, 6524, 5006, -4525, 5379, 2274, -3574, -3188, 6427, -3980, -5491, 10033, 2309, -1973, 1193, -1695, 3310, 279, 5189, 1400, -3272, -965, -5743, 3208, -4678, 4618, 8163, 1281, 378, 8300, 12760, 10733, 4643, 5741, -5292, 2568, 5680, -1052, -5237, 4862, 4226, 239, -6351, -13570, 2651, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00032266665948554873, 0.00049295305507257581, 9.316288196714595e-05, 0.00073276727925986052, 0.0002458037924952805, 0.00034690709435380995, 0.0016720276325941086, 0.0010289171477779746, 0.00094103493029251695, 0.00056082580704241991, 0.00018528169312048703, 0.00043807120528072119, 0.00038968233275227249, 0.00095403776504099369, 0.00054922502022236586, 0.0015453214291483164, 0.00088413548655807972, 0.00028992339503020048, 0.00081074232002720237, 0.0014612671220675111, 0.00077423156471922994, 0.000461291812825948, 0.0001092565362341702, 0.00036519952118396759, 0.0011085461592301726, 0.0006413480150513351, 0.00076449097832664847, 0.00049251987366005778, 0.00095142167992889881, 0.00067894038511440158, 0.00030020208214409649, 0.0005387302371673286, 0.00071498722536489367, 0.00020010076696053147, 0.00034058050368912518, 0.00034901106846518815, 0.00037199057987891138, 0.0013264347799122334, 0.0004364005581010133, 0.00051879294915124774, 0.0008486676961183548, 0.00054016214562579989, 0.0007784778717905283, 0.00021059480786789209, 0.0010286747710779309, 0.0005650000530295074, 0.00054003240074962378, 0.00034898915328085423, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -112,-127,3,-125,-72,-3,-2,8, 
  /* [1][0][][] */ -127,-8,109,-1,-49,13,-12,15, 
  /* [2][0][][] */ 24,2,7,127,20,-15,-13,-6, 
  /* [3][0][][] */ -114,-82,-21,-23,38,127,-42,-40, 
  /* [4][0][][] */ -9,-26,-9,0,-21,14,-127,-59, 
  /* [5][0][][] */ 6,-32,-12,0,-18,1,-127,-75, 
  /* [6][0][][] */ 127,4,10,-12,-65,13,4,-6, 
  /* [7][0][][] */ -127,-20,-11,-3,59,2,5,4, 
  /* [8][0][][] */ 24,46,-5,-4,-33,-127,59,17, 
  /* [9][0][][] */ 89,25,-16,-13,-10,-3,-15,127, 
  /* [10][0][][] */ 100,-17,-107,5,-74,4,43,127, 
  /* [11][0][][] */ -127,95,31,-47,53,-62,10,19, 
  /* [12][0][][] */ 127,-27,-109,13,63,-5,-5,-22, 
  /* [13][0][][] */ 127,12,14,-13,-25,28,8,-11, 
  /* [14][0][][] */ -124,-92,114,-44,67,-31,-39,-127, 
  /* [15][0][][] */ 32,68,6,-15,-10,-127,-19,11, 
  /* [16][0][][] */ -8,-66,7,-2,11,127,11,8, 
  /* [17][0][][] */ 8,-68,-78,5,-40,127,-46,2, 
  /* [18][0][][] */ 30,-19,-7,-16,-23,28,127,-27, 
  /* [19][0][][] */ -6,32,3,-127,-10,32,-1,-18, 
  /* [20][0][][] */ -59,-44,69,8,66,86,1,-127, 
  /* [21][0][][] */ -24,-12,38,-31,-15,-2,-127,-93, 
  /* [22][0][][] */ 73,-17,9,127,-13,-13,55,37, 
  /* [23][0][][] */ 125,-18,-127,-18,49,-14,8,10, 
  /* [24][0][][] */ -30,36,19,39,14,-2,-127,-86, 
  /* [25][0][][] */ 127,11,-79,2,21,-10,8,19, 
  /* [26][0][][] */ -3,47,-35,-127,-28,27,-5,2, 
  /* [27][0][][] */ 127,10,-94,-6,-107,43,15,87, 
  /* [28][0][][] */ -127,-16,-11,17,46,-1,1,29, 
  /* [29][0][][] */ -4,-127,-3,-118,-12,23,-24,-16, 
  /* [30][0][][] */ -7,64,127,31,26,-93,85,39, 
  /* [31][0][][] */ -82,2,-127,57,4,-16,77,97, 
  /* [32][0][][] */ -2,-114,9,-127,-5,6,-9,-21, 
  /* [33][0][][] */ 19,-127,-6,-116,8,16,0,-21, 
  /* [34][0][][] */ -35,-55,41,-106,34,-66,127,90, 
  /* [35][0][][] */ -127,20,55,7,-102,-19,23,73, 
  /* [36][0][][] */ -127,27,113,6,-75,33,-56,61, 
  /* [37][0][][] */ 127,13,-7,-8,-87,21,5,14, 
  /* [38][0][][] */ -71,-6,77,17,38,-66,57,127, 
  /* [39][0][][] */ -127,13,75,-11,-75,-3,-16,6, 
  /* [40][0][][] */ -10,26,44,-11,23,9,127,25, 
  /* [41][0][][] */ 127,-9,-78,2,56,12,7,-6, 
  /* [42][0][][] */ -11,-127,37,-18,22,10,-16,-14, 
  /* [43][0][][] */ 11,72,127,-13,43,-106,44,21, 
  /* [44][0][][] */ 9,-8,1,111,4,-127,1,-1, 
  /* [45][0][][] */ 127,-33,26,-17,-52,90,18,-5, 
  /* [46][0][][] */ 8,127,-9,119,-6,122,22,33, 
  /* [47][0][][] */ -17,30,4,-23,23,-23,127,56, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0045121335424482822, 0.0068933991715312004, 0.0013027790701016784, 0.010246934369206429, 0.0034372922964394093, 0.0048511093482375145, 0.023381443694233894, 0.014388259500265121, 0.01315932534635067, 0.0078425239771604538, 0.0025909580290317535, 0.006125937681645155, 0.005449273157864809, 0.013341154903173447, 0.0076803001575171947, 0.021609598770737648, 0.012363649904727936, 0.0040542557835578918, 0.011337327770888805, 0.020434193313121796, 0.010826765559613705, 0.0064506521448493004, 0.001527830958366394, 0.0051069082692265511, 0.015501783229410648, 0.0089685376733541489, 0.010690554976463318, 0.0068873418495059013, 0.013304572552442551, 0.0094942245632410049, 0.0041979914531111717, 0.0075335418805480003, 0.0099983001127839088, 0.0027981863822788, 0.0047626388259232044, 0.0048805307596921921, 0.0052018738351762295, 0.018548712134361267, 0.0061025754548609257, 0.007254741620272398, 0.011867672204971313, 0.0075535657815635204, 0.010886145755648613, 0.0029449337162077427, 0.014384870417416096, 0.0079008964821696281, 0.0075517510995268822, 0.0048802243545651436, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 4461, -5417, -809, 3379, 2610, 1038, -2741, 2724, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 5.2208317356416956e-05, 0.00012340220564510673, 7.6293363235890865e-05, 5.0669314077822492e-05, 0.00014091796765569597, 0.00017915708303917199, 0.00010129030852112919, 0.00017085281433537602, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -20,-4,-48,-39,-11,31,-127,-9, 
  /* [1][0][][] */ 25,103,2,127,12,-2,-4,-32, 
  /* [2][0][][] */ 127,17,-40,-73,-79,65,103,-38, 
  /* [3][0][][] */ 11,-127,39,-66,15,-85,22,68, 
  /* [4][0][][] */ 120,3,-73,-6,24,2,-127,-49, 
  /* [5][0][][] */ 0,-33,4,39,3,-127,-3,11, 
  /* [6][0][][] */ 127,-20,120,-6,122,-40,1,9, 
  /* [7][0][][] */ -127,-2,-91,-6,-104,-1,38,-7, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0022188534494489431, 0.0052445936016738415, 0.003242467762902379, 0.0021534457337111235, 0.0059890137054026127, 0.0076141757890582085, 0.0043048379011452198, 0.0072612445801496506, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[8] = { -10539, 8971, -184, -14555, -1153, -14446, 559, 72, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00026304670609533787, 0.00042160224984399974, 0.00027342702378518879, 0.00029547486337833107, 0.00036645092768594623, 0.00041205249726772308, 0.0012818737886846066, 0.0014339091721922159, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -7,1,18,11,9,5,8,27, 12,2,-24,127,-22,4,-5,32, -2,4,2,24,7,5,-7,23, 
  /* [0][1][][] */ -11,1,127,-26,127,3,-116,43, 127,-127,-82,13,-86,127,-17,-127, -23,10,20,-23,11,-4,127,51, 
  /* [0][2][][] */ -6,8,25,9,7,1,14,48, -5,4,-35,5,-19,2,-12,-103, 1,-2,-7,6,0,-2,-8,47, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.011179485358297825, 0.017918094992637634, 0.011620648205280304, 0.012557681649923325, 0.015574163757264614, 0.017512230202555656, 0.054479636251926422, 0.060941141098737717, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[8] = { 13764, 13021, -349, 39224, 3260, 13241, 92855, 3125, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 0.00020667046192102134, 0.00016537719056941569, 0.0001119105436373502, 7.2113958594854921e-05, 0.00020361863425932825, 0.0001926359545905143, 9.5479799711029045e-06, 5.1992901717312634e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -57, 49, 9, 
  /* [0][1][][] */ -127, 120, -1, 
  /* [0][2][][] */ -42, 46, -1, 
  /* [1][0][][] */ 58, 127, 35, 
  /* [1][1][][] */ -67, -78, -43, 
  /* [1][2][][] */ 7, -41, 6, 
  /* [2][0][][] */ 30, 27, -47, 
  /* [2][1][][] */ 52, 69, -127, 
  /* [2][2][][] */ 20, 32, -59, 
  /* [3][0][][] */ 40, 50, 19, 
  /* [3][1][][] */ 50, 71, 24, 
  /* [3][2][][] */ -81, -127, -58, 
  /* [4][0][][] */ 4, -53, 46, 
  /* [4][1][][] */ 16, -127, 112, 
  /* [4][2][][] */ 4, -37, 31, 
  /* [5][0][][] */ 2, -56, 0, 
  /* [5][1][][] */ 0, 127, 2, 
  /* [5][2][][] */ 1, -75, 0, 
  /* [6][0][][] */ -23, -69, 7, 
  /* [6][1][][] */ -36, -127, 2, 
  /* [6][2][][] */ -21, -55, 2, 
  /* [7][0][][] */ 48, -127, 20, 
  /* [7][1][][] */ -7, -3, -17, 
  /* [7][2][][] */ -19, 73, -18, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.052700962871313095, 0.042171180248260498, 0.028537187725305557, 0.018389059230685234, 0.051922749727964401, 0.049122165888547897, 0.002434734720736742, 0.013258188962936401, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.061395369470119476, } };
const TfArray<1, int> quant46_zero = { 1, { 28 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.071510881185531616, } };
const TfArray<1, int> quant47_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.052119739353656769, } };
const TfArray<1, int> quant51_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.084883071482181549, } };
const TfArray<1, int> quant54_zero = { 1, { -38 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.095107510685920715, } };
const TfArray<1, int> quant55_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.045210152864456177, } };
const TfArray<1, int> quant59_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.019123874604701996, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.020781900733709335, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.043956004083156586, } };
const TfArray<1, int> quant62_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.067876286804676056, } };
const TfArray<1, int> quant63_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.020925192162394524, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.022850453853607178, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.043670166283845901, } };
const TfArray<1, int> quant66_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.07622586190700531, } };
const TfArray<1, int> quant67_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.020137682557106018, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.044508963823318481, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,6 } };
const TfArray<1, float> quant70_scale = { 1, { 0.11136434227228165, } };
const TfArray<1, int> quant70_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,6,6,6 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension44, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4608), (TfLiteIntArray*)&g0::tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension48, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension50, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension51, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension52, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension54, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension56, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension58, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4608), (TfLiteIntArray*)&g0::tensor_dimension59, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension60, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension62, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4320), (TfLiteIntArray*)&g0::tensor_dimension63, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension64, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2016), (TfLiteIntArray*)&g0::tensor_dimension66, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension67, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension69, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 224), (TfLiteIntArray*)&g0::tensor_dimension70, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
