/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 03.04.2025 15:30:46

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 74400;
#else
constexpr int kTensorArenaSize = 73376;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0037867589853703976, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 18984, -22422, -19525, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00018769274174701422, 0.00020288099767640233, 0.00019949831767007709, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 83,76,111,-82,-65,17,-14,35,-14,65,53,-27,-42,-83,107,31,-62,101,76,116,-32,-19,40,-104,-127,103,-49,26,77,-3,-17,-25, 
  /* [1][0][][] */ 62,-27,-58,27,-4,127,-35,0,122,-65,4,-71,-56,100,22,-40,94,-35,-6,-84,-98,29,115,76,30,28,9,-20,-82,-43,-6,-16, 
  /* [2][0][][] */ -21,83,-70,83,88,-33,-50,117,96,44,127,0,-90,-77,84,119,-72,-46,18,-103,77,119,-38,-78,95,-42,-11,-113,26,-65,75,-14, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0032179909758269787, 0.0034783936571329832, 0.0034203974064439535, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 303, 245, -775, 915, 605, 699, 1028, 659, 924, 983, 684, -396, -712, -565, 814, 45, 212, -686, 463, -786, -390, 875, 756, 606, 882, -413, -685, -377, 1156, -835, -786, -800, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.6939683670643717e-05, 4.2440755350980908e-05, 4.4518696086015552e-05, 4.7249221097445115e-05, 4.4349591917125508e-05, 4.708010601461865e-05, 4.8658483137842268e-05, 4.5127802877686918e-05, 4.709171480499208e-05, 4.6989356633275747e-05, 4.6422464947681874e-05, 4.631096453522332e-05, 4.5264001528266817e-05, 4.4287688069744036e-05, 4.3394837121013552e-05, 4.5259555918164551e-05, 4.1350740502821282e-05, 4.6231205487856641e-05, 4.3813746742671356e-05, 4.4711665395880118e-05, 4.2620424210326746e-05, 4.6592009312007576e-05, 4.3513515265658498e-05, 4.4375588913680986e-05, 4.7436926251975819e-05, 4.5299842895474285e-05, 4.6163841034285724e-05, 4.2400388338137418e-05, 4.7648889449192211e-05, 4.5468914322555065e-05, 4.622411506716162e-05, 4.6014883992029354e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -28,-33,96,-1,100,-11,-79,-98,48,-106,-95,-9,57,12,-30,62,-39,-16,-37,-38,-56,-95,17,112,-85,-12,84,-32,111,9,-11,-73,51,-52,-74,37,-89,-69,-71,38,65,-65,-72,104,59,-86,111,-4,28,-52,-19,65,-54,-40,-92,103,6,73,127,-124,-57,80,-44,56,6,19,71,91,53,97,90,-111,104,-66,50,81,-86,26,-43,42,61,6,102,19,-43,-26,-69,111,35,123,-2,-100,-1,48,19,19, 
  /* [1][0][][] */ -49,34,-58,6,-37,93,52,22,86,-91,-95,111,70,-15,34,67,110,-47,41,108,-45,12,30,20,15,33,-51,110,7,6,100,-51,78,113,-10,48,42,66,-7,-60,-55,0,-20,-93,-34,29,-45,-71,-32,-82,126,76,5,91,-71,-47,40,106,39,105,-53,127,-65,-78,-71,40,84,52,117,34,12,12,-117,79,-46,59,85,-68,-44,71,-77,95,-75,-110,34,108,-66,-62,80,62,94,37,94,104,29,-5, 
  /* [2][0][][] */ 27,17,-74,85,-39,-72,68,78,-108,76,-52,105,68,-32,61,-126,-73,-44,28,35,-111,-33,89,3,-42,66,82,-11,-85,57,62,74,-81,-38,-108,-116,-101,91,89,-45,-127,-91,0,-25,-98,95,-39,-91,79,29,73,-100,-64,42,13,-1,-79,72,-78,-11,-36,38,-53,50,70,25,28,65,-111,65,-9,-83,15,-37,12,12,-71,-41,-15,-7,18,-100,-21,-51,-17,-112,-32,-47,69,96,-40,-11,-51,-93,-58,-47, 
  /* [3][0][][] */ 88,25,53,-19,-49,58,-88,41,67,22,81,-8,110,111,93,29,115,113,-52,37,127,-55,-35,-87,-3,-92,-51,123,63,-65,79,27,-30,-10,11,3,-61,-31,54,65,-24,-72,-88,26,87,44,-31,-54,79,-75,49,12,104,50,73,-68,-110,-82,-90,-36,-62,54,-12,77,69,-6,-37,-7,-6,-66,27,108,43,-127,75,-31,55,110,113,-31,-60,-110,46,81,49,64,-19,-86,-56,57,19,-79,72,-82,-68,7, 
  /* [4][0][][] */ 66,112,17,62,-18,-9,45,17,74,100,8,45,43,-16,7,-50,-13,2,-52,17,119,-65,92,30,-33,12,67,-41,-36,48,-71,-32,86,127,28,-77,-45,-2,-98,60,-48,-54,-78,-71,46,107,24,57,18,-33,-4,-57,-89,59,-84,36,46,-76,11,35,23,-55,-25,-63,-46,70,14,-18,46,-103,-83,-76,-42,12,112,64,75,-38,6,-42,20,-33,-104,-52,16,72,100,17,-105,-84,55,59,39,106,-97,-14, 
  /* [5][0][][] */ 90,-65,65,57,49,-110,23,32,97,-127,5,-78,28,92,38,48,67,73,-67,107,44,42,34,-11,-77,-79,1,-67,58,43,21,-96,-41,7,-48,-8,-87,-55,43,26,-94,-32,50,104,-19,37,43,-31,-84,81,38,7,54,22,15,-16,78,58,-31,-62,44,-59,50,-53,-12,106,-13,35,71,-9,110,-59,-29,45,-11,-50,24,-25,28,93,112,22,41,81,-64,91,8,50,78,-74,119,82,-30,1,69,-101, 
  /* [6][0][][] */ 38,-19,127,95,-47,-40,26,90,1,-44,31,-49,101,76,127,-79,53,21,27,117,-46,-75,121,78,-25,-44,14,-32,3,-77,67,-49,-48,-84,-13,-61,16,69,-69,93,99,78,48,8,-79,115,-51,-15,-56,46,3,-37,80,-25,109,4,32,18,-32,123,-64,25,78,-34,-19,77,120,-17,91,22,-68,22,76,-26,-52,-10,-52,-63,-28,5,57,3,66,0,-37,-52,-12,-58,107,114,111,41,-18,-33,93,10, 
  /* [7][0][][] */ 127,81,-21,-35,-57,121,-4,11,127,14,-77,18,69,-66,61,86,64,28,0,117,67,54,8,90,-83,110,49,71,-60,117,-15,50,42,40,79,114,-91,83,3,-11,98,-66,90,82,62,5,92,-101,54,-50,-93,-50,-16,98,23,45,120,-70,-12,-36,23,10,90,-98,-62,-37,78,39,-86,20,75,91,95,2,73,70,-45,37,-79,60,101,-27,-35,-65,100,40,-90,104,90,-4,96,76,-45,-30,7,-71, 
  /* [8][0][][] */ 28,53,-26,-81,71,37,-53,-10,23,40,61,86,23,-20,-56,-46,-46,108,-58,37,47,-1,96,117,-89,94,61,91,-43,40,-72,124,104,-11,65,12,127,-2,-1,82,79,109,-89,-85,7,-8,-9,118,34,-83,-44,12,-38,13,-26,-81,49,119,-67,110,125,56,60,114,-10,-20,-2,109,-57,46,50,15,89,36,30,37,-22,117,97,89,53,77,-86,-78,41,58,85,-19,52,-18,-61,108,-68,-85,-26,40, 
  /* [9][0][][] */ 22,28,127,58,92,-83,-29,-114,58,61,10,50,-1,-49,-70,-4,28,19,-80,-37,28,115,-82,-73,104,10,10,49,14,-31,-82,112,79,24,49,2,-47,18,-16,-21,46,-57,76,-62,98,42,-79,71,50,-6,-74,-37,77,-46,-57,117,89,-31,-11,15,-60,120,98,-57,-69,28,110,66,-13,120,123,-69,30,81,-74,-69,-48,-92,-15,120,55,35,93,19,-19,-66,53,4,111,29,-3,122,112,7,48,-18, 
  /* [10][0][][] */ -43,93,100,-61,-4,108,114,36,51,38,37,-65,109,93,-14,26,-20,88,-90,-46,-2,46,67,-55,18,62,-98,-87,-30,90,-86,-60,97,109,127,85,-27,0,-19,48,-27,113,-109,-18,-75,-48,-8,-48,5,4,44,23,65,36,-60,-16,-85,2,8,-24,14,89,118,47,110,-54,-77,-4,38,-28,-73,-52,95,39,-60,113,2,50,78,37,85,4,39,95,-76,75,108,-8,46,4,10,-49,-43,-40,-33,-80, 
  /* [11][0][][] */ 94,-1,-6,117,112,38,41,53,120,103,-64,123,-11,-85,20,-73,-36,-106,90,29,18,79,11,-70,-109,-92,-25,54,64,-19,38,-23,-69,-78,39,61,-39,103,-20,-53,-15,85,-39,-7,-49,-67,-54,-65,60,121,127,60,-76,-96,31,24,-46,-54,-20,-72,-83,73,67,6,28,69,-32,16,72,86,-67,-58,28,127,-103,37,-74,59,-54,71,-80,-9,-58,-31,32,-86,22,-35,-100,-19,0,-84,-70,-3,-48,-3, 
  /* [12][0][][] */ -3,48,-66,-8,67,-5,-48,21,-84,51,-28,5,-60,-5,29,-92,-111,-48,-53,-94,11,-27,-1,76,-78,-56,78,-112,71,-5,-47,95,-95,-83,-61,4,-20,-79,-29,23,100,22,-116,-55,-37,-95,-51,96,-58,-119,-84,88,18,-17,-88,64,-25,-73,34,51,38,91,-21,36,89,14,-60,94,37,86,22,57,63,116,-33,-18,-52,18,-127,-105,-71,89,35,6,-51,14,39,95,-103,-115,71,26,88,-27,16,64, 
  /* [13][0][][] */ 95,-70,87,83,78,99,65,50,60,-109,-2,-37,74,56,52,-59,-127,-80,-44,14,53,-42,102,-59,-79,28,-8,5,-99,-101,69,23,25,88,-34,24,-96,-36,11,54,-73,63,-65,-1,-55,14,-9,-47,52,88,-46,-115,-109,14,86,-93,-54,14,-13,-86,-40,100,-85,1,-65,-74,-101,72,-49,-25,80,-14,-102,37,-87,-53,-116,64,67,-74,38,-105,111,8,-94,-111,76,101,-23,-48,-85,40,102,-59,52,-9, 
  /* [14][0][][] */ -70,-77,94,64,91,-38,0,-104,-62,-51,86,76,-12,-76,-69,-68,-47,-44,-22,41,-26,50,13,70,-105,-61,-17,52,-93,-96,-88,52,124,-7,-15,24,113,105,50,-103,-3,-108,45,108,64,-102,45,-67,110,20,92,67,112,1,-21,18,-39,28,60,108,2,-70,-9,75,-76,7,92,-90,-69,-94,-82,110,20,46,68,-55,74,-99,72,53,63,-49,-112,-35,-100,-77,-100,121,127,14,88,-43,82,105,2,26, 
  /* [15][0][][] */ 26,-24,-11,75,88,-70,72,-81,63,11,-58,6,107,14,-76,-106,85,5,-87,9,49,37,65,99,59,81,31,92,19,54,56,-79,22,15,-59,17,-77,90,108,-59,23,95,-65,-18,26,-81,-52,-89,-12,-73,-14,45,-103,-90,-47,-1,76,53,-63,127,-40,-52,-4,96,-49,99,-69,12,-45,-6,56,-68,18,-46,58,-95,0,35,100,73,-77,64,-120,-73,-108,-47,-81,38,80,50,-111,-25,62,114,-101,82, 
  /* [16][0][][] */ -73,18,95,-75,50,107,-68,28,52,35,-114,67,-8,-53,-54,-53,118,95,65,90,122,69,-20,71,-13,40,-51,76,-94,25,48,1,-122,82,69,40,-15,47,-52,-68,13,-30,81,101,72,125,122,7,-42,-122,3,97,-28,124,58,51,13,99,95,-8,127,111,44,70,79,21,-36,96,44,94,-20,-7,41,100,72,88,-2,126,-95,4,21,-97,82,2,15,125,110,16,97,34,-1,110,63,-47,-83,18, 
  /* [17][0][][] */ 25,-119,65,110,-52,-104,-69,-97,25,-90,64,83,77,47,-123,30,21,33,93,91,-102,-21,-2,-66,9,56,-88,9,83,-66,-27,63,-44,-38,14,41,-59,113,-96,-41,-99,-42,7,-25,-6,-1,88,-117,70,100,-26,56,-32,56,127,-78,-90,64,-92,-114,15,-100,54,88,-94,-87,35,-106,-118,23,87,13,-1,-74,-77,48,92,-59,24,-70,1,18,-84,-50,-119,51,60,-46,4,58,-93,-116,22,120,-3,49, 
  /* [18][0][][] */ -70,103,125,-53,7,-91,-83,18,-2,88,-95,-41,-20,55,77,-43,41,-29,61,-33,103,-21,25,-76,12,-75,-13,120,32,42,8,63,58,-6,-96,-82,-32,41,-30,81,-35,9,-48,1,-91,16,39,-10,-2,-18,83,46,-107,5,14,108,-28,49,-24,-94,92,127,17,49,-66,-102,-12,109,88,-70,-67,107,-84,-46,-74,-91,64,36,2,-66,-44,3,-43,-52,120,-42,72,69,-104,-87,-47,121,98,-39,49,-17, 
  /* [19][0][][] */ 8,14,64,30,45,-89,82,78,76,-65,13,-18,-105,19,-67,42,60,-113,98,43,-34,66,-66,0,71,-83,14,-78,-101,-127,-70,34,64,-92,18,-11,-4,-72,-68,-106,34,-121,-90,-4,-91,12,76,-102,-35,28,-51,33,-47,0,-3,-17,15,79,-14,-37,38,-61,82,50,-80,-16,-36,-12,-22,50,59,-61,-72,-95,-68,-91,-36,-105,1,89,41,-117,-37,66,-97,-20,-4,-17,73,27,-13,53,-38,97,53,-47, 
  /* [20][0][][] */ -7,55,81,107,-91,103,31,76,17,31,-85,14,-10,90,40,-85,-60,-52,-61,-49,11,-31,-93,-83,60,-51,-119,34,11,0,-45,127,114,44,-22,81,25,-26,-14,-110,-70,-49,-103,-109,-32,-79,-80,90,49,-109,-103,62,30,108,65,-2,110,69,79,115,106,-52,-80,-38,-44,-71,-52,15,-82,-75,-83,79,-70,-99,25,16,97,59,95,94,79,18,68,-12,59,99,-17,61,5,80,17,72,37,44,-4,3, 
  /* [21][0][][] */ 105,91,81,-103,103,-62,81,24,14,-52,-49,35,26,54,-25,-63,-78,-8,24,9,117,-24,87,-60,68,-69,-9,90,33,24,-8,-3,23,38,-62,-90,123,78,-93,-12,-4,15,29,8,-72,-61,-64,107,-7,-64,3,91,48,84,-98,45,-44,69,-31,127,71,-50,29,-2,90,49,-17,-45,-77,-23,76,84,51,-55,87,74,-82,-8,79,121,30,89,39,-93,43,-69,77,-59,-80,84,118,-88,-38,-66,76,-60, 
  /* [22][0][][] */ 36,-35,-75,-108,103,-58,116,33,-92,66,-65,-127,122,-100,-105,-68,51,103,-114,-40,105,-74,51,46,112,-20,-95,117,-42,-59,-50,-112,44,68,36,-4,23,-11,-52,-107,-7,4,19,106,63,-99,105,-3,-47,-93,24,-26,-43,-81,-65,40,-25,-19,-1,-56,120,-70,-57,-97,-46,35,-99,-34,117,100,-5,4,-50,10,81,-70,61,-30,82,112,124,-119,-57,-120,90,103,105,-22,-37,51,-51,61,7,8,-23,86, 
  /* [23][0][][] */ 56,-70,-2,35,107,-106,7,-107,53,-88,86,76,20,-110,19,-26,95,-16,-96,114,101,-92,116,-21,3,-34,95,35,80,60,84,-47,-49,43,31,9,112,-20,-99,9,-98,15,23,-92,-56,-74,120,42,89,-123,-72,-57,98,-48,-71,87,-100,-9,115,20,-95,-82,-37,3,49,47,-102,-100,60,-25,116,-62,6,-45,-25,-76,57,-2,105,127,-38,-68,37,-114,92,23,111,-8,-72,57,111,-10,93,-66,-17,63, 
  /* [24][0][][] */ -52,-22,-79,-65,-62,-90,-47,-74,80,116,94,38,127,77,-13,-85,-55,60,20,-26,108,-51,-28,-16,64,-16,89,76,118,72,6,-39,17,29,69,44,-26,-82,72,1,-65,-79,102,27,38,-18,50,86,-66,-42,-8,28,82,76,62,-45,3,93,40,18,105,14,52,99,-73,110,-24,-61,-71,38,-30,-9,-13,18,109,106,80,-48,-72,-50,-52,-83,-52,-111,23,79,6,-71,42,-84,24,-54,-9,34,-70,17, 
  /* [25][0][][] */ -87,-60,-88,-27,84,-84,-113,33,23,-127,-53,9,62,-13,-116,-24,-70,59,17,-100,45,64,-10,-52,35,-70,-96,30,73,-92,36,93,68,-111,39,47,93,-78,-41,-23,-94,96,-105,-7,89,41,75,38,-87,73,-89,-16,39,-25,-76,7,-41,42,-85,53,102,30,44,41,4,63,-25,-15,-99,-17,-31,-127,32,-111,61,4,61,82,4,17,35,33,-28,105,-76,-35,-119,-103,-37,-22,101,10,-125,-31,-39,-97, 
  /* [26][0][][] */ 41,-121,-32,-26,-102,-16,-22,-25,-116,-127,86,70,-83,-58,-1,-27,95,17,-93,-72,-3,56,82,7,24,46,4,32,7,-6,-96,-14,-37,-67,-98,-110,-69,58,-60,91,-102,82,32,18,-77,54,-32,85,-28,11,-17,78,-1,-52,-15,-104,74,49,39,9,-11,-97,45,-30,97,-29,-65,41,-93,55,67,78,68,-120,-92,-7,32,-88,-103,-2,-40,58,55,-81,63,-8,-53,0,-93,79,-3,7,-62,92,37,58, 
  /* [27][0][][] */ 9,1,-69,-87,-126,-72,-77,-7,38,102,32,-78,-34,54,76,-36,62,-21,71,-91,-101,7,-34,-31,-112,43,-113,-11,59,21,-4,-14,55,63,-98,-93,-96,-51,-112,83,-86,16,25,9,95,21,88,100,88,79,59,-81,-95,-93,32,-39,103,-32,-103,-84,-64,-69,-38,54,39,-55,-119,99,43,38,-120,4,56,-16,-15,-95,41,-72,81,96,80,-20,127,-32,-81,-89,-34,22,-54,-6,-41,-57,57,21,93,75, 
  /* [28][0][][] */ 102,24,104,67,-78,-34,-68,-42,-13,-79,79,89,-46,-53,28,116,108,127,-49,94,1,44,-72,-41,-83,94,-51,-27,-40,-43,12,7,-67,41,98,85,41,-66,-13,52,103,60,-58,73,-73,21,36,69,48,-47,-53,-19,-48,46,70,57,66,16,102,69,17,-14,-61,27,80,92,3,99,-46,50,-68,-11,90,55,22,-63,-78,-42,-52,67,-39,-78,122,-14,79,-75,82,-51,-69,-42,-6,-35,-32,58,-75,-41, 
  /* [29][0][][] */ 31,32,39,-55,-97,-1,-124,-4,78,-22,-100,-94,83,-117,-62,-61,-110,79,18,-76,-85,-52,33,-10,-47,-2,-57,-44,-111,-23,85,-19,36,-16,-92,-63,-26,96,-21,72,36,86,-52,60,-16,83,-62,-38,3,-14,46,-101,52,-111,98,27,-99,36,-62,86,-127,75,-105,-62,-71,-76,34,66,73,-80,14,-77,88,99,39,11,90,-72,-46,13,-21,-87,-15,-78,42,93,26,60,-48,82,51,61,-105,6,-10,66, 
  /* [30][0][][] */ 7,-60,-73,14,-97,12,-70,-12,102,-33,-1,-52,-111,-3,39,7,-18,29,68,-112,25,-109,-108,0,-105,4,-79,109,-25,-101,-95,-10,-95,-82,-127,-67,14,-33,-8,23,83,-81,-24,92,79,-53,79,48,-65,50,13,-97,80,-48,-27,77,-83,-62,-76,-53,-97,-16,-70,-39,-110,-83,-101,68,-70,84,24,-42,-99,83,29,-91,-56,-72,-69,-69,10,5,-104,-20,-110,16,-106,93,-39,-118,54,39,-49,-16,6,-84, 
  /* [31][0][][] */ 64,-103,21,84,32,46,-70,-103,-41,-14,-90,-90,80,-127,-59,89,-70,-98,25,32,46,19,-44,86,26,-115,21,22,-81,-83,31,87,6,6,-99,-19,76,-39,-74,-118,48,-79,-43,14,-10,-66,-47,10,54,13,77,-41,-123,-67,-84,11,-119,49,-12,94,-52,-17,65,-84,52,90,-57,-87,54,-123,-126,0,-103,-23,-12,-7,-70,-57,30,71,-87,-48,41,60,40,77,-101,3,2,-60,-93,-66,3,87,-13,-32, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0019949364941567183, 0.0018037321278825402, 0.0018920445581898093, 0.0020080918911844492, 0.0018848576582968235, 0.0020009044092148542, 0.0020679854787886143, 0.0019179316004738212, 0.0020013977773487568, 0.0019970475696027279, 0.0019729547202587128, 0.0019682159181684256, 0.0019237200031057, 0.0018822266720235348, 0.0018442805157974362, 0.0019235310610383749, 0.0017574063967913389, 0.0019648261368274689, 0.0018620842602103949, 0.0019002457847818732, 0.0018113679252564907, 0.0019801603630185127, 0.00184932432603091, 0.0018859624397009611, 0.0020160693675279617, 0.0019252432975918055, 0.0019619632512331009, 0.0018020165152847767, 0.0020250778179615736, 0.0019324288005009294, 0.0019645248539745808, 0.0019556325860321522, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 1575, -138, 3997, 6735, 4732, -2349, 4216, -1696, -2768, -595, 6567, -2820, 5424, 6380, 2039, 2241, -564, -283, -2213, 7026, 3127, -1161, 3603, -408, -1413, 4349, 1658, 3574, 4970, 2823, 5199, 1240, 1958, 6731, 7366, 4313, -274, 5752, 2908, -5064, -319, 1489, 151, 2545, -1320, 247, -1485, 1066, -9785, 2385, 1443, -3887, 8037, -1210, 3361, 1369, 1655, 3224, -1146, -2145, 479, 1615, 521, 4990, 6649, 5062, 3062, 6514, 5620, -1186, 3755, 5247, 4318, -2629, 6711, 8259, 714, -3854, 1020, 2046, 10942, 2301, -772, -3830, 1919, 1087, 1496, -3165, 3798, -682, 3802, 1103, -231, -3294, -408, 2598, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00012803463323507458, 0.00013439611939247698, 0.00014561096031684428, 0.00011047186853829771, 0.00013623249833472073, 0.00017159180424641818, 0.00014018802903592587, 0.00015935614646878093, 0.0001381708134431392, 0.00018451000505592674, 0.00010265305900247768, 0.00015826360322535038, 0.00010973001917591318, 9.1098838311154395e-05, 0.00012965036148671061, 0.0001774166157701984, 0.00021055291290394962, 0.00016407048678956926, 0.00013640645192936063, 9.4009912572801113e-05, 0.00014999302220530808, 0.00013077983749099076, 0.00010950344585580751, 0.00017436445341445506, 0.00019047234673053026, 0.00014701212057843804, 0.00015456670371349901, 0.00010965202091028914, 0.00014224708138499409, 0.00015737884677946568, 9.3934882897883654e-05, 0.00017153219960164279, 0.0001611071202205494, 9.8544027423486114e-05, 9.2970411060377955e-05, 0.00011942011042265221, 0.00017028796719387174, 8.4310791862662882e-05, 0.00012371673074085265, 9.9855322332587093e-05, 0.00015292981697712094, 0.00012732068717014045, 0.0001678713015280664, 0.00010582086542854086, 0.00015656114555895329, 0.0001272388908546418, 0.00015542823530267924, 0.0001649111945880577, 7.4987212428823113e-05, 0.00010156407370232046, 0.00016131592565216124, 0.00012701700325123966, 9.4477931270375848e-05, 0.00012972965487278998, 9.7741925856098533e-05, 0.00014687491056974977, 0.00013033926370553672, 0.0001223498402396217, 0.00017055861826520413, 0.00012283373507671058, 0.00019580745720304549, 0.00014213232498150319, 0.00022846709180157632, 0.00012800915283150971, 9.7609139629639685e-05, 9.6201321866828948e-05, 0.00012739190424326807, 0.00010505061800358817, 0.00011635254486463964, 0.00012799965043086559, 0.00013109187420923263, 0.00013526986003853381, 0.00011554657248780131, 9.8283577244728804e-05, 0.0001126210336224176, 9.8699078080244362e-05, 0.00010153294715564698, 0.00014784782251808792, 0.00014411656593438238, 0.00011934584472328424, 8.1135542131960392e-05, 0.00013321079313755035, 0.00013667051098309457, 0.0001147607690654695, 0.00012765129213221371, 0.00013989253784529865, 0.00018585896759759635, 0.00013757377746514976, 0.00017309030226897448, 0.00017688801744952798, 0.00015786934818606824, 0.00019446178339421749, 0.00013379068695940077, 0.00013062480138614774, 0.00019390579836908728, 8.363433153135702e-05, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -18,91,-97,30,62,-36,114,67,-56,2,39,-90,92,127,-75,29, 
  /* [1][0][][] */ -16,8,-75,-37,-17,60,27,-127,22,-62,-23,-64,-17,-42,-52,3, 
  /* [2][0][][] */ -31,-39,36,79,31,43,-109,127,-21,7,82,-62,-13,-72,-53,75, 
  /* [3][0][][] */ 98,-89,86,0,3,-32,-39,127,-23,67,63,43,5,69,18,3, 
  /* [4][0][][] */ -47,-31,-3,38,-76,-1,-21,-127,13,-9,27,-8,41,40,93,108, 
  /* [5][0][][] */ 127,28,-25,-24,-85,26,27,76,7,-20,57,91,113,28,-83,2, 
  /* [6][0][][] */ 17,-31,-62,-57,-72,20,-1,-41,-54,-59,-37,23,81,58,127,-19, 
  /* [7][0][][] */ -52,42,-24,-73,10,-62,-86,23,-95,64,-78,-75,-127,-32,25,88, 
  /* [8][0][][] */ 51,42,69,2,55,31,80,10,62,-35,48,14,-127,-32,-86,18, 
  /* [9][0][][] */ -44,65,35,-42,-32,-8,31,-8,-35,47,-35,19,48,127,21,19, 
  /* [10][0][][] */ 69,43,-49,45,-30,-33,66,-69,-70,-50,-58,-101,-127,-93,-1,112, 
  /* [11][0][][] */ 53,14,58,9,-16,-29,8,111,-94,20,-36,8,-16,-9,81,127, 
  /* [12][0][][] */ -57,-26,2,-8,16,6,127,30,-59,12,4,1,-12,64,-49,95, 
  /* [13][0][][] */ 31,53,20,59,113,60,103,127,-66,95,-81,-79,31,102,-108,-33, 
  /* [14][0][][] */ -100,127,8,1,-6,15,50,15,-46,43,107,-19,-97,35,-30,37, 
  /* [15][0][][] */ -10,-12,-127,-42,78,-44,-87,-29,-27,-16,-10,-65,-2,-77,-49,56, 
  /* [16][0][][] */ 105,-25,13,-20,33,-42,51,-30,-33,12,127,58,56,-4,-46,28, 
  /* [17][0][][] */ 1,5,-16,-86,-6,-66,115,-127,10,-21,-42,40,40,59,-6,47, 
  /* [18][0][][] */ 30,106,-1,-39,57,-70,-25,-43,-34,127,-15,2,-39,57,-9,-25, 
  /* [19][0][][] */ -82,-127,108,-104,29,-118,43,-51,41,25,91,113,31,-25,54,-22, 
  /* [20][0][][] */ -29,87,58,-5,11,-4,34,-40,67,-17,103,-19,-127,-38,-90,-2, 
  /* [21][0][][] */ -58,44,26,29,68,38,57,59,-127,69,-44,8,-25,31,-55,-34, 
  /* [22][0][][] */ 5,-101,47,4,17,-127,126,-6,13,-58,-40,-70,45,-96,-68,-50, 
  /* [23][0][][] */ -64,-104,44,57,30,-27,30,-50,28,-44,76,13,10,62,67,127, 
  /* [24][0][][] */ 5,5,27,90,50,25,-61,-127,71,23,-47,11,-1,8,-18,-34, 
  /* [25][0][][] */ -22,36,17,-60,-37,3,19,-41,-36,51,-44,0,46,127,17,8, 
  /* [26][0][][] */ -68,87,10,26,33,-95,-2,-36,26,27,11,78,5,3,-94,127, 
  /* [27][0][][] */ -30,-127,-49,0,-59,90,10,-62,11,-42,57,-19,27,-56,-106,-17, 
  /* [28][0][][] */ -29,7,32,87,32,6,-41,-126,-127,51,111,-12,80,9,-40,-19, 
  /* [29][0][][] */ -127,107,-26,-38,-31,33,-114,-68,-49,-43,-4,3,0,-65,-109,56, 
  /* [30][0][][] */ 67,87,-43,90,-110,-88,-85,-7,-32,3,-3,-127,120,45,3,84, 
  /* [31][0][][] */ 127,34,-55,-24,-70,24,89,44,-55,-10,57,40,34,29,-18,1, 
  /* [32][0][][] */ -38,-19,127,-5,-25,92,84,19,-31,-19,-2,29,17,70,66,46, 
  /* [33][0][][] */ -17,8,-65,-61,-28,35,127,13,-12,-26,25,-43,76,99,-62,54, 
  /* [34][0][][] */ -114,-38,88,8,22,-56,123,-23,-127,25,47,-31,59,47,-69,-24, 
  /* [35][0][][] */ -13,16,-58,4,-80,127,-23,-27,-26,105,4,95,-75,57,17,33, 
  /* [36][0][][] */ -20,-72,127,-60,-57,21,-37,-20,8,14,-47,93,-2,-88,-43,53, 
  /* [37][0][][] */ 81,-3,70,-44,120,-78,-40,22,-73,127,-63,17,-110,-60,120,-26, 
  /* [38][0][][] */ 68,65,14,-103,5,-44,-126,81,-113,78,-101,-70,-83,-127,-110,63, 
  /* [39][0][][] */ -93,14,-55,-38,-82,-97,85,6,-127,-36,22,93,40,-7,-12,61, 
  /* [40][0][][] */ 127,31,-4,-95,-70,25,21,-41,-48,-37,-55,-89,9,48,34,44, 
  /* [41][0][][] */ 105,-73,-55,-50,-10,1,-70,-15,58,-20,-7,-68,127,-67,67,-42, 
  /* [42][0][][] */ -23,-100,-41,127,0,-109,-104,11,14,6,9,56,-72,69,-69,6, 
  /* [43][0][][] */ -106,-61,-41,-127,-57,-11,-2,70,55,-125,-42,39,-15,-63,-42,109, 
  /* [44][0][][] */ -48,33,32,-52,-20,-38,39,109,110,-75,86,116,127,40,-34,13, 
  /* [45][0][][] */ 43,90,-69,109,127,-83,-53,-53,119,-60,62,-79,-34,24,-60,52, 
  /* [46][0][][] */ -29,-49,5,-14,94,-35,38,12,-4,127,-27,-119,43,62,-58,85, 
  /* [47][0][][] */ 74,-49,-32,-20,76,-23,-35,-69,-4,127,-32,44,-10,-116,-92,17, 
  /* [48][0][][] */ 17,33,-23,-127,-12,-41,113,-107,-1,0,-43,40,42,68,12,34, 
  /* [49][0][][] */ -15,122,-67,53,56,-69,64,74,-21,36,51,-104,-43,95,127,-107, 
  /* [50][0][][] */ 13,43,-15,5,-127,-1,-68,-56,59,71,24,27,-40,-37,2,30, 
  /* [51][0][][] */ 127,-46,-52,-14,-42,93,-91,-51,47,-23,-48,69,-35,-73,2,37, 
  /* [52][0][][] */ -25,-50,54,57,-62,-91,-127,-15,-55,-74,-44,-71,-1,-63,13,67, 
  /* [53][0][][] */ 27,98,47,-127,5,118,94,-9,-23,-32,-3,-37,77,-113,5,51, 
  /* [54][0][][] */ 42,124,15,-14,3,-101,-120,68,10,-18,-36,127,82,104,28,62, 
  /* [55][0][][] */ -30,1,67,43,56,-41,95,104,-79,4,7,-3,127,66,10,-14, 
  /* [56][0][][] */ 127,22,9,15,-58,123,-47,-87,-34,42,-84,14,-69,98,-10,44, 
  /* [57][0][][] */ -62,-52,-42,-31,-71,-107,71,-35,-127,-24,53,61,29,38,-10,56, 
  /* [58][0][][] */ 52,-44,60,28,4,-53,-23,14,27,-7,-127,-33,19,-27,-27,37, 
  /* [59][0][][] */ 61,2,-127,80,11,39,93,-24,-78,-56,25,-87,-115,-65,22,97, 
  /* [60][0][][] */ -9,21,-6,14,-10,-30,-13,-5,-33,-69,56,121,-38,-127,-42,-1, 
  /* [61][0][][] */ -21,23,86,-78,-79,61,-6,127,-18,-92,55,54,85,8,23,104, 
  /* [62][0][][] */ 66,35,-15,-127,-12,4,15,-45,-14,26,-29,52,29,-28,-89,-66, 
  /* [63][0][][] */ -5,-34,4,-1,-55,-69,-55,1,-62,-9,-35,-22,127,3,45,-16, 
  /* [64][0][][] */ 35,9,-2,63,-106,-51,-30,-84,73,127,21,-12,28,-46,-34,96, 
  /* [65][0][][] */ -36,-2,-11,-15,-68,65,29,-34,60,-108,88,-58,74,58,-127,58, 
  /* [66][0][][] */ -113,103,-91,-75,26,-20,-117,-54,-118,111,87,-2,-127,-46,51,50, 
  /* [67][0][][] */ 10,-25,-127,-109,71,80,3,-20,-26,0,48,-28,27,48,26,46, 
  /* [68][0][][] */ 54,22,-4,-46,-64,28,16,30,-50,77,127,-19,-6,-42,-126,2, 
  /* [69][0][][] */ 71,-118,62,-42,29,-127,-35,124,9,73,91,79,-16,81,-27,-8, 
  /* [70][0][][] */ 41,-6,117,30,102,-38,127,-1,46,23,-64,45,-61,50,-86,40, 
  /* [71][0][][] */ 6,32,82,-72,-127,-65,15,12,-31,-14,26,-92,-74,2,10,31, 
  /* [72][0][][] */ -73,-108,28,-122,67,-22,18,35,-64,6,-127,-10,56,111,-66,119, 
  /* [73][0][][] */ 23,23,46,-10,127,-89,-44,-2,-39,83,-86,32,-81,-59,119,-18, 
  /* [74][0][][] */ -122,-13,-127,-74,53,-43,-23,12,-81,-7,-117,-19,-39,-75,-56,84, 
  /* [75][0][][] */ 93,-23,43,-49,15,17,-127,-21,-16,-107,74,8,-4,-15,-3,-11, 
  /* [76][0][][] */ 15,-37,-44,116,24,101,76,-42,77,-127,80,105,30,-67,-54,40, 
  /* [77][0][][] */ -51,-47,123,-29,27,-36,-18,-127,18,10,38,97,48,40,7,11, 
  /* [78][0][][] */ -61,-7,4,-42,-10,-45,44,-15,10,-23,25,-73,-91,-78,-127,-39, 
  /* [79][0][][] */ -127,-96,-28,8,122,35,-2,8,15,15,-11,70,-39,-95,-88,-9, 
  /* [80][0][][] */ -12,-127,47,110,-27,-46,-95,64,6,21,75,15,-69,-20,-35,80, 
  /* [81][0][][] */ 100,72,-22,73,-6,45,32,127,14,2,115,64,122,20,48,-14, 
  /* [82][0][][] */ -47,9,14,-25,37,-122,-127,-78,-6,89,-43,-46,-30,113,-67,-28, 
  /* [83][0][][] */ 109,-22,92,-24,-32,-5,-127,-2,31,-117,9,-60,-11,1,9,-27, 
  /* [84][0][][] */ 2,-80,-104,19,127,42,56,30,-126,11,-116,-11,45,-51,-86,26, 
  /* [85][0][][] */ -5,74,41,-54,89,5,62,-127,115,-45,42,4,98,-99,-6,13, 
  /* [86][0][][] */ 110,-41,127,47,0,-62,72,31,-52,-51,-99,-42,34,12,-68,0, 
  /* [87][0][][] */ 4,17,24,-71,76,-27,-56,23,45,-34,72,-45,-93,-127,6,17, 
  /* [88][0][][] */ -62,-31,32,-6,19,37,-59,-44,-12,7,-67,-127,-44,-40,-19,-18, 
  /* [89][0][][] */ -62,19,19,-57,32,12,-127,28,73,31,-65,-16,-13,-69,-33,-28, 
  /* [90][0][][] */ -16,-25,-34,-84,127,17,-56,31,47,55,31,-12,37,13,-73,-23, 
  /* [91][0][][] */ -43,-68,27,52,-34,-25,-10,61,-23,-41,33,-41,8,58,18,127, 
  /* [92][0][][] */ -15,68,5,-4,-13,49,-99,54,-30,-2,63,-6,-29,127,40,17, 
  /* [93][0][][] */ -5,74,-43,-66,63,94,-74,6,66,68,69,55,-127,27,-45,66, 
  /* [94][0][][] */ 35,73,97,20,-127,-42,3,-4,25,-13,29,-29,-55,-14,25,-30, 
  /* [95][0][][] */ 11,16,30,19,127,-36,-121,93,38,35,-95,94,-24,17,96,-22, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0016980897635221481, 0.001782460487447679, 0.0019311999203637242, 0.0014651594683527946, 0.0018068159697577357, 0.0022757770493626595, 0.0018592770211398602, 0.0021134987473487854, 0.0018325232667848468, 0.002447107806801796, 0.0013614606577903032, 0.0020990087650716305, 0.0014553205110132694, 0.0012082200264558196, 0.0017195186810567975, 0.0023530300240963697, 0.0027925081085413694, 0.0021760237868875265, 0.0018091229721903801, 0.0012468288186937571, 0.0019893180578947067, 0.001734498655423522, 0.0014523154823109508, 0.002312550088390708, 0.0025261847767978907, 0.0019497832981869578, 0.002049977658316493, 0.0014542860444635153, 0.0018865857273340225, 0.0020872743334621191, 0.0012458337005227804, 0.0022749865893274546, 0.002136721508577466, 0.0013069636188447475, 0.0012330422177910805, 0.0015838376712054014, 0.0022584847174584866, 0.001118191983550787, 0.0016408225055783987, 0.0013243550201877952, 0.0020282680634409189, 0.0016886208904907107, 0.0022264330182224512, 0.0014034743653610349, 0.0020764295477420092, 0.0016875360161066055, 0.0020614040549844503, 0.0021871740464121103, 0.00099453574512153864, 0.0013470177073031664, 0.0021394907962530851, 0.0016845931531861424, 0.0012530360836535692, 0.001720570377074182, 0.0012963255867362022, 0.0019479634938761592, 0.0017286555375903845, 0.0016226938460022211, 0.0022620742674916983, 0.0016291115898638964, 0.0025969429407268763, 0.0018850637134164572, 0.0030300992075353861, 0.0016977519262582064, 0.0012945644557476044, 0.0012758929515257478, 0.0016895654844120145, 0.0013932588044553995, 0.0015431533101946115, 0.0016976258484646678, 0.0017386371036991477, 0.0017940487014129758, 0.0015324639389291406, 0.0013035093434154987, 0.0014936632942408323, 0.0013090199790894985, 0.0013466048985719681, 0.0019608668517321348, 0.0019113802118226886, 0.0015828526811674237, 0.0010760794393718243, 0.0017667397623881698, 0.0018126252107322216, 0.0015220419736579061, 0.0016930055571720004, 0.0018553580157458782, 0.002464998746290803, 0.0018246049294248223, 0.0022956512402743101, 0.0023460194934159517, 0.0020937798544764519, 0.0025790957733988762, 0.001774430857039988, 0.0017324425280094147, 0.0025717217940837145, 0.0011092202039435506, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 10604, 15133, -3429, 3063, 31, 7245, 975, 3365, 18837, -4893, -9112, 10872, -15851, 12046, 5171, 8402, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 4.7784251364646479e-05, 6.1860060668550432e-05, 5.0688340706983581e-05, 6.6255495767109096e-05, 6.8797729909420013e-05, 6.3546518504153937e-05, 5.4081061534816399e-05, 4.6284250856842846e-05, 8.5078288975637406e-05, 7.0117137511260808e-05, 5.4812659072922543e-05, 4.8830828745849431e-05, 5.9284080634824932e-05, 4.9338552344124764e-05, 6.7679873609449714e-05, 6.3750077970325947e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -100,26,59,-30,-68,-5,-59,-15,-46,11,-6,-36,45,34,35,-31,20,-11,89,11,1,-39,127,68,44,29,11,27,-68,-119,-95,5,-36,-53,24,28,11,26,3,33,-8,-6,-72,5,-71,-33,2,87,-15,12,-46,-26,-20,3,26,-52,-100,13,-12,74,58,29,5,7,-38,-49,-55,40,-65,-57,3,-10,3,5,-67,-49,-52,7,-33,17,-63,68,74,-77,2,58,16,41,27,-13,0,-22,-39,-41,-68,19, 
  /* [1][0][][] */ 48,21,37,-62,-72,-16,1,10,-15,26,63,-63,13,-17,-78,-29,-1,4,-68,35,-17,-84,13,54,-4,-61,4,-41,68,-103,105,-80,64,16,-12,50,49,78,-18,-34,23,27,-16,-8,1,54,-127,-44,-54,-47,-5,-33,35,-48,-29,52,16,8,-35,18,33,56,-8,-94,-19,-8,-72,2,-5,-7,-94,-11,-56,-21,28,-84,3,26,33,-63,-31,-33,-81,-39,27,-32,-25,17,-82,-3,-54,56,18,67,-62,68, 
  /* [2][0][][] */ 73,-31,24,31,17,-79,61,14,-16,-19,-20,-5,-86,-21,18,-40,-100,-39,-32,37,12,-47,-44,33,-3,-77,0,-17,-31,42,-56,111,-60,127,-26,16,-20,-24,-14,-19,-91,78,64,22,-57,17,-11,-21,25,-3,-26,-40,58,-20,-26,57,32,-8,45,-16,4,35,-38,10,78,13,3,-17,37,42,-39,-6,53,39,58,43,38,-78,60,41,92,-13,-45,32,-47,24,14,57,19,1,-28,28,-41,47,-7,27, 
  /* [3][0][][] */ -3,-6,-31,-2,15,-14,1,-68,-19,52,45,54,35,1,-57,35,16,-39,25,11,7,127,34,-46,3,31,-14,-3,52,-40,55,-17,-12,22,-30,-14,15,48,37,18,-64,-32,-28,18,-37,27,22,2,-21,-36,-7,-33,35,-81,-32,-35,13,82,-18,-2,-3,-13,-31,-1,20,41,-48,11,-29,2,5,-64,-30,-38,31,-6,4,-4,-31,-22,-27,3,-55,4,-20,-29,36,-25,11,28,34,-25,47,17,-40,53, 
  /* [4][0][][] */ 27,9,-43,17,25,22,-48,10,-36,67,86,-16,-11,10,11,-53,10,-10,-36,41,20,-43,60,72,-70,-1,-127,21,-44,-59,6,7,-60,-43,20,58,5,30,19,22,-25,-38,40,-28,-11,10,-25,51,-46,54,14,19,41,-9,-69,19,56,-21,13,0,37,-13,28,9,-44,20,-32,5,-44,22,-40,54,43,-65,-40,-54,31,-52,-16,4,-35,88,-77,-1,-22,21,24,-56,58,1,20,7,-48,-23,34,23, 
  /* [5][0][][] */ -66,37,53,-16,56,-10,68,-30,-8,29,-8,-40,31,-28,-21,-32,-8,-23,49,20,-127,-32,-66,56,-35,-10,49,24,46,-63,-19,34,54,114,-7,32,-1,16,37,-20,-36,104,61,-18,-1,71,50,-5,-7,12,-13,33,16,-26,38,-93,45,-54,-68,-61,66,91,-47,-6,67,-30,-80,-63,-56,-24,-64,3,-21,2,-12,-55,26,-32,-38,-17,116,-31,24,-93,-79,34,20,-14,-57,38,17,8,-23,46,11,90, 
  /* [6][0][][] */ 32,-11,-69,40,-38,-105,85,100,-71,54,-23,78,-127,-66,61,43,-9,-45,-3,-7,4,-14,-64,-61,-54,34,62,33,42,26,96,-53,13,24,16,-81,8,-7,36,58,9,11,-48,-31,-2,-46,-73,10,30,-115,-29,83,49,8,-25,-72,57,32,13,-16,-108,47,-98,-5,27,9,13,39,50,13,7,-53,-30,18,83,38,69,-28,38,-81,0,-52,-71,72,18,-70,34,14,-39,53,26,29,-19,1,-17,99, 
  /* [7][0][][] */ 32,87,-56,-65,-31,-23,31,1,-47,37,-46,-52,-32,26,14,-14,-42,-56,-29,70,-2,127,4,29,-12,9,30,19,41,35,72,-25,75,28,-19,19,5,4,-3,39,-55,-7,19,-65,25,-60,73,-20,48,-74,-83,-41,-58,0,-7,-8,32,26,-96,13,-9,113,21,-26,-11,-7,-54,25,-48,-4,-108,29,23,77,-41,52,-63,61,10,-67,-10,-43,64,-81,32,-13,4,-3,4,80,-80,45,64,-39,-51,19, 
  /* [8][0][][] */ 0,81,-57,38,-32,-30,-83,22,-100,-37,11,-4,-40,48,34,83,13,-46,-2,3,30,-1,13,-20,-42,80,-2,29,-18,-17,-54,-40,-16,-55,-24,-65,-49,34,51,10,-4,-40,25,13,-33,-37,12,-10,-30,-8,56,69,-4,-21,-65,105,-34,30,-6,-37,-43,0,29,47,-37,-62,-44,-4,-44,6,-3,2,-23,-53,-120,-25,-47,32,-73,-43,-39,8,-44,-39,-2,-2,16,28,14,68,-63,-12,-92,-127,15,-62, 
  /* [9][0][][] */ -10,14,-77,42,-28,-31,65,49,-7,41,-22,89,-15,-13,30,127,21,8,64,16,15,16,37,-91,-31,-6,27,-7,6,-13,30,42,-27,1,3,-100,29,-20,-28,-21,-10,20,34,-29,-10,-4,19,28,33,91,29,-9,-59,-72,4,8,3,-7,72,-8,-65,45,-46,-25,87,-5,-28,15,-69,26,29,41,-2,81,-24,-31,-28,25,-48,-11,53,-18,61,-7,25,-11,-14,-29,-44,15,-2,0,62,29,-51,-3, 
  /* [10][0][][] */ 63,-4,-38,7,-43,-41,59,-6,14,-25,-26,3,-83,-19,7,-14,-80,-37,26,17,47,45,14,7,-48,69,34,-18,-41,-83,-29,-7,65,-31,47,8,74,-78,87,112,22,-68,18,-2,-21,-89,-8,56,42,74,-77,-43,-16,17,9,46,13,-58,81,39,-21,55,-73,-14,3,-68,28,57,23,-22,-2,33,127,35,16,-72,28,-49,51,-11,-39,28,33,28,-33,-10,11,40,-31,-22,38,43,61,56,-29,12, 
  /* [11][0][][] */ -61,-51,50,-60,5,-18,-32,-53,49,-42,-7,3,-16,-4,8,3,-76,-15,62,11,-45,31,-82,-90,5,4,-62,35,47,-73,46,-28,14,-6,7,-28,-83,9,-113,7,-72,65,-38,48,16,12,-3,-48,32,-54,-71,-56,26,22,71,-66,-23,-70,13,-60,-40,-51,-36,-126,15,-80,75,70,127,20,93,-23,-38,-8,61,-27,91,28,33,51,34,-13,-32,107,84,6,-3,-22,-83,-73,-5,19,66,37,65,80, 
  /* [12][0][][] */ 37,-28,-6,-43,31,113,-12,25,44,69,13,52,22,51,2,5,-52,36,11,49,124,-6,69,-80,33,32,-64,-78,-19,76,2,19,41,-15,-1,-31,43,0,-29,-22,13,-17,48,51,-22,33,-8,4,-57,38,-6,16,-31,-34,10,26,-30,73,7,61,31,-81,21,-108,-14,94,-15,-33,-11,-39,55,4,-19,20,-11,51,-21,56,-70,-10,-28,31,127,9,-17,76,-29,-58,70,21,-70,50,62,11,-30,-97, 
  /* [13][0][][] */ -19,32,-26,-35,-33,-18,-6,-44,11,-39,-20,-65,63,-93,-39,-81,-3,-42,-82,-27,-83,-34,13,94,-39,19,104,-2,10,-47,59,35,22,-1,-124,127,-34,-61,28,-49,122,18,10,16,-11,-81,46,-31,71,1,-49,18,12,-16,-9,82,59,-56,-33,6,56,37,11,-94,-8,31,-34,38,-70,-45,-71,-7,-52,23,-50,-72,-111,17,43,85,-7,72,38,-92,53,44,30,-16,-5,-7,-3,7,-50,5,-23,-14, 
  /* [14][0][][] */ -6,21,-95,-40,93,90,-90,-22,43,-40,93,-18,31,-21,-45,-67,-61,13,33,127,-1,-33,3,5,7,50,-22,65,0,-13,-34,9,74,-12,-45,18,-16,67,67,21,57,4,34,4,-3,-56,53,-27,26,0,-13,-37,33,14,-35,37,19,69,-89,-7,-9,-69,-32,-111,4,-42,-65,6,-91,64,-29,33,-4,-29,-23,-38,28,-15,-49,-19,24,11,6,-27,-24,60,-6,-26,-30,78,79,21,-7,-39,-60,-61, 
  /* [15][0][][] */ -89,-40,41,-58,16,-40,-54,-88,-19,16,-7,89,-10,-21,37,88,-121,-28,26,-70,39,-34,-28,-92,51,-9,50,-66,-63,-118,-63,46,-41,73,80,-106,-13,-44,26,-30,-17,-12,46,-27,5,4,62,108,-43,-11,18,-40,-46,52,4,-55,-109,-22,117,12,-30,25,-102,24,-60,-25,16,22,59,-81,99,-35,70,-32,-44,-36,17,21,61,-1,-6,82,55,42,8,-20,-127,19,-4,-58,-81,19,55,-48,-17,62, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0020806097891181707, 0.0026934950146824121, 0.0022070589475333691, 0.0028848799411207438, 0.0029955734498798847, 0.0027669265400618315, 0.0023547839373350143, 0.0020152970682829618, 0.0037044573109596968, 0.0030530225485563278, 0.0023866388946771622, 0.0021261796355247498, 0.0025813323445618153, 0.002148286672309041, 0.0029468999709933996, 0.0027757897041738033, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 484, 1156, -2824, -5239, 285, 3898, -1245, -329, -1005, -3767, 15875, -2093, -844, 12937, 10108, -6091, 14910, 2505, -5640, -277, -73, -137, 1897, -2482, 628, -5019, -802, -4595, 204, -10368, 863, -316, 14249, -367, -1907, 86, -1005, -1646, -907, 6909, 763, -250, 1069, -6563, 11492, 18396, 405, 18826, -1436, 16976, 14283, -4958, -784, -54, -100, 11336, -924, 1013, 15678, 7242, 9765, 13687, 9071, -11120, -510, 3145, -2766, 4040, -3676, -2087, 2070, 2164, 14622, 665, -679, 12694, -612, -444, 8551, 820, -989, 19401, -1169, 2957, 17866, 2622, -5642, -3524, -2806, -5963, 13480, 628, 1337, 116, -4987, -4171, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00017004885012283921, 0.00014355289749801159, 0.00012119337043259293, 0.0001222270802827552, 0.00019899760081898421, 0.00021514136460609734, 0.00024509505601599813, 0.00016990583389997482, 0.00016366505587939173, 0.00011820907093351707, 6.2388156948145479e-05, 0.00032540099346078932, 0.00021472740627359599, 0.00010458117321832106, 0.0001315874105785042, 0.00012350713950581849, 0.00010132169700227678, 0.00016803095059003681, 0.00014688566443510354, 0.00011549725604709238, 0.00015093483671080321, 0.00020741332264151424, 0.00017388728156220168, 0.00017366428801324219, 0.00042513682274147868, 0.0001724755420582369, 0.00018364522838965058, 0.00011873523180838674, 0.00015786629228387028, 7.5638381531462073e-05, 0.00022599066141992807, 0.00023399983183480799, 0.0001393124257447198, 0.00015203810471575707, 0.00021561409812420607, 0.00041279906872659922, 0.00015144520148169249, 0.00032016591285355389, 0.00022679539688397199, 0.00010713082156144083, 0.0001508604473201558, 0.0001908882986754179, 0.0001630166225368157, 0.00011027113941963762, 0.00011063190322602168, 8.4660168795380741e-05, 0.00019152741879224777, 9.6500254585407674e-05, 0.00013812481483910233, 7.0185960794333369e-05, 0.00010554039181442931, 0.00011957622336922213, 0.00011546425230335444, 0.00012005923053948209, 0.00017862800450529903, 0.00015536953287664801, 0.00015483261086046696, 0.00016473117284476757, 0.00012668206181842834, 0.00011503685527713969, 0.00013039507030043751, 0.0001654687657719478, 0.00011658895527943969, 8.5035564552526921e-05, 0.00013163631956558675, 0.00019524862000253052, 0.00022419758897740394, 0.00016034040891099721, 0.00018045266915578395, 0.00018797305529005826, 0.00019559489737730473, 0.00013368896907195449, 0.00011652566900011152, 0.00019592353783082217, 0.00020521174883469939, 0.0001005999292829074, 0.00010415810538688675, 0.00013832552940584719, 0.00014663916954305023, 0.00016022962518036366, 0.00018142130284104496, 8.7172593339346349e-05, 0.00020713322737719864, 0.00014136706886347383, 7.6178614108357579e-05, 0.00014222628669813275, 0.00011025781714124605, 0.00018228056433144957, 0.00016989174764603376, 0.00018278717470820993, 9.4475275545846671e-05, 0.00027064693858847022, 0.00014896797074470669, 0.00020068176672793925, 9.5930292445700616e-05, 0.00022391158563550562, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 18,120,-2,20,-43,-9,43,38,60,-62,-78,39,-14,-24,11,-46,-85,10,10,13,30,64,55,98,20,-26,-54,-6,-20,27,12,-22,-60,16,-31,81,-9,43,7,6,17,-28,2,22,-83,-90,8,-29,-28,-111,-5,0,40,56,-23,-23,-78,-71,-68,-127,-127,-4,-90,13,-28,30,12,-35,-14,58,27,-23,-63,-3,48,13,19,-43,-87,14,11,-85,43,-25,-43,-65,-6,22,-121,7,-86,31,76,-2,67,0, -31,-48,-6,82,-21,88,-18,-10,78,32,-126,89,-22,-64,-87,127,-104,81,50,89,127,9,89,127,38,21,19,37,4,119,-1,-127,55,92,4,17,85,77,-24,-127,127,1,91,127,-39,-99,127,-85,-5,-127,-108,-18,34,127,-36,-127,-10,33,-127,-66,-67,-127,-40,109,-30,71,108,-29,9,127,127,-22,-100,15,-32,-127,46,-61,-9,127,-11,-65,127,-75,-83,-57,120,64,113,73,-63,-4,127,-25,127,44, 22,-127,-1,-12,-26,-14,-2,36,24,82,-60,10,-6,23,-3,-88,-16,24,1,7,23,53,38,86,8,-25,26,32,-8,13,-16,-65,-43,-73,-29,51,17,8,15,1,-8,39,-17,51,-33,-40,3,-5,24,-92,20,8,22,-4,16,-13,36,-92,-33,-66,-69,38,-80,6,37,10,-34,-11,-14,3,4,23,-19,-47,-3,13,22,-26,-60,6,8,-116,22,0,-24,-40,-11,-34,-82,-14,-11,29,11,44,16,-7, 
  /* [0][1][][] */ 93,-21,62,127,1,-62,127,42,-16,-124,-94,127,3,-127,-51,29,-77,-62,61,30,-107,-9,-127,-72,-7,53,-127,127,-86,103,125,61,10,57,11,110,-127,66,-17,-36,51,-127,26,65,-127,-70,-5,-113,-113,-100,-106,29,127,-65,78,-29,-127,-9,-59,11,-69,-69,-32,52,-92,-20,79,-110,-51,19,-44,-127,-112,59,127,-104,92,79,-97,-64,127,-94,-27,107,-12,-21,1,94,8,11,-45,16,-12,-103,89,-27, -127,-10,-55,105,-87,-127,-111,-127,89,23,-77,28,-72,-98,-48,126,-127,-127,127,127,26,-127,-99,86,-127,127,16,61,-89,-24,-127,57,-127,89,127,-37,48,127,127,-98,-52,31,16,52,-52,-127,-78,-127,2,-110,-127,127,39,66,50,-54,28,14,94,-7,-61,-35,-127,127,2,-127,127,127,18,56,-85,-80,-20,39,-127,-123,127,127,63,-64,-78,-6,-79,52,-72,-106,127,127,127,127,-127,-127,-98,-75,75,127, 57,-21,88,49,13,-25,16,24,-54,127,-126,63,13,-24,-127,70,31,-30,9,5,-114,3,-83,-64,-1,35,126,-15,127,118,11,-100,-46,-127,-11,127,-112,-10,-41,-27,-21,101,13,96,-6,-34,-9,-106,127,-86,-76,9,53,-87,-127,24,106,-18,-107,62,-37,-51,-3,65,127,-40,-13,-12,-52,-18,-39,-24,-127,-127,-11,-42,9,-28,-127,-58,-73,-127,-11,127,-127,29,-18,-19,-21,-10,-12,38,-23,127,24,-10, 
  /* [0][2][][] */ 21,-113,42,-3,14,12,35,60,-29,-43,-20,-48,20,-21,-15,39,8,13,-8,35,-20,49,-1,-9,16,61,-4,-17,-16,26,0,3,-36,-24,-27,4,62,7,-1,-18,-10,-2,-14,-24,-2,-38,-8,-7,-16,10,-30,31,-20,-8,-37,-5,-7,-7,12,14,-24,-6,45,6,-29,37,-34,-36,23,0,15,65,-22,9,26,5,-26,-26,-6,-8,24,-31,-18,-48,-99,30,-18,-8,-69,35,-9,25,-23,3,17,-32, -46,-1,127,-18,127,71,-23,21,-127,22,-127,-49,127,-34,-70,49,31,50,1,-46,16,26,57,-5,73,-44,-12,35,-8,127,-27,1,-85,16,14,-30,92,48,23,-83,-31,-15,-127,23,5,-3,-26,-64,-7,-73,-23,79,92,-82,-37,-52,-14,127,-21,7,61,-114,101,92,-23,16,-53,12,127,-24,5,84,-85,6,-19,-46,-11,-86,-30,-58,5,-75,-20,-74,-97,127,40,-8,94,48,35,22,-41,-11,-22,-15, 15,83,23,-38,-2,-8,-9,42,-3,76,-9,-11,6,-11,-15,42,1,-4,-2,16,-9,47,-9,-14,10,54,0,11,13,32,-24,-81,-49,-20,-11,-4,58,-27,-8,1,-13,-16,0,13,-14,-43,-9,-14,9,11,-24,4,-18,-30,19,8,4,1,19,57,-28,16,21,-4,45,0,-40,9,26,-6,17,93,15,-22,-1,26,-12,-8,14,9,6,-72,-13,-27,-59,31,-29,-19,-83,33,12,25,-23,17,-20,-30, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0091998372226953506, 0.0077663762494921684, 0.0065566999837756157, 0.0066126245073974133, 0.010765997692942619, 0.011639393866062164, 0.013259922154247761, 0.0091920997947454453, 0.0088544664904475212, 0.0063952459022402763, 0.0033752706367522478, 0.017604565247893333, 0.011616998352110386, 0.0056579611264169216, 0.0071190292946994305, 0.0066818771883845329, 0.0054816198535263538, 0.0090906666591763496, 0.0079466821625828743, 0.0062485337257385254, 0.0081657469272613525, 0.011221298016607761, 0.0094075007364153862, 0.0093954363837838173, 0.023000387474894524, 0.0093311239033937454, 0.0099354172125458717, 0.0064237117767333984, 0.0085407467558979988, 0.0040921228937804699, 0.012226353399455547, 0.012659658677875996, 0.0075369612313807011, 0.0082254353910684586, 0.01166496891528368, 0.022332901135087013, 0.0081933587789535522, 0.017321342602372169, 0.012269889935851097, 0.0057958997786045074, 0.0081617226824164391, 0.010327274911105633, 0.0088193854317069054, 0.0059657949022948742, 0.0059853126294910908, 0.0045802118256688118, 0.010361852124333382, 0.005220774095505476, 0.0074727102182805538, 0.00379714067094028, 0.005709855817258358, 0.006469210609793663, 0.0062467479147017002, 0.0064953416585922241, 0.0096639795228838921, 0.008405669592320919, 0.0083766216412186623, 0.008912145160138607, 0.0068536447361111641, 0.0062236255034804344, 0.0070545226335525513, 0.0089520495384931564, 0.0063075958751142025, 0.0046005211770534515, 0.007121675182133913, 0.010563173331320286, 0.012129345908761024, 0.0086745992302894592, 0.0097626959905028343, 0.010169557295739651, 0.010581907816231251, 0.0072327260859310627, 0.0063041718676686287, 0.010599687695503235, 0.011102190241217613, 0.0054425713606178761, 0.0056350724771618843, 0.007483568973839283, 0.0079333465546369553, 0.0086686061695218086, 0.0098150996491312981, 0.004716136958450079, 0.011206144466996193, 0.0076481201685965061, 0.0041213501244783401, 0.0076946048066020012, 0.0059650740586221218, 0.0098615866154432297, 0.0091913379728794098, 0.0098889954388141632, 0.0051112202927470207, 0.01464230939745903, 0.0080593377351760864, 0.01085711270570755, 0.0051899384707212448, 0.012113872915506363, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 7067, 4355, 1439, -1733, 8142, 12827, 10695, 1826, -333, 11115, 1897, -5149, 4088, 3818, 748, -964, 3380, 8114, -852, 48, 5406, 11173, 11892, -2563, -4664, -980, 19609, -109, 2185, 1384, 11065, -1995, 12670, 2633, 4696, -6121, 1113, -5686, 406, 2470, 3805, 1602, 2013, -576, 1061, 2336, 4636, 5383, 5733, 3776, 7301, 3945, -3458, 1890, 1861, 2654, 2613, 3603, 9652, 1302, -1250, 9381, 4397, 5440, 5272, 9946, -6190, 4630, 6552, -1145, 7456, 1948, 4871, 4404, 4621, 3156, -570, 2120, 3974, 3646, 3097, 3458, 11887, 1421, 3057, 4747, 714, -876, 15608, -533, 644, -1430, 16442, 3590, -168, -874, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.0001046186444000341, 8.4341780166141689e-05, 0.00012399020488373935, 0.00013182248221710324, 8.6193751485552639e-05, 6.421962461899966e-05, 7.3485796747263521e-05, 0.00015391963825095445, 0.00011963734141318128, 6.8022243794985116e-05, 0.00010941041546175256, 9.5070550742093474e-05, 0.00011904645361937582, 0.0001271072105737403, 0.0001451320422347635, 0.00011774249287554994, 0.00016675039660185575, 8.86607012944296e-05, 9.5138231699820608e-05, 0.00012607417011167854, 0.00011049114255001768, 7.6993084803689271e-05, 7.3677067121025175e-05, 0.00010812773689394817, 0.00012331032485235482, 0.00010658930841600522, 4.6241344534792006e-05, 8.5159845184534788e-05, 0.00011792137956945226, 0.00013713388761971146, 7.7554759627673775e-05, 0.00013722824223805219, 6.2352788518182933e-05, 0.00017404925893060863, 0.00014339337940327823, 0.00010593906335998327, 0.00012554448039736599, 9.7972399089485407e-05, 0.00014092089259065688, 0.0001225192827405408, 0.00012280553346499801, 0.0001575801579747349, 0.00017952693451661617, 0.00017552338249515742, 0.00022072384308557957, 0.00015992698899935931, 0.00011333230941090733, 0.00011540696868905798, 0.00010300917347194627, 0.00013987455167807639, 9.8177719337400049e-05, 0.00010898782056756318, 0.00010754192771855742, 0.00018387690943200141, 0.00011495512444525957, 0.00014150160131976008, 0.00012283126125112176, 0.00011059945973102003, 8.2407204899936914e-05, 0.0001519153593108058, 0.00016998393402900547, 8.1182639405597001e-05, 0.00012470793444663286, 0.00012002379662590101, 0.00010233549255644903, 7.6848635217174888e-05, 0.00010044206283055246, 9.734236664371565e-05, 8.818382048048079e-05, 0.00013594976917374879, 8.9702996774576604e-05, 0.00010636536171659827, 9.2628943093586713e-05, 9.4084229203872383e-05, 0.00011941978300455958, 9.3410919362213463e-05, 0.00013561327068600804, 0.00017635156109463423, 9.8180804343428463e-05, 0.00015084550250321627, 0.00013583654072135687, 0.00011690905375871807, 6.326372385956347e-05, 0.00010734090028563514, 0.00010412579285912216, 0.00015039718709886074, 0.00013372255489230156, 0.00024055273388512433, 5.8581070334184915e-05, 0.0001470458519179374, 0.00023038670769892633, 0.00017248225049115717, 5.4669406381435692e-05, 0.0001140741806011647, 0.00016366501222364604, 0.00011254382116021588, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -52,42,3,-29,-24,-57,-62,-39,70,-40,49,-50,85,-101,5,-127, 
  /* [1][0][][] */ -103,65,-100,-121,-66,20,-7,61,-33,12,91,-59,61,127,12,27, 
  /* [2][0][][] */ -41,-7,-73,-1,-9,-40,30,-49,-99,127,66,-4,52,57,-50,104, 
  /* [3][0][][] */ -55,-71,-3,-48,-99,22,-53,-127,-8,17,56,-66,-73,-49,-120,-40, 
  /* [4][0][][] */ 83,17,-34,41,-67,-3,-127,32,15,88,14,55,3,8,-45,-96, 
  /* [5][0][][] */ -97,73,-98,-28,73,-81,-46,-77,88,-23,18,-27,19,-121,-126,-127, 
  /* [6][0][][] */ -18,-43,-21,26,-73,61,22,-26,-14,-42,127,-26,-2,1,-112,1, 
  /* [7][0][][] */ -18,112,127,-91,50,88,-1,-66,39,47,-102,-13,44,3,34,73, 
  /* [8][0][][] */ -46,-4,47,1,61,17,87,127,-82,-20,-57,-78,31,92,-58,-60, 
  /* [9][0][][] */ 27,50,78,44,-121,-21,-90,-91,66,14,127,36,-28,-84,53,-14, 
  /* [10][0][][] */ -25,-109,4,-90,-127,78,38,20,-35,-45,8,39,-14,66,-117,33, 
  /* [11][0][][] */ 99,-52,1,76,-108,-34,62,-16,127,109,-54,35,30,-69,-26,107, 
  /* [12][0][][] */ -73,-52,127,-14,60,-16,14,53,50,-29,96,78,-14,24,-79,12, 
  /* [13][0][][] */ -13,-42,8,18,17,15,127,22,-94,6,14,11,-13,105,76,-58, 
  /* [14][0][][] */ 121,-67,127,12,83,60,83,72,59,80,62,40,44,-27,50,-65, 
  /* [15][0][][] */ 5,127,18,-32,26,119,-86,61,-33,-27,-31,0,-56,105,-26,-43, 
  /* [16][0][][] */ -43,64,127,-44,30,71,-7,-16,3,21,-22,44,100,4,84,125, 
  /* [17][0][][] */ 9,88,87,-127,39,-49,10,-83,-40,66,-31,50,-63,-40,85,-68, 
  /* [18][0][][] */ -75,17,-74,-86,120,92,-58,-61,35,98,125,83,-18,127,-35,-12, 
  /* [19][0][][] */ 50,118,100,78,55,-45,-19,6,-20,127,32,110,55,75,-52,28, 
  /* [20][0][][] */ 95,-13,4,69,-81,-13,-26,39,-30,-44,-127,-52,97,-49,28,-6, 
  /* [21][0][][] */ -75,-70,-28,111,-32,4,-127,75,-5,-3,38,26,-49,43,-53,7, 
  /* [22][0][][] */ -3,9,-85,-50,127,14,-42,57,43,78,46,74,-22,42,-4,34, 
  /* [23][0][][] */ -85,16,-32,8,24,66,118,87,-6,127,-29,-35,-8,31,-71,-32, 
  /* [24][0][][] */ 35,-89,46,3,127,32,74,-32,53,22,47,21,-69,24,-17,-10, 
  /* [25][0][][] */ 127,-61,61,27,11,-10,-28,81,111,-39,-66,-2,122,-70,87,48, 
  /* [26][0][][] */ 54,39,112,106,74,-6,-84,-4,9,70,15,127,43,-74,23,-66, 
  /* [27][0][][] */ -46,55,-85,9,-21,119,27,-117,39,-102,115,3,59,-35,127,106, 
  /* [28][0][][] */ -61,19,-74,-127,46,-82,0,-60,-101,105,-70,22,-25,22,-40,87, 
  /* [29][0][][] */ 85,96,-67,44,42,75,-44,-23,56,38,6,52,-127,1,-34,78, 
  /* [30][0][][] */ -17,85,-127,-66,66,-55,6,7,-70,47,-64,5,-5,58,4,114, 
  /* [31][0][][] */ 11,-111,73,37,65,-59,-68,25,-30,-4,6,-44,-64,57,26,127, 
  /* [32][0][][] */ -50,87,-7,49,-127,79,4,64,11,-125,31,-92,17,52,60,45, 
  /* [33][0][][] */ -74,-16,50,86,0,19,-42,9,-34,-49,25,-12,0,-10,2,127, 
  /* [34][0][][] */ -20,9,-79,-81,62,-19,-6,68,20,-5,8,-15,-47,-24,-37,127, 
  /* [35][0][][] */ 68,-17,21,-6,-5,22,-78,-21,-16,-127,-55,16,-7,-35,51,-25, 
  /* [36][0][][] */ 5,29,-127,-16,19,121,-5,37,-27,10,45,32,8,27,-66,51, 
  /* [37][0][][] */ 62,29,70,-52,62,-127,35,-17,-98,60,-87,-17,8,18,95,26, 
  /* [38][0][][] */ -26,127,22,-46,30,22,73,-102,14,-1,-108,34,-46,-88,-84,13, 
  /* [39][0][][] */ 91,37,-122,-127,-16,-32,20,-76,22,-7,7,-23,54,6,-121,-73, 
  /* [40][0][][] */ -24,33,-75,-92,-37,-21,17,-127,-18,-17,-2,-26,31,79,32,51, 
  /* [41][0][][] */ -40,-82,-25,127,-9,-11,-59,-4,-11,-64,86,-74,-60,-13,1,32, 
  /* [42][0][][] */ -26,59,-25,-127,30,21,9,-24,49,-7,-34,8,66,-18,-28,20, 
  /* [43][0][][] */ 16,59,14,18,127,22,21,19,16,37,-4,-79,-117,-54,-6,-21, 
  /* [44][0][][] */ 71,-13,17,42,-27,1,7,33,21,-37,39,9,127,-1,-48,-19, 
  /* [45][0][][] */ 29,-80,-52,34,-42,-94,3,35,29,-14,-3,32,-68,127,47,-38, 
  /* [46][0][][] */ -10,-77,65,64,-15,-17,-127,53,19,-43,40,-29,28,93,102,120, 
  /* [47][0][][] */ -38,-59,11,75,14,0,67,28,0,-79,-127,-40,43,-25,-77,20, 
  /* [48][0][][] */ -89,95,-21,-27,4,69,-8,-127,18,-32,41,-50,54,-117,-65,-6, 
  /* [49][0][][] */ -61,-3,46,-39,7,-2,116,127,-17,-30,-16,17,-35,18,-45,23, 
  /* [50][0][][] */ 35,7,-59,28,36,-127,-34,1,-57,59,-37,-8,29,-72,-114,-49, 
  /* [51][0][][] */ -38,72,-50,115,-48,57,-48,-78,-55,-90,3,-45,-11,27,-3,127, 
  /* [52][0][][] */ -127,13,13,-6,24,48,63,12,8,-96,-38,-39,-105,-66,-110,-11, 
  /* [53][0][][] */ -57,-82,-43,-127,-40,-20,14,71,42,-57,-60,21,-29,24,77,96, 
  /* [54][0][][] */ -3,-66,2,-14,-47,56,66,-9,-24,-100,53,29,-6,-4,-127,33, 
  /* [55][0][][] */ -22,-33,-49,27,68,-24,72,93,-52,-67,-127,-29,64,-24,-25,38, 
  /* [56][0][][] */ 83,-35,-55,-27,-127,19,-126,4,-8,-32,-29,9,94,-57,52,4, 
  /* [57][0][][] */ -53,2,27,-20,127,27,36,49,-22,56,-2,2,-57,64,-106,-31, 
  /* [58][0][][] */ 26,1,12,-14,43,-21,-59,-50,57,-127,-62,4,-86,-58,-30,52, 
  /* [59][0][][] */ -71,-18,6,9,17,58,-100,-45,79,127,-88,9,-24,-4,-23,-3, 
  /* [60][0][][] */ 25,-51,-2,15,-127,-50,32,-4,-5,53,-27,47,8,-32,33,40, 
  /* [61][0][][] */ 31,32,-88,-8,-49,-29,-127,-72,-10,5,30,111,56,-64,105,56, 
  /* [62][0][][] */ 52,-19,38,-5,-11,39,32,127,-59,121,7,87,33,42,71,87, 
  /* [63][0][][] */ 12,-127,-20,-27,-81,23,58,-36,-18,-30,-5,-22,-36,120,96,43, 
  /* [64][0][][] */ -10,-16,-127,-23,23,45,18,-7,-14,-97,54,-2,54,-40,-52,97, 
  /* [65][0][][] */ -2,-3,55,53,76,-24,98,73,-45,-9,-127,-77,46,113,-74,-3, 
  /* [66][0][][] */ -50,-127,-2,-91,-55,-127,45,-29,8,-36,25,90,-57,-45,-71,77, 
  /* [67][0][][] */ -39,-85,-61,-9,-71,99,-17,-127,-69,-14,-42,-83,13,-22,-63,47, 
  /* [68][0][][] */ 117,41,22,-13,-82,23,-63,-72,-77,-127,-17,-26,37,-36,60,-61, 
  /* [69][0][][] */ 40,6,35,-23,-6,-32,-45,26,-19,127,-31,8,-4,30,55,-23, 
  /* [70][0][][] */ 41,-19,-27,70,-127,27,-12,-94,106,119,39,50,53,-72,-12,25, 
  /* [71][0][][] */ 96,-87,80,109,-65,-35,37,-6,127,11,-59,47,58,-69,15,14, 
  /* [72][0][][] */ -7,-37,39,104,58,-2,-127,98,86,-7,42,12,-57,-75,-73,79, 
  /* [73][0][][] */ 52,24,68,-127,63,-90,-62,40,-6,112,-45,0,20,-83,16,-25, 
  /* [74][0][][] */ 93,6,34,41,-127,-27,38,-1,-72,-42,11,-41,34,-70,6,19, 
  /* [75][0][][] */ 85,121,-116,23,52,61,-26,-24,-14,-17,56,88,-127,60,75,90, 
  /* [76][0][][] */ -77,-46,3,-50,-41,-3,91,2,-59,25,88,42,-48,-127,-29,74, 
  /* [77][0][][] */ -49,127,-14,19,-62,-66,32,71,29,-46,-24,71,-14,64,6,72, 
  /* [78][0][][] */ 110,41,-52,31,-85,21,-127,-22,-2,-24,-80,12,36,-119,26,66, 
  /* [79][0][][] */ -73,-33,127,36,-17,-87,-31,-50,-18,4,11,5,-66,97,-66,71, 
  /* [80][0][][] */ 50,107,44,-127,-1,25,90,-47,22,34,-59,6,96,-55,-2,3, 
  /* [81][0][][] */ 27,-62,12,-104,92,51,-13,127,94,26,-5,-59,-11,8,-82,-63, 
  /* [82][0][][] */ 69,51,82,1,127,-101,21,35,-9,96,-36,18,-7,-40,33,-113, 
  /* [83][0][][] */ -50,62,10,-3,94,50,127,85,-3,40,-37,-69,-69,88,-67,-89, 
  /* [84][0][][] */ 13,-85,-26,89,22,-81,-66,29,-104,77,-86,-31,-127,69,-31,-68, 
  /* [85][0][][] */ -90,53,-31,-5,-17,-45,-49,-32,-27,41,3,-55,-127,-84,-57,30, 
  /* [86][0][][] */ -7,72,94,127,51,-32,55,23,5,35,-54,-64,26,84,-123,-73, 
  /* [87][0][][] */ -24,37,127,-31,-89,-31,26,5,39,-16,3,34,-40,20,-11,-3, 
  /* [88][0][][] */ -32,-82,-96,33,27,22,-12,6,-5,-71,-106,-107,127,-27,2,26, 
  /* [89][0][][] */ 43,25,6,-116,6,-60,-61,49,127,-23,22,-96,0,-47,55,-77, 
  /* [90][0][][] */ 4,64,28,18,-38,23,27,108,3,-45,-7,127,42,19,-29,69, 
  /* [91][0][][] */ -36,-3,-11,55,68,38,-33,-111,-26,20,-11,19,-95,-127,-49,-12, 
  /* [92][0][][] */ -21,66,-4,-21,-127,-13,-82,52,-47,52,85,79,-12,-10,74,7, 
  /* [93][0][][] */ 109,50,87,41,-127,-74,16,21,-22,-71,-31,-82,26,-60,-10,7, 
  /* [94][0][][] */ -41,-127,19,-103,8,40,-13,5,80,-27,6,50,15,49,-56,50, 
  /* [95][0][][] */ -51,-65,-43,-59,113,120,-17,50,81,42,-61,51,-25,127,-75,53, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0017869049916043878, 0.001440572552382946, 0.0021177746821194887, 0.002251551253721118, 0.0014722044579684734, 0.001096882508136332, 0.00125515041872859, 0.0026289746165275574, 0.0020434269681572914, 0.0011618318967521191, 0.0018687492702156305, 0.0016238217940554023, 0.0020333344582468271, 0.0021710135042667389, 0.0024788810405880213, 0.0020110625773668289, 0.0028481262270361185, 0.0015143404016271234, 0.0016249777982011437, 0.0021533691324293613, 0.0018872082000598311, 0.001315055531449616, 0.0012584172654896975, 0.001846840837970376, 0.002106162253767252, 0.0018205642700195312, 0.00078981032129377127, 0.001454545184969902, 0.0020141180139034986, 0.0023422709200531244, 0.0013246489688754082, 0.0023438825737684965, 0.0010649967007339001, 0.0029727921355515718, 0.0024491841904819012, 0.0018094578990712762, 0.0021443220321089029, 0.0016733858501538634, 0.0024069538339972496, 0.0020926510915160179, 0.0020975403022021055, 0.0026914968620985746, 0.0030663518700748682, 0.0029979704413563013, 0.0037700021639466286, 0.0027315812185406685, 0.0019357359269633889, 0.0019711714703589678, 0.001759414910338819, 0.0023890819866210222, 0.001676892745308578, 0.0018615312874317169, 0.0018368351738899946, 0.0031406502239406109, 0.001963453833013773, 0.0024168724194169044, 0.0020979796536266804, 0.0018890582723543048, 0.0014075295766815543, 0.0025947412941604853, 0.0029033557511866093, 0.0013866138178855181, 0.0021300334483385086, 0.0020500277169048786, 0.001747908303514123, 0.0013125882251188159, 0.0017155681271106005, 0.0016626248834654689, 0.00150619528722018, 0.002322046086192131, 0.0015321429818868637, 0.0018167392117902637, 0.0015821186825633049, 0.0016069752164185047, 0.0020397109910845757, 0.0015954750124365091, 0.0023162986617535353, 0.0030121158342808485, 0.0016769454814493656, 0.002576467813923955, 0.002320112194865942, 0.0019968273118138313, 0.0010805556084960699, 0.0018334015039727092, 0.0017784869996830821, 0.0025688104797154665, 0.0022840048186480999, 0.004108683206140995, 0.0010005750227719545, 0.0025115690659731627, 0.003935045562684536, 0.0029460273217409849, 0.00093376310542225838, 0.0019484071526676416, 0.0027954273391515017, 0.0019222683040425181, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -33092, -9245, 6462, -16696, 15881, -18299, 32053, -13538, 15154, -13919, 15005, 16118, -8235, -38059, -1800, 7602, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 6.8625115090981126e-05, 4.9056001444114372e-05, 5.0024867960019037e-05, 5.7700712204677984e-05, 7.7912918641231954e-05, 0.00011623910540947691, 4.5637290895683691e-05, 4.3103853386128321e-05, 8.1256424891762435e-05, 7.8231823863461614e-05, 9.4080591225065291e-05, 6.3320941990241408e-05, 7.0307010901160538e-05, 6.6259141021873802e-05, 5.6294098612852395e-05, 6.1700018704868853e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 29,29,6,13,-24,-82,-20,-8,-21,-66,12,0,54,-62,56,31,-80,-23,46,15,82,14,-69,12,-2,60,127,70,16,67,58,-41,3,2,12,-19,22,25,-18,-1,116,15,14,-12,-12,-4,-3,-31,27,-27,89,2,-71,3,47,33,-15,-36,10,28,-9,30,-60,-8,19,2,68,35,7,-24,27,25,5,35,5,35,66,-31,52,29,-7,46,45,42,-63,10,-9,64,7,10,-98,-19,29,16,97,77, 
  /* [1][0][][] */ 24,48,-53,-16,-8,-56,92,-67,-60,-29,-54,-34,-11,-45,-1,-53,-30,-19,-28,-6,-12,-91,122,-32,6,7,9,63,-46,8,-49,11,-21,29,19,4,-25,47,-65,91,37,12,-9,-38,62,-50,-8,38,-74,6,37,-98,-41,50,70,59,27,29,-70,18,-44,-1,-5,-6,44,35,113,3,-42,-127,17,11,21,56,-23,30,-45,-29,108,-21,49,-4,61,-50,-27,-52,-17,9,-19,-40,23,9,75,-52,-42,61, 
  /* [2][0][][] */ 1,-27,26,-18,68,51,-56,21,-50,41,8,-34,42,-9,22,27,31,-30,-127,-19,-20,-43,-17,28,0,-13,-54,18,-42,-18,-23,76,-23,-47,-11,7,-42,20,-20,-26,70,15,8,37,2,63,2,-16,-92,-3,-28,14,-22,44,5,-67,47,17,50,27,-24,-9,-23,54,32,-12,-42,-6,-15,-3,-21,-39,27,61,34,69,-64,-18,-32,-41,31,33,53,-25,-4,-50,-19,-52,-21,-34,-10,66,-6,-13,93,-52, 
  /* [3][0][][] */ 41,-32,-31,-117,-7,-34,99,-28,27,127,-77,-12,-3,-31,-14,61,55,43,-15,26,-51,17,30,10,-34,65,54,-2,-39,-19,-62,51,9,-14,34,-33,-6,-59,-32,71,18,8,-25,34,57,-46,-15,29,54,-19,26,-27,99,50,27,0,-2,-13,-1,-38,-29,38,71,6,-28,-20,114,-35,-33,-13,-48,30,18,-80,4,-71,30,-46,115,10,2,-50,-26,-33,-37,-34,74,64,-51,54,-62,-6,15,-70,-32,39, 
  /* [4][0][][] */ -32,74,39,12,-14,9,-30,-24,21,-32,1,-19,15,36,-26,19,-11,-47,-19,-71,20,-28,-62,19,-27,-35,-28,18,-44,127,-47,-15,10,-40,2,-36,78,44,-36,6,18,16,14,-42,-40,-8,58,-28,28,-23,-58,-4,-68,28,41,25,10,57,-20,12,-29,-64,-27,4,56,25,-64,-14,1,-2,13,-66,-5,66,58,68,-36,10,-59,39,20,67,32,-59,48,-64,-28,-64,-34,-56,-48,-13,3,2,33,-32, 
  /* [5][0][][] */ -3,-6,41,-14,-8,-20,-10,10,37,7,-22,0,-20,-33,20,-23,-12,3,-50,-33,-18,21,-24,19,14,-43,73,-12,3,44,14,82,-8,-79,24,5,-37,-33,-33,0,-50,5,-22,5,12,24,-72,16,-15,14,51,-9,18,-71,6,17,-20,-58,2,-39,41,29,28,45,-40,6,112,-25,-12,-21,17,21,-4,29,36,15,-7,-18,127,41,-26,-13,-29,27,49,60,1,98,6,-38,-9,14,15,-15,-28,10, 
  /* [6][0][][] */ 17,-65,74,24,-27,126,-46,-103,-20,-86,-92,51,18,14,-34,91,19,23,4,-53,-95,-13,-99,-56,-9,-39,-17,66,-127,63,-16,-28,31,75,-30,-7,4,-29,29,-30,-68,35,43,-46,15,48,-89,-21,41,-2,-82,-115,70,-3,-53,-27,29,-33,22,-35,-25,-55,30,-12,44,-93,-79,-54,-98,17,-26,-79,-27,-88,29,-97,73,11,-88,31,-44,69,11,-106,78,-56,-17,3,-73,69,-72,80,31,-52,82,-113, 
  /* [7][0][][] */ -13,-4,-74,56,-30,-10,36,-9,-97,13,98,65,-1,-52,10,-39,-18,-4,8,-1,-51,-36,-45,-55,84,42,-7,72,-6,32,12,23,-56,-127,31,117,-1,26,-40,8,1,-23,-8,-76,34,62,66,101,-22,52,-61,8,41,-58,44,-54,-23,41,-75,-20,65,0,16,-37,83,-45,118,-19,-64,-23,76,9,-6,-40,-76,-33,38,-39,107,-36,0,-10,-74,-32,48,32,-81,37,-22,25,-4,28,72,4,87,3, 
  /* [8][0][][] */ -8,-56,12,5,-7,-10,13,-6,-11,-4,41,45,10,24,-39,-8,63,-2,20,-1,-10,-78,-30,-24,-19,-37,70,5,-14,45,3,-31,-12,2,6,-5,-46,-22,18,-20,-1,38,21,-33,20,-19,24,-12,37,-8,48,4,-5,15,-46,5,-17,105,-60,2,-11,-61,-57,-1,-83,-32,-15,18,-13,8,42,-19,-21,-127,39,-106,12,14,-61,24,-26,-5,6,65,57,-58,-41,45,-33,86,9,-14,-42,5,-4,-53, 
  /* [9][0][][] */ -23,-20,-33,25,9,17,10,41,-36,-3,57,54,-27,52,30,-52,-14,34,-14,-38,-3,37,-6,13,-21,26,14,23,34,0,23,-14,-10,-17,9,49,-14,-9,26,3,-7,-24,5,-2,15,50,-3,39,-41,10,-11,37,126,17,-9,5,14,-20,40,16,-28,5,85,11,16,30,65,10,30,-2,-25,25,13,-127,-34,-123,-31,-15,41,-4,-6,34,10,-32,44,12,-57,-2,-6,110,34,30,61,38,-11,27, 
  /* [10][0][][] */ 20,46,8,-3,-9,10,-37,-26,58,1,-27,16,24,14,1,-49,-27,-4,23,-6,25,-17,-20,-30,13,-14,-93,39,-27,53,0,5,13,18,-24,9,19,7,10,-5,32,-16,51,-39,-23,-7,18,35,13,1,4,-28,-13,-19,6,31,-13,0,-4,-10,-19,-43,-5,5,0,-8,-86,-25,-45,-15,40,-21,-16,23,32,17,46,-12,-86,4,-13,31,0,-9,9,6,-65,-127,-25,25,14,28,46,-25,19,38, 
  /* [11][0][][] */ 27,-42,-3,9,-57,31,12,8,66,-21,-12,-37,26,12,21,-6,-26,46,20,-68,14,23,8,-30,38,19,61,-4,26,-55,-37,15,10,96,-104,12,16,-11,65,6,-57,44,-17,12,-49,-4,-12,-1,42,-22,-31,-19,-16,17,-77,89,-36,0,-3,-27,18,-6,-11,-64,-10,-46,-127,-75,3,-34,-96,24,47,14,-14,-3,39,61,-112,-44,-16,-4,-18,-7,-26,-6,59,72,18,-42,10,13,-41,36,89,32, 
  /* [12][0][][] */ 26,35,-42,-24,9,-32,5,33,58,-33,18,-3,-3,-17,-7,19,11,-38,-27,22,17,50,5,51,-38,-38,-127,-13,82,-31,32,-1,-17,-73,77,2,25,-11,-9,24,0,-51,16,38,37,3,25,-7,-70,8,-49,97,68,-17,40,-72,6,32,-32,-27,14,48,82,8,-4,-7,35,27,116,28,25,31,-1,-21,-14,-2,-31,-48,51,-64,29,-52,37,-32,-2,9,12,-103,-8,36,-41,23,19,69,9,44, 
  /* [13][0][][] */ -24,24,-73,24,39,15,-12,-4,38,61,-37,32,-38,-29,65,-49,22,41,66,20,-40,-51,-13,12,35,54,-22,19,7,44,60,-29,-10,60,6,39,24,-38,-46,-43,7,-14,10,19,50,51,-38,40,-53,47,7,1,-10,-48,58,36,16,-49,-4,-22,31,21,4,-30,19,95,125,33,30,10,-53,-17,44,54,-74,51,17,-76,127,-44,-6,-45,32,2,30,61,-28,-24,-11,-25,11,43,48,9,69,54, 
  /* [14][0][][] */ 0,63,14,23,-73,-57,14,36,-78,-22,80,17,-95,-9,78,-23,-50,45,-55,37,-27,18,-103,10,-53,-7,-52,-126,19,-14,33,77,-54,40,27,-3,-33,-82,-20,-34,39,-37,42,-10,-16,56,-91,40,-8,-41,95,39,-14,34,-21,33,-67,38,8,54,46,67,-5,53,25,-43,10,-69,50,64,84,43,-60,28,4,10,43,-13,50,30,-63,127,9,-127,79,3,0,5,-121,-15,-31,-2,-21,18,32,46, 
  /* [15][0][][] */ 70,-36,21,28,40,11,-22,-10,16,29,-56,-20,71,71,-12,-13,-7,-2,-80,45,1,-27,14,22,66,-30,78,18,33,-30,-46,62,58,49,-8,-72,61,72,72,47,86,31,-14,1,-48,-127,38,-38,-36,-24,-21,-10,-3,-52,-37,49,-14,6,-16,21,3,-59,-37,25,35,40,-80,40,-2,-40,-11,-6,0,-117,-46,-107,-25,25,-125,26,75,-39,44,25,-57,-6,-1,-20,37,93,18,-70,-34,-32,39,-45, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0035122793633490801, 0.0025107190012931824, 0.0025603063404560089, 0.0029531612526625395, 0.0039876354858279228, 0.0059491954743862152, 0.0023357472382485867, 0.0022060840856283903, 0.0041587585583329201, 0.0040039573796093464, 0.0048151076771318913, 0.0032408081460744143, 0.0035983598791062832, 0.00339118717238307, 0.0028811697848141193, 0.0031578484922647476, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 11078, -947, -8078, 10110, 462, 1299, 397, -1342, 2120, -6290, 1307, -3013, 13118, -4268, -1850, -10234, 359, -316, -16383, -267, -3556, -160, -9981, 26, 103, 9183, -13104, -7179, 222, -4120, 509, -1391, 19106, 234, -3733, 349, 324, 16616, 3881, 13817, -1398, 7696, 871, 8166, 887, -1177, 8814, 3908, -7834, 163, -4995, -101, -304, -4060, 1234, 3267, 414, 1897, 2171, 1759, 41, 918, -1262, 8755, 9251, 92, 20855, 12705, -1177, 1186, 12974, -2227, 129, 1066, -5531, 2, 23484, 12931, 15648, 13488, 17411, -2268, 12453, 10239, -1787, -341, 14211, -10234, 11831, 157, -9576, -1203, -172, 715, 25298, -2511, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 9.9756107374560088e-05, 0.00018621484923642129, 0.00010062503133667633, 0.00011165392061229795, 0.00013607091386802495, 0.00029646995244547725, 7.4798022978939116e-05, 0.00012198487820569426, 0.00024095660774037242, 0.00017973133071791381, 0.00018261060176882893, 0.00014577570254914463, 8.8410110038239509e-05, 0.00011806071415776387, 0.00013019978359807283, 0.00011983925651293248, 0.00016781306476332247, 0.0001600230170879513, 8.3223603724036366e-05, 0.00024162000045180321, 0.00016975108883343637, 0.00014531059423461556, 7.6715979957953095e-05, 0.00011537149839568883, 0.0014519740361720324, 0.00011300551705062389, 0.00018580876349005848, 0.00011661423923214898, 0.0002119942510034889, 0.00014656997518613935, 0.00010702593863243237, 0.00019888445967808366, 6.5318774431943893e-05, 0.00028587077395059168, 0.00010465522791491821, 0.00011224338959436864, 0.00020664682961069047, 7.342984463321045e-05, 0.00016472088464070112, 8.6752530478406698e-05, 0.00033789267763495445, 0.00013909539848100394, 0.00015188266115728766, 0.00010015833686338738, 0.00012462602171581239, 0.00017948387539945543, 0.00012139934551669285, 0.00015584789798595011, 0.00013108695566188544, 0.00028285998268984258, 0.00016680416592862457, 0.00011252437980147079, 8.1399361079093069e-05, 0.00022624435951001942, 0.00018872870714403689, 0.00015914786490611732, 0.00010563268006080762, 0.00027642690110951662, 0.00025799695868045092, 0.00019804676412604749, 0.00016876515292096883, 0.00017908518202602863, 9.7951873613055795e-05, 0.00010217462113359943, 0.00020890145970042795, 0.00029933743644505739, 8.255911961896345e-05, 9.3987604486756027e-05, 0.00015593101852573454, 0.00023077915830072016, 0.00010942469089059159, 0.0001656864769756794, 0.00038324351771734655, 0.0001110862722271122, 0.00010970919538522139, 0.00014307694800663739, 5.515847442438826e-05, 0.00011982137948507443, 9.1068955953232944e-05, 0.00012632041762117296, 5.8789180911844596e-05, 0.00019662012346088886, 7.3992647230625153e-05, 0.00019703239377122372, 7.5225085311103612e-05, 0.00021743337856605649, 9.6674193628132343e-05, 0.00014966964954510331, 0.00010623380512697622, 0.00015486964548472315, 9.9367745860945433e-05, 0.00013745833712164313, 0.00022038408496882766, 0.00013035068695899099, 7.0048823545221239e-05, 0.00019142328528687358, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -32,-6,5,-46,111,-7,29,-17,-5,-9,-16,-20,-25,7,-15,-8,-12,5,-4,-22,-5,34,17,48,-5,1,-14,-2,16,-5,17,12,15,4,2,-40,-4,-95,-47,4,-2,1,25,-17,-24,41,-62,-29,-29,8,-8,46,-70,8,36,-17,3,-8,-3,-21,-4,-23,-2,-21,-13,-24,-49,-44,-20,20,-19,1,22,7,-1,3,-38,17,127,-1,-127,13,-127,-27,-36,-24,33,17,-15,-12,9,-28,-4,31,-5,3, -14,38,63,-82,-39,-7,127,-62,1,-10,-42,12,-45,-7,-102,90,-10,75,76,-35,-8,127,99,127,28,15,50,74,127,32,127,-30,-127,-16,-79,-42,-28,-78,127,-59,-26,-124,-23,-45,58,-23,-31,-8,53,-3,15,127,-97,28,-86,-2,-85,-2,-13,23,-6,-127,-127,-34,-36,-2,-11,-85,-2,10,-54,126,-127,-4,22,-28,-114,-87,0,-86,-96,12,10,-55,127,62,-65,42,-127,3,30,-14,6,127,-49,-78, -27,1,0,-32,67,2,30,-25,-17,22,-15,2,-9,8,-6,-41,-15,4,-4,-26,-10,15,30,33,-8,6,4,-13,4,2,19,13,-40,3,-11,50,-5,-85,-38,25,-7,-18,12,6,-23,-18,-38,-36,-28,-10,-6,40,-4,-10,-3,-12,66,-14,1,-22,-18,-15,-48,9,-14,-36,127,-27,-12,12,-4,9,13,4,5,19,-14,29,-50,-1,-87,3,-114,-19,-4,-37,3,-22,-54,-35,2,59,5,19,-10,11, 
  /* [0][1][][] */ -86,-8,44,-51,57,113,-57,-13,-3,-20,-30,-18,-108,31,12,81,-13,43,124,20,25,-11,114,-28,29,34,59,11,-21,-2,-6,-10,-90,-14,81,-32,-16,-106,-62,-127,-19,2,78,-37,-67,127,-86,-87,66,53,22,-47,-120,53,61,-35,21,-27,25,-16,7,-12,86,-63,-20,14,-24,-50,-7,-12,-127,14,62,127,8,-64,-127,-65,-64,-33,-76,-10,-32,-65,31,16,-88,63,-47,127,74,-89,127,6,-39,-4, 63,127,127,127,-127,-127,89,-62,127,127,-84,-52,-81,127,-25,127,127,-127,127,127,127,-84,90,-110,-127,-127,127,127,-107,127,-22,127,-32,127,127,-109,127,115,8,-21,127,4,-127,-127,127,-18,127,127,127,-127,127,-121,108,127,-127,127,-127,127,-127,127,-111,107,104,-127,127,127,-9,127,-100,-127,-14,-127,6,117,127,62,7,-127,88,-127,21,127,114,127,123,56,-127,127,-64,50,-4,-33,-91,-27,-127,-19, -127,-37,43,-89,2,68,-72,12,-35,-13,-6,127,-127,14,23,57,-24,63,103,7,12,-24,107,-28,27,22,34,-5,-15,-8,12,-8,-99,-30,72,127,-4,-96,-65,-65,-21,-6,19,-33,-66,-56,-82,-124,35,66,-3,-36,127,12,102,-46,104,-24,38,-43,-10,-31,-113,-42,-58,-14,-49,-68,-16,-2,-97,-6,32,-96,-2,127,-84,-33,-61,-3,-89,-19,-59,-83,-8,20,-93,43,-37,-72,127,127,-39,-19,-56,1, 
  /* [0][2][][] */ -27,-43,-15,-13,34,2,-21,14,-8,14,27,-32,34,-2,-13,-38,-2,-10,-47,-23,-5,-17,32,-24,-3,7,-19,7,4,-15,-42,-1,7,-1,-2,-33,-8,-43,-21,-20,-31,-1,25,4,26,16,-57,-8,-29,3,-24,-23,-2,-19,26,-16,7,-18,-1,-18,4,12,0,5,-38,-27,107,29,31,25,-7,3,-2,-10,-4,-31,-20,41,-27,-13,-27,7,-89,-11,-22,-7,35,-2,19,2,-1,-15,-16,-6,-35,-1, -48,-63,26,-115,-43,5,57,127,-53,76,127,-22,-73,15,127,84,-13,-32,78,-50,-19,-39,127,10,14,6,38,17,-3,-1,-113,-50,-45,-32,-85,-15,-87,-127,45,-52,-20,-127,-41,112,18,-16,-36,-11,17,-9,-18,-17,59,25,-66,-42,-38,-45,34,-52,127,18,111,-2,-84,-55,-22,-54,127,25,-31,22,13,-25,25,-25,-6,-21,-5,28,-85,-25,-111,-61,33,-127,-20,6,-15,-1,45,-9,15,-102,-89,127, -29,1,-9,-14,33,-7,-8,21,-19,7,11,37,48,-8,-16,-42,-9,21,3,-27,-9,-8,25,-17,-3,6,-4,-5,-1,-3,-47,4,-4,3,2,0,-13,-51,-17,-1,-34,4,-11,9,6,-4,-38,-2,-38,6,-20,-26,-4,-28,14,-17,76,-10,4,-18,-1,10,-4,18,-27,-33,-30,20,18,18,-13,0,-37,-33,-17,-12,-16,30,90,-12,-13,-5,-67,6,-1,-5,31,-5,16,-1,-22,12,6,-16,-15,2, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0063822376541793346, 0.011913730762898922, 0.0064378301613032818, 0.0071434411220252514, 0.0087056010961532593, 0.018967678770422935, 0.0047854590229690075, 0.0078043993562459946, 0.015416022390127182, 0.01149892620742321, 0.011683137156069279, 0.009326498955488205, 0.0056563387624919415, 0.0075533376075327396, 0.008329976350069046, 0.0076671256683766842, 0.010736414231359959, 0.010238018818199635, 0.0053245141170918941, 0.015458464622497559, 0.01086040586233139, 0.0092967413365840912, 0.0049081668257713318, 0.0073812855407595634, 0.092895001173019409, 0.0072299139574170113, 0.011887750588357449, 0.0074607944115996361, 0.013563056476414204, 0.0093773147091269493, 0.0068473499268293381, 0.012724312953650951, 0.0041789915412664413, 0.018289558589458466, 0.0066956756636500359, 0.0071811540983617306, 0.013220936991274357, 0.0046979249455034733, 0.010538581758737564, 0.0055502895265817642, 0.021617839112877846, 0.0088991029188036919, 0.0097172120586037636, 0.0064079719595611095, 0.0079733757302165031, 0.011483093723654747, 0.0077669378370046616, 0.0099709015339612961, 0.0083867358043789864, 0.018096933141350746, 0.010671866126358509, 0.0071991314180195332, 0.0052078021690249443, 0.014474756084382534, 0.012074563652276993, 0.010182028636336327, 0.0067582116462290287, 0.017685355618596077, 0.016506236046552658, 0.012670718133449554, 0.010797327384352684, 0.011457586660981178, 0.0062668058089911938, 0.0065369703806936741, 0.013365184888243675, 0.019151134416460991, 0.0052820015698671341, 0.0060131782665848732, 0.0099762193858623505, 0.014764885418117046, 0.007000818382948637, 0.010600358247756958, 0.024519313126802444, 0.0071071237325668335, 0.0070190206170082092, 0.0091538364067673683, 0.0035289519000798464, 0.0076659820042550564, 0.0058264476247131824, 0.0080817798152565956, 0.0037612386513501406, 0.012579443864524364, 0.0047339322045445442, 0.012605820782482624, 0.0048127816990017891, 0.013911043293774128, 0.006185061763972044, 0.0095756268128752708, 0.0067966706119477749, 0.0099083147943019867, 0.0063573908992111683, 0.0087943663820624352, 0.014099824242293835, 0.0083396304398775101, 0.0044816127046942711, 0.012246958911418915, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 1531, 9681, 491, 2412, 6901, 19211, -32, 4155, 17043, -1461, 33743, 6769, 3557, 584, 8673, 540, 4162, 5343, -203, 18766, 1458, 13720, -1993, 2638, -16416, 1597, 4066, 2566, 7556, 1190, 6756, 5962, 2235, 12732, 4730, 6334, 5002, 2493, 6882, 4533, 31685, 2206, 3701, 2530, 4813, 15163, 11309, 12065, 1804, -1722, 2776, 10922, 3867, -4535, 12267, 151, 3062, 23620, 2622, 2908, 4492, 15580, 4879, -514, 21779, 22054, 2913, 5206, 9088, 7260, 3363, 2827, -6497, 5796, 2699, 4118, 571, 13399, 6154, 7776, 3951, 1499, 6488, 14563, -522, 16628, 9236, 2956, -1038, 3017, 1806, 14129, 4942, 4716, 8585, 7460, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00018436530081089586, 8.0544064985588193e-05, 0.00018915435066446662, 0.00014466192806139588, 9.9531556770671159e-05, 4.7168596211122349e-05, 0.00019273856014478952, 8.5488296463154256e-05, 5.088809848530218e-05, 9.9037766631226987e-05, 2.6007308406406082e-05, 7.262831786647439e-05, 9.74353461060673e-05, 0.0002442685654386878, 6.7407330789137632e-05, 9.4198716396931559e-05, 0.00014516705414280295, 0.00011497677769511938, 0.00011042968981200829, 4.7274472308345139e-05, 0.00016196683282032609, 5.7064185966737568e-05, 0.00011303118662908673, 0.0001010602863971144, 4.672752766055055e-05, 0.00010145488340640441, 0.00012831827916670591, 0.0001488869747845456, 0.00011382239608792588, 0.00018456028192304075, 9.1884481662418693e-05, 9.0115368948318064e-05, 0.00017921584367286414, 6.6330685513094068e-05, 0.00011421318777138367, 0.00010146347631234676, 0.00011487571464385837, 0.00016067104297690094, 7.4718234827741981e-05, 0.00010209287574980408, 3.0799998057773337e-05, 0.00012006331962766126, 9.97897659544833e-05, 8.6382649897132069e-05, 8.0375262768939137e-05, 5.3287240007193759e-05, 6.1875005485489964e-05, 6.6872620664071292e-05, 0.00017700786702334881, 0.00015105467173270881, 0.00014472808106802404, 6.2770275690127164e-05, 0.00011582212755456567, 8.8100925495382398e-05, 5.9052956203231588e-05, 0.00023233228421304375, 0.00010469074913999066, 3.8501326343975961e-05, 9.1948866611346602e-05, 0.00011293102579656988, 0.00010132810712093487, 5.6904096709331498e-05, 0.00012148929090471938, 0.00016862154006958008, 4.3679370719473809e-05, 4.1340801544720307e-05, 0.00014524522703140974, 0.00011533171345945448, 8.4634375525638461e-05, 7.129622099455446e-05, 0.00016205762221943587, 8.1188518379349262e-05, 8.900562534108758e-05, 0.00010446290980326012, 0.00014008491416461766, 0.00014946282317396253, 0.00013084715465083718, 6.1913422541692853e-05, 9.6539966762065887e-05, 0.00010436527372803539, 0.00010752784874057397, 0.00010921563080046326, 8.1008882261812687e-05, 6.2497740145772696e-05, 7.8233890235424042e-05, 4.685714520746842e-05, 7.9628349340055138e-05, 0.00014522700803354383, 0.00016140502702910453, 0.00017283554188907146, 0.00011927207378903404, 6.0611837398028001e-05, 0.00010299309360561892, 7.9098404967226088e-05, 6.4177067542914301e-05, 8.6839092546142638e-05, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 42,17,3,55,-127,-26,93,50,60,90,-24,42,13,-7,38,79, 
  /* [1][0][][] */ -16,20,-87,-6,127,107,7,1,-27,14,-66,34,-61,83,-49,-41, 
  /* [2][0][][] */ -47,54,67,-9,55,89,14,31,27,-15,38,-24,56,-127,-16,19, 
  /* [3][0][][] */ 127,-30,29,7,42,27,-18,20,40,44,-58,-18,-33,51,-25,51, 
  /* [4][0][][] */ -77,-26,10,29,-126,2,-84,-32,-4,32,-12,-51,-27,37,-45,127, 
  /* [5][0][][] */ -87,8,35,3,127,36,15,4,-51,28,-38,3,-69,57,-98,-39, 
  /* [6][0][][] */ -127,23,-33,26,-2,-79,73,23,16,-22,-63,45,6,10,-35,6, 
  /* [7][0][][] */ 5,117,79,-118,94,40,127,11,72,22,-13,61,112,14,-54,-4, 
  /* [8][0][][] */ -33,-39,-53,71,-59,77,-65,-59,30,-45,90,44,127,55,-108,1, 
  /* [9][0][][] */ -13,-127,-9,71,-33,-73,-12,55,65,58,-1,76,-67,13,-5,-48, 
  /* [10][0][][] */ -47,-74,-116,58,-118,127,64,-90,-1,-85,58,-58,59,117,-112,91, 
  /* [11][0][][] */ -40,-94,-34,29,-14,92,36,-2,18,7,43,-82,28,113,-127,106, 
  /* [12][0][][] */ -11,-75,-73,86,-83,-127,12,69,81,67,-46,104,-21,-52,-13,-17, 
  /* [13][0][][] */ -70,-23,-35,-1,-15,2,30,15,-22,127,-7,-26,42,27,13,-8, 
  /* [14][0][][] */ -110,-32,-45,-43,-20,75,-8,-103,127,-70,66,5,108,-65,-99,-99, 
  /* [15][0][][] */ 3,-127,101,-58,-61,-36,8,55,19,-54,-105,-40,88,-45,-31,-55, 
  /* [16][0][][] */ -20,-26,17,-32,31,31,-12,-19,60,-127,41,-18,1,-3,-71,-84, 
  /* [17][0][][] */ -21,12,37,-58,18,-12,-40,13,105,-52,23,73,89,-73,-18,-127, 
  /* [18][0][][] */ 69,15,-39,-119,5,-29,124,-46,28,62,-5,65,-16,83,-10,-127, 
  /* [19][0][][] */ -33,-17,-30,-74,-127,29,-18,-2,28,-37,27,-125,-21,-18,-5,-2, 
  /* [20][0][][] */ 13,77,85,-109,66,-10,-59,103,-110,-127,29,-100,-52,121,-10,-24, 
  /* [21][0][][] */ 1,-127,-115,13,86,39,72,109,-84,-94,-25,12,125,-106,-29,18, 
  /* [22][0][][] */ 68,-18,79,-20,10,19,80,38,31,125,22,25,9,-5,127,-16, 
  /* [23][0][][] */ -127,-78,-18,62,77,54,23,0,8,13,-9,-108,13,62,43,110, 
  /* [24][0][][] */ 19,-23,36,28,24,-106,10,-65,21,127,-118,72,-22,-68,72,-62, 
  /* [25][0][][] */ 111,-49,103,114,34,18,-4,20,-127,79,66,-57,-7,30,81,-3, 
  /* [26][0][][] */ -27,29,8,39,-64,123,-14,36,-67,-38,-87,29,4,17,44,-127, 
  /* [27][0][][] */ 30,-7,-8,-55,-45,5,-79,8,-111,-26,-75,-34,-69,50,-25,127, 
  /* [28][0][][] */ -73,7,21,6,29,-17,-127,3,2,-29,-4,-14,16,-45,-76,-31, 
  /* [29][0][][] */ -23,-111,-32,85,-26,15,127,16,63,48,-96,62,30,-27,-43,79, 
  /* [30][0][][] */ 30,-46,-58,-3,-127,35,59,-47,14,8,-7,-40,-18,54,-22,61, 
  /* [31][0][][] */ -127,-18,-7,88,-40,14,-42,-2,-29,-61,5,-45,-31,-56,-13,102, 
  /* [32][0][][] */ -115,-73,-86,0,-82,-59,-5,-4,127,64,-60,-55,35,45,44,-26, 
  /* [33][0][][] */ -17,17,-87,49,-127,-107,38,-12,-107,31,-53,-61,-17,103,63,64, 
  /* [34][0][][] */ 31,50,4,28,-70,-29,43,4,28,-127,-20,21,-34,-15,30,80, 
  /* [35][0][][] */ 48,-8,-57,-10,-127,9,85,-45,32,42,-4,-21,23,56,20,61, 
  /* [36][0][][] */ -16,7,-40,64,127,-28,28,61,-78,28,-75,-76,31,-5,6,22, 
  /* [37][0][][] */ -127,47,5,-69,55,-101,-49,-31,-2,-16,-21,47,50,-76,7,-127, 
  /* [38][0][][] */ 41,92,51,-57,-122,-50,-127,-67,-48,-88,42,54,-58,-118,79,-14, 
  /* [39][0][][] */ 0,-39,-8,65,-2,88,98,-62,-40,33,28,-36,-10,110,38,127, 
  /* [40][0][][] */ 102,39,79,83,-58,-49,-4,31,-67,48,-7,-20,-42,-39,127,2, 
  /* [41][0][][] */ -20,-6,6,51,-95,115,1,53,-53,25,-109,14,21,35,50,-127, 
  /* [42][0][][] */ 17,-127,36,-20,120,44,73,11,-23,-113,-107,-31,-18,-8,5,32, 
  /* [43][0][][] */ -25,-88,-25,13,127,-1,-20,91,-58,-48,-127,-61,115,8,-43,42, 
  /* [44][0][][] */ -28,-44,-65,-108,27,86,79,2,-30,-127,-84,66,-30,50,14,92, 
  /* [45][0][][] */ 2,-71,-66,-1,-127,78,-38,-77,80,-41,23,-66,1,1,-55,39, 
  /* [46][0][][] */ 32,-80,-11,1,81,-86,-19,85,-2,-21,30,56,-48,-58,44,-127, 
  /* [47][0][][] */ -87,-48,-38,88,0,33,64,49,-3,120,89,80,-30,90,-28,127, 
  /* [48][0][][] */ 41,-11,-80,-93,32,-64,8,53,46,-76,-2,21,-57,3,-42,-127, 
  /* [49][0][][] */ 48,46,9,32,-8,-18,63,32,-36,127,-40,29,-42,-27,66,96, 
  /* [50][0][][] */ 11,3,11,16,-127,-17,-14,-42,50,19,24,55,-25,-68,23,0, 
  /* [51][0][][] */ 8,3,-8,-127,-37,94,43,-71,-1,15,34,-58,68,97,-33,10, 
  /* [52][0][][] */ 22,-23,-9,-81,79,-101,-6,-40,32,-6,127,-57,42,2,-42,98, 
  /* [53][0][][] */ -47,-65,55,-29,-38,-127,24,-102,1,86,-107,74,-30,-12,27,-78, 
  /* [54][0][][] */ 57,81,51,-5,-127,-55,-114,-106,-22,20,63,84,-84,-59,82,12, 
  /* [55][0][][] */ 18,11,-31,68,-40,19,28,-13,9,127,17,59,-9,8,5,38, 
  /* [56][0][][] */ 43,-107,-84,83,-71,31,4,76,127,7,74,64,-25,-19,46,106, 
  /* [57][0][][] */ 46,33,105,-73,81,-21,-27,16,97,-30,20,127,45,-48,111,-64, 
  /* [58][0][][] */ 61,-45,9,-69,34,12,-4,127,37,73,-7,66,44,21,87,4, 
  /* [59][0][][] */ -63,40,23,-57,3,-88,-4,8,1,33,-112,-103,-127,-58,73,3, 
  /* [60][0][][] */ 45,-36,34,23,17,-30,9,-55,26,127,-21,58,-9,-29,-17,-44, 
  /* [61][0][][] */ 81,61,17,-34,-82,-127,-7,-54,-56,-25,-30,29,-73,-60,90,82, 
  /* [62][0][][] */ -20,92,-45,34,-61,127,-37,17,-56,1,-28,31,-27,34,51,-81, 
  /* [63][0][][] */ 26,5,-55,-127,-16,-51,68,-14,0,-81,-34,37,-37,79,44,-34, 
  /* [64][0][][] */ -44,25,10,-32,54,-70,16,90,-127,-4,-73,-29,-43,84,68,68, 
  /* [65][0][][] */ -61,-15,-48,-3,68,34,-48,-81,-127,-60,9,-30,-126,103,-63,51, 
  /* [66][0][][] */ -16,68,-14,35,-44,127,-25,24,-71,24,-31,55,-30,53,53,-81, 
  /* [67][0][][] */ 18,-20,-40,-24,7,-101,62,-99,-8,39,21,122,-68,-18,-26,-127, 
  /* [68][0][][] */ 14,-127,-19,79,-3,-7,16,86,51,49,50,19,-61,31,-3,-23, 
  /* [69][0][][] */ 9,83,85,-107,45,-2,-47,123,35,95,60,103,107,-87,46,-127, 
  /* [70][0][][] */ 44,30,44,-35,95,9,-98,-47,-127,-89,0,43,-36,53,-104,-8, 
  /* [71][0][][] */ -35,-83,43,-38,75,-29,28,35,-78,96,-127,-57,25,106,-37,43, 
  /* [72][0][][] */ 22,12,68,22,-64,-36,-126,-61,-12,68,-23,75,29,120,-127,-13, 
  /* [73][0][][] */ 3,-40,-26,-36,42,-111,31,-39,66,78,113,-8,20,-25,-68,127, 
  /* [74][0][][] */ 1,-3,-36,78,-84,4,98,32,79,58,39,118,127,21,-65,16, 
  /* [75][0][][] */ -31,43,-31,34,-51,127,-18,26,-31,30,-35,42,-24,45,32,-65, 
  /* [76][0][][] */ -71,85,-71,57,-99,-10,-14,37,42,43,-38,-34,49,-58,-127,55, 
  /* [77][0][][] */ 112,115,-127,108,83,85,85,39,46,4,82,-31,88,46,52,23, 
  /* [78][0][][] */ 16,-37,-8,-66,69,-115,39,-58,47,39,121,-27,11,-12,-44,127, 
  /* [79][0][][] */ -39,61,9,26,-4,-49,-43,-1,-127,-2,53,15,110,50,-74,-50, 
  /* [80][0][][] */ -91,25,65,-2,46,58,2,-127,-84,39,-49,-56,4,-100,8,70, 
  /* [81][0][][] */ 92,80,-35,-9,36,-27,82,113,-112,127,-63,-31,-49,29,121,126, 
  /* [82][0][][] */ 41,127,-45,-68,-31,-48,124,-121,11,7,-58,62,125,-32,57,-49, 
  /* [83][0][][] */ 9,-29,28,36,7,14,-40,-82,74,-22,93,23,35,-50,-44,-127, 
  /* [84][0][][] */ -127,-78,-59,-33,-12,116,109,16,79,64,115,111,70,84,-86,23, 
  /* [85][0][][] */ 94,5,96,-84,81,10,-7,72,10,127,-67,-5,-37,67,98,16, 
  /* [86][0][][] */ -79,66,-36,-2,21,85,19,8,79,29,127,-23,-21,60,-15,-14, 
  /* [87][0][][] */ 10,-56,19,-52,42,-127,31,-29,44,-14,68,-39,34,-43,-40,77, 
  /* [88][0][][] */ -69,61,41,1,102,-39,24,36,-43,-61,97,-50,63,120,111,-127, 
  /* [89][0][][] */ -27,39,-9,24,-33,127,-14,28,-42,16,-43,20,-3,62,24,-85, 
  /* [90][0][][] */ 45,-67,18,19,127,-1,47,32,-9,-85,-104,-18,-11,-13,-53,30, 
  /* [91][0][][] */ -9,68,-11,-51,1,-76,-85,27,-67,18,-124,-127,-107,-86,-16,1, 
  /* [92][0][][] */ 69,42,76,37,-127,-93,17,7,-10,33,-37,-34,-19,-76,25,-10, 
  /* [93][0][][] */ -14,-127,-101,71,-47,-74,-35,119,104,93,-8,70,-61,85,-10,-47, 
  /* [94][0][][] */ 110,10,127,-22,28,-34,27,25,27,101,-12,52,8,-1,116,-17, 
  /* [95][0][][] */ -43,-44,-15,-20,127,1,32,70,-24,-13,-98,-43,24,7,-60,19, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0048339138738811016, 0.0021118023432791233, 0.0049594789743423462, 0.0037929224781692028, 0.0026096394285559654, 0.0012367236195132136, 0.0050534540787339211, 0.0022414361592382193, 0.001334246015176177, 0.0025966926477849483, 0.00068189122248440981, 0.0019042575731873512, 0.0025546783581376076, 0.006404530256986618, 0.0017673674738034606, 0.0024698164779692888, 0.0038061663508415222, 0.0030146010685712099, 0.0028953799046576023, 0.0012394996592774987, 0.004246643278747797, 0.0014961782144382596, 0.0029635890386998653, 0.0026497214566916227, 0.0012251591542735696, 0.0026600675191730261, 0.003364404896274209, 0.0039036998059600592, 0.0029843340162187815, 0.004839025903493166, 0.0024091391824185848, 0.0023627544287592173, 0.0046988991089165211, 0.0017391385044902563, 0.0029945801943540573, 0.002660292899236083, 0.0030119512230157852, 0.0042126686312258244, 0.0019590535666793585, 0.0026767952367663383, 0.00080755178350955248, 0.0031479662284255028, 0.002616409445181489, 0.0022648854646831751, 0.0021073764655739069, 0.0013971496373414993, 0.0016223140992224216, 0.0017533476930111647, 0.0046410076320171356, 0.003960534930229187, 0.0037946568336337805, 0.0016457873862236738, 0.00303676538169384, 0.0023099372629076242, 0.0015483222668990493, 0.0060915704816579819, 0.0027449093759059906, 0.0010094746248796582, 0.0024108272045850754, 0.0029609629418700933, 0.0026567436289042234, 0.0014919808600097895, 0.0031853539403527975, 0.0044211247004568577, 0.0011452388716861606, 0.0010839233873412013, 0.0038082159589976072, 0.0030239070765674114, 0.0022190469317138195, 0.0018693311139941216, 0.0042490237392485142, 0.0021286993287503719, 0.0023336578160524368, 0.0027389356400817633, 0.0036729166749864817, 0.0039187981747090816, 0.0034307097084820271, 0.0016233213245868683, 0.0025312022771686316, 0.002736375667154789, 0.0028192959725856781, 0.0028635482303798199, 0.0021239893976598978, 0.0016386418137699366, 0.0020512312185019255, 0.0012285576667636633, 0.0020877928473055363, 0.0038077381905168295, 0.0042319134809076786, 0.0045316126197576523, 0.003127220319584012, 0.0015891948714852333, 0.0027003982104361057, 0.0020738982129842043, 0.0016826724167913198, 0.002276852959766984, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -6012, 13448, -25705, 1706, 15960, -20650, -51669, -11274, -7449, 8634, -21292, -16152, 6953, -14649, -3336, -3912, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 9.5486306236125529e-05, 0.00010060948989121243, 0.0001086764459614642, 0.00010520619252929464, 7.8711003880016506e-05, 0.00010524272511247545, 7.1696144004818052e-05, 9.7536452813073993e-05, 7.8025703260209411e-05, 7.0741982199251652e-05, 0.00014540819393005222, 0.0001217259414261207, 0.00010161730460822582, 7.6715798059012741e-05, 9.799170948099345e-05, 7.8212069638539106e-05, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 24,40,18,-37,67,67,-41,49,-13,115,1,43,-36,30,-13,46,30,77,45,-57,-75,75,-10,46,61,49,39,50,-46,-49,-10,77,-21,11,-70,48,51,-127,-37,10,18,-35,58,-5,-5,-61,-52,-9, 
  /* [1][0][][] */ -48,7,-76,-46,17,97,-60,17,-10,-29,-47,30,56,-12,-27,-27,-30,-37,1,24,-63,47,-101,-44,-50,-38,49,74,-25,-30,39,-44,10,-61,-37,56,17,-59,127,-32,-20,24,-43,-16,37,49,34,21, 
  /* [2][0][][] */ 2,-1,58,-29,-19,-89,21,25,103,76,-65,18,114,-54,127,87,-68,-20,-36,29,79,-81,-38,-94,8,-38,35,-72,42,47,-41,13,34,-27,66,38,-68,6,-4,-30,25,35,66,-14,16,-87,92,-62, 
  /* [3][0][][] */ 44,8,-25,-36,32,119,12,-12,52,-46,15,-31,-51,11,15,45,-45,-78,41,-121,-12,8,-21,-17,-41,94,127,61,-21,-47,19,40,63,-36,95,43,-38,-63,-1,47,33,9,-9,-1,34,18,-8,-25, 
  /* [4][0][][] */ 93,-9,3,-41,89,77,49,13,68,-14,-95,35,43,-12,8,-21,-89,-112,-34,-100,-15,22,-37,-25,-86,127,-104,121,-58,-47,29,87,34,-50,18,-30,-9,17,-20,34,-55,-11,-3,52,-52,106,-31,-56, 
  /* [5][0][][] */ 1,1,-55,11,-8,57,15,-27,56,54,46,88,53,-23,26,-5,-34,127,-14,39,14,-7,-65,-14,29,-3,-58,-29,-10,33,26,-20,-43,2,47,20,-45,13,-80,4,83,-22,20,42,-22,6,-39,32, 
  /* [6][0][][] */ 54,9,14,74,5,-28,104,-58,-5,55,127,106,44,48,-47,49,43,-33,-81,75,45,-66,-48,55,-89,87,79,-5,106,54,-24,4,86,-52,-110,-14,89,39,4,-5,7,56,47,-31,57,120,26,-8, 
  /* [7][0][][] */ -92,-5,-23,21,-66,-55,21,54,83,112,-61,-77,-92,11,-10,-14,-80,93,5,117,-51,45,31,33,-19,-96,-38,-86,28,34,-13,14,-15,17,12,-13,7,-61,127,14,8,48,31,-10,61,70,-28,-6, 
  /* [8][0][][] */ -15,-87,49,-55,60,-56,73,-34,-20,-103,25,17,-39,8,21,23,-1,8,-41,106,9,39,-22,35,60,-3,-60,-26,-127,-15,-55,-110,7,-62,3,80,-9,27,114,25,15,-4,68,109,-6,-62,-45,73, 
  /* [9][0][][] */ 19,-30,20,-61,43,86,-38,44,18,-31,-38,-13,21,-41,103,-22,13,-116,40,39,-67,41,50,-41,-26,-75,-29,80,51,81,-42,-21,-59,35,-12,127,-24,-39,-46,-20,-28,-3,35,106,64,85,-66,16, 
  /* [10][0][][] */ -16,14,-24,-4,17,23,-56,-44,44,36,62,-4,-33,-10,46,-44,-56,127,2,43,2,-12,15,27,-44,47,1,87,33,9,-29,-6,69,11,-13,22,-6,-43,-33,16,-78,-5,22,-13,15,46,25,27, 
  /* [11][0][][] */ -25,39,-22,35,25,54,7,8,19,20,-127,-74,63,21,-5,-39,-8,21,-39,-44,-5,-7,102,7,45,10,-20,27,-10,18,-13,44,24,-10,-46,-5,40,72,97,21,37,-30,64,-4,-51,-22,80,-1, 
  /* [12][0][][] */ -63,-6,38,19,-58,-55,10,-1,-32,-35,-127,10,67,-90,22,34,42,107,81,-122,-28,42,-35,-72,-2,-11,33,-28,5,12,-21,73,64,77,41,-37,-60,-28,35,2,-32,20,62,-1,40,-13,-33,-40, 
  /* [13][0][][] */ -47,-102,-41,-107,6,25,47,5,-117,18,110,-63,61,34,127,6,117,18,-2,-92,69,-68,110,-8,-69,0,-23,9,-42,-91,-111,18,47,-22,-76,68,38,-52,73,-76,-3,52,59,40,60,-29,102,-55, 
  /* [14][0][][] */ 71,22,-48,-2,-41,14,-92,-30,-28,61,49,43,-11,-69,16,-41,48,-120,29,17,79,-56,21,-9,-5,121,-85,0,-57,-32,-94,-3,127,39,82,-19,-74,7,-28,54,-9,-50,104,-24,-53,-51,-47,61, 
  /* [15][0][][] */ -70,9,44,25,95,0,6,29,19,77,-15,59,58,-18,-36,-16,15,44,-5,-46,30,-41,-54,-60,58,-64,-39,65,-35,12,19,15,-58,4,127,-8,-90,22,58,-19,-51,-21,14,-1,-33,-28,-11,8, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0054595987312495708, 0.0057525257579982281, 0.0062137683853507042, 0.0060153505764901638, 0.0045004412531852722, 0.0060174395330250263, 0.0040993541479110718, 0.005576819647103548, 0.0044612577185034752, 0.0040447982028126717, 0.008313971571624279, 0.0069598965346813202, 0.0058101494796574116, 0.004386361688375473, 0.0056028496474027634, 0.0044719139114022255, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 14295, -569, 20463, 269, 16592, -2325, 29041, 336, 9593, 30374, 1908, 23933, 2589, 10540, 35184, 24117, 265, 118, 2437, 38527, -755, 18410, -481, 14943, 19182, 32844, -357, -2191, -2796, 12932, 22330, -383, -369, 40, -697, 17673, 10017, 29103, 1607, 16412, 27651, 1841, 833, 13877, -126, -19, 45748, 28742, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.6629494035150856e-05, 9.7625917987897992e-05, 6.7284425313118845e-05, 0.00014487524458672851, 0.00011302401253487915, 0.00011045454448321834, 7.0707974373362958e-05, 0.00028661076794378459, 0.00010029560507973656, 6.8798421125393361e-05, 6.8901688791811466e-05, 0.00011456097126938403, 6.6617096308618784e-05, 0.00011681571777444333, 4.6309778554132208e-05, 7.9024757724255323e-05, 8.5413594206329435e-05, 6.573736754944548e-05, 0.00014565970923285931, 5.7216104323742911e-05, 8.8488872279413044e-05, 7.4066818342544138e-05, 0.00010239005496259779, 9.4376911874860525e-05, 6.4758889493532479e-05, 8.1526944995857775e-05, 7.2948729211930186e-05, 4.9214049795409665e-05, 0.00019364155014045537, 0.00011892728070961311, 6.2821076426189393e-05, 0.0003880203003063798, 0.00012691401934716851, 0.00017851736629381776, 0.00012011398939648643, 8.1405058153904974e-05, 0.00012233771849423647, 6.3691251853015274e-05, 9.4869719760026783e-05, 9.9657074315473437e-05, 5.0830229156417772e-05, 0.00017933954950422049, 0.00020411434525158256, 7.5805801316164434e-05, 0.00016513105947524309, 6.5435066062491387e-05, 4.1312701796414331e-05, 5.8179168263450265e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -107,77,-127,65,-114,60,-51,97,-85,-49,64,-64,70,-87,-51,-73,68,76,79,-109,71,-91,89,-95,-104,-58,55,114,-103,-37,-86,101,76,-85,62,-109,-65,-107,96,-45,-8,-92,100,-94,102,64,-91,-94, -125,109,-89,100,-96,127,-50,127,-103,-87,89,-82,82,-91,-77,-88,118,105,127,-127,96,-127,116,-127,-127,-96,80,127,29,-73,-127,96,103,-127,98,-127,-89,-127,108,-51,-124,80,127,-127,-31,114,-92,-120, -44,56,-18,27,-22,70,-26,25,-54,-33,41,-20,40,-60,-34,-13,54,53,68,-28,27,-50,41,-49,-76,-34,23,33,100,-17,-70,13,34,-71,52,-27,-26,-41,38,-34,-124,-42,50,-38,-68,60,-17,-93, 
  /* [0][1][][] */ -98,94,-80,93,-89,101,-103,68,-96,-83,68,-86,72,-100,-99,-105,102,99,-52,-73,90,-105,97,-83,-116,-91,89,95,-127,-66,-120,59,89,34,93,-126,-98,-87,118,-98,-102,-114,91,-89,127,74,-127,-99, -127,127,-126,127,-127,118,-127,123,-127,-127,127,-127,127,-127,-127,-127,127,127,-53,-86,127,-102,127,-122,-127,-127,127,106,15,-127,-121,127,127,49,127,-115,-127,-108,127,-127,-127,127,105,-108,-49,127,-118,-127, -65,92,-92,41,-41,30,-66,38,-49,-25,44,-46,50,-34,-44,-22,86,65,-26,-6,28,-54,47,-49,-113,-61,45,50,126,-43,-92,52,38,20,59,-37,-42,-5,47,-55,-72,-66,41,-55,-97,86,-10,-88, 
  /* [0][2][][] */ -55,41,11,33,-20,42,-40,19,-47,-28,34,-46,31,-45,-30,-61,49,38,-87,-10,15,-38,28,-44,-49,-58,27,-5,-73,-53,-26,14,29,46,33,-77,-33,-56,35,-50,-98,-39,37,-91,79,36,-75,-38, -77,68,-70,45,-55,32,-46,33,-47,-50,45,-66,56,-58,-46,-44,76,59,-106,-12,16,-47,38,-36,-77,-55,46,39,17,-82,-51,31,42,69,58,-71,-42,-40,33,-65,-51,62,28,-87,-21,49,-69,-49, -31,36,-59,23,-28,-8,-17,0,-1,1,28,-26,30,-13,-17,16,48,30,-77,13,15,-10,8,-4,-40,-26,15,11,79,-31,-18,9,9,48,17,2,-16,-9,7,-19,4,-18,17,-34,-38,47,-18,-49, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0037676256615668535, 0.0042458740063011646, 0.0029262842144817114, 0.0063008065335452557, 0.0049155564047396183, 0.004803807009011507, 0.0030751787126064301, 0.01246506255120039, 0.0043619819916784763, 0.002992129884660244, 0.0029966209549456835, 0.0049824006855487823, 0.0028972611762583256, 0.0050804624333977699, 0.0020140705164521933, 0.0034368860069662333, 0.0037147444672882557, 0.0028590008150786161, 0.0063349241390824318, 0.0024884003214538097, 0.0038484924007207155, 0.0032212592195719481, 0.0044530723243951797, 0.0041045704856514931, 0.0028164454270154238, 0.0035457094199955463, 0.0031726320739835501, 0.0021403809078037739, 0.0084217144176363945, 0.0051722968928515911, 0.0027321674861013889, 0.016875490546226501, 0.0055196504108607769, 0.0077639445662498474, 0.0052239084616303444, 0.003540408331900835, 0.0053206211887300014, 0.0027700127102434635, 0.0041260034777224064, 0.0043342113494873047, 0.0022106706164777279, 0.0077997026965022087, 0.0088771898299455643, 0.0032968895975500345, 0.0071817575953900814, 0.0028458533342927694, 0.001796741271391511, 0.002530285157263279, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 2683, -1931, 1398, -3219, 6148, -1294, 6557, -5139, 1830, 911, 3704, 7109, 453, -788, 659, 6411, -2904, 5118, 8721, 1392, -1002, 3716, -842, 7171, 2956, 2536, 1926, -1274, 10938, -472, 4876, -2779, -838, 6286, -1939, 3131, 2506, 1431, 296, 6390, 2980, 10920, -5714, 1980, 9283, 232, 3342, 4155, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00015386426821351051, 0.00019055063603445888, 0.00018392724450677633, 0.00015097777941264212, 0.00013049266999587417, 0.00013255060184746981, 0.00011966953024966642, 0.00010634103819029406, 0.00018232779984828085, 0.00021902367006987333, 0.00012427175533957779, 0.00011148639168823138, 0.00019458135648164898, 0.00020257070718798786, 0.00019599607912823558, 0.00012025115574942902, 0.00015210827405098826, 0.00015302447718568146, 0.00010393199772806838, 0.00019293520017527044, 0.00020881221280433238, 0.00015877801342867315, 0.0001488680427428335, 0.00010856179142137989, 0.00015836849343031645, 0.00015608200919814408, 0.00018147587252315134, 0.00017906443099491298, 8.0732876085676253e-05, 0.00019561153021641076, 0.00010448778630234301, 0.00011628495121840388, 0.00015604589134454727, 0.00012667461123783141, 0.00013903791841585189, 0.00016885300283320248, 0.00017055546049959958, 0.00018105132039636374, 0.00017923027917277068, 0.0001229973859153688, 0.00017517796368338168, 8.1935344496741891e-05, 9.285818669013679e-05, 0.00020626664627343416, 8.916939259506762e-05, 0.00018684848328121006, 0.00015712252934463322, 0.00014965891023166478, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 73,33,127,-46,71,105,-77,-53, 
  /* [1][0][][] */ 8,-82,-127,2,49,27,29,-1, 
  /* [2][0][][] */ -127,-8,-57,-33,57,23,-72,-43, 
  /* [3][0][][] */ 33,67,127,-75,-15,-104,-2,-11, 
  /* [4][0][][] */ -127,19,-58,-27,44,17,-36,-61, 
  /* [5][0][][] */ -107,22,-60,-11,15,32,-81,-127, 
  /* [6][0][][] */ -39,-127,-116,36,94,18,7,46, 
  /* [7][0][][] */ -56,-127,-88,-77,-75,-57,11,76, 
  /* [8][0][][] */ 86,23,-11,-5,87,-81,-127,7, 
  /* [9][0][][] */ -39,48,-49,94,-57,-35,127,-28, 
  /* [10][0][][] */ -26,127,31,64,120,-26,-6,51, 
  /* [11][0][][] */ -82,-40,-30,-17,-96,101,127,-12, 
  /* [12][0][][] */ 71,41,-127,43,-7,-39,-71,-8, 
  /* [13][0][][] */ 72,-35,-70,12,14,-127,-24,-19, 
  /* [14][0][][] */ 2,-77,75,13,127,-99,-56,22, 
  /* [15][0][][] */ -46,-42,-5,127,64,86,-75,29, 
  /* [16][0][][] */ 117,27,-45,25,83,-115,-127,-28, 
  /* [17][0][][] */ 58,127,56,67,38,61,28,-85, 
  /* [18][0][][] */ 29,-12,4,-12,127,1,25,-19, 
  /* [19][0][][] */ 10,126,29,11,-127,20,25,-38, 
  /* [20][0][][] */ -45,24,75,-127,15,33,-14,119, 
  /* [21][0][][] */ -38,84,42,-127,36,40,-4,122, 
  /* [22][0][][] */ -69,-63,-95,12,-127,105,105,-33, 
  /* [23][0][][] */ 107,44,-127,27,18,-54,-66,-11, 
  /* [24][0][][] */ -50,39,10,6,-16,82,-127,94, 
  /* [25][0][][] */ -102,-54,-127,9,-60,-70,68,99, 
  /* [26][0][][] */ 45,-8,-43,-34,114,-11,127,-46, 
  /* [27][0][][] */ 127,-63,22,93,6,30,-24,100, 
  /* [28][0][][] */ 44,62,62,-4,127,-50,48,-38, 
  /* [29][0][][] */ -13,-21,-30,-49,-66,20,127,-43, 
  /* [30][0][][] */ 54,-127,-66,-79,-113,-13,15,-68, 
  /* [31][0][][] */ 13,28,-8,-11,-127,4,-22,-11, 
  /* [32][0][][] */ 44,-53,-57,78,-11,-90,107,-127, 
  /* [33][0][][] */ 54,127,38,31,50,-23,-34,-17, 
  /* [34][0][][] */ -118,-38,127,-5,-23,104,104,10, 
  /* [35][0][][] */ -35,72,127,-13,-59,-62,-39,27, 
  /* [36][0][][] */ -89,8,94,-22,-21,127,68,29, 
  /* [37][0][][] */ -14,-81,-12,-127,-39,-69,56,33, 
  /* [38][0][][] */ 45,-21,79,-62,50,60,-127,5, 
  /* [39][0][][] */ -9,83,-127,-36,-19,5,5,84, 
  /* [40][0][][] */ 71,-56,22,33,13,6,7,127, 
  /* [41][0][][] */ -19,75,127,8,10,80,-59,27, 
  /* [42][0][][] */ 72,-127,-107,-21,-118,1,8,-104, 
  /* [43][0][][] */ -11,-70,27,-59,127,-45,20,43, 
  /* [44][0][][] */ 1,126,127,14,2,59,-75,16, 
  /* [45][0][][] */ -32,46,11,76,-115,59,-127,19, 
  /* [46][0][][] */ -46,-45,64,43,-127,-109,-34,-6, 
  /* [47][0][][] */ -22,55,41,-95,-127,37,-20,64, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.002635064534842968, 0.0032633517403155565, 0.0031499201431870461, 0.0025856306310743093, 0.0022348046768456697, 0.0022700487170368433, 0.0020494486670941114, 0.0018211862770840526, 0.0031225280836224556, 0.0037509780377149582, 0.0021282660309225321, 0.0019093051087111235, 0.0033323813695460558, 0.0034692061599344015, 0.0033566097263246775, 0.0020594096276909113, 0.0026049914304167032, 0.0026206823531538248, 0.001779929269105196, 0.0033041895367205143, 0.0035760975442826748, 0.0027192167472094297, 0.0025494995061308146, 0.0018592186970636249, 0.0027122034225612879, 0.0026730452664196491, 0.0031079382169991732, 0.003066639881581068, 0.0013826233334839344, 0.0033500241115689278, 0.0017894476186484098, 0.0019914847798645496, 0.0026724266353994608, 0.0021694169845432043, 0.0023811499122530222, 0.0028917600866407156, 0.0029209163039922714, 0.0031006673816591501, 0.0030694804154336452, 0.0021064411848783493, 0.00300008081831038, 0.0014032167382538319, 0.0015902802115306258, 0.0035325025673955679, 0.0015271063894033432, 0.0031999489292502403, 0.0026908651925623417, 0.0025630439631640911, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 2931, -462, 23702, -5506, 4438, -15205, 2937, -15492, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 8.548715413780883e-05, 9.6792187832761556e-05, 0.00015804707072675228, 9.1218360466882586e-05, 0.00012641366629395634, 0.00013767306518275291, 7.4855481216218323e-05, 8.3649560110643506e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -50,-45,-15,-71,-7,-20,94,91,-96,-84,-39,9,-60,-6,-71,36,-87,19,16,127,67,-33,8,101,74,73,26,5,-94,-58,-91,-63,-47,108,35,-51,29,-25,96,-3,29,-1,2,-114,43,-37,-27,-85, 
  /* [1][0][][] */ -13,57,-21,-25,-71,58,-26,-47,-31,68,-12,10,57,41,-48,-8,-19,-112,78,-47,127,12,-64,22,52,-1,-87,60,31,-12,64,29,-31,-12,-3,-11,-6,111,-16,-31,70,40,-6,6,104,21,-26,57, 
  /* [2][0][][] */ -23,-34,114,5,86,-45,-12,25,-28,5,-11,42,11,-43,-44,-127,-48,-96,-24,18,-99,21,-40,-33,-44,20,-3,-46,-46,3,-33,-16,-6,-3,24,-10,26,-28,-48,5,37,-28,32,-49,-48,-43,-59,-49, 
  /* [3][0][][] */ 45,24,74,11,17,-37,37,81,-53,-23,55,-27,-74,62,-27,61,68,34,-32,30,-108,-66,127,0,13,-2,-57,-37,-46,67,121,-69,7,-111,-19,50,-13,-75,-15,80,-82,-66,63,-10,-92,-78,67,0, 
  /* [4][0][][] */ 23,-14,69,-28,7,-13,-2,-4,-54,-3,-20,2,45,-75,38,-94,42,47,-10,-38,12,33,20,12,-1,-1,59,-13,27,25,-127,-15,-24,-19,1,15,47,-1,38,1,-36,-9,-69,29,-15,-95,3,24, 
  /* [5][0][][] */ 24,-51,58,31,29,21,28,1,-82,-12,-46,30,29,4,12,-50,88,72,-2,-20,89,-59,127,-82,-11,46,6,47,7,6,-28,-46,-14,-46,-31,8,48,27,69,7,-77,26,33,29,49,-21,71,-2, 
  /* [6][0][][] */ -54,49,-126,98,58,19,45,18,-21,-5,64,-87,-101,-11,-25,36,-127,37,-15,106,17,47,-101,-95,-8,-28,25,75,-33,-40,-50,16,39,83,-55,-32,-23,-10,78,6,70,74,-118,-58,-42,124,-63,-37, 
  /* [7][0][][] */ 39,75,-74,13,8,60,127,77,48,74,-100,-10,-46,1,-74,-51,34,33,114,102,78,2,125,24,113,103,-45,100,-68,27,-5,-79,21,-62,-22,20,7,96,-59,84,-61,45,0,-85,80,-22,59,-41, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0037421705201268196, 0.0042370446026325226, 0.0069184554740786552, 0.0039930520579218864, 0.0055337143130600452, 0.006026590708643198, 0.0032767727971076965, 0.0036617305595427752, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -265, 12371, -301, -452, 395, -1429, 1932, 120, -4554, 386, -9300, -134, 228, -1122, -2481, 4182, 8889, 2730, -396, -3951, -7445, 137, 18402, -5131, -2552, -649, 4917, -7778, -258, 43, -9434, 11088, 5342, -488, 4582, 96, 140, -296, 10359, 769, 6324, -2417, 3263, 6034, -1794, 10974, 15, 1131, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00027289829449728131, 0.00013650633627548814, 0.00070195889566093683, 0.00019649237219709903, 0.00022370718943420798, 0.00026118612731806934, 0.00023007378331385553, 0.00022120581706985831, 8.4747829532716423e-05, 0.00025375804398208857, 0.00017607824702281505, 0.0011602623853832483, 0.00036456077941693366, 0.00050535693299025297, 0.0003671328304335475, 0.00059074372984468937, 0.00013925011444371194, 5.8087247452931479e-05, 0.00020766536181326956, 0.00028863735496997833, 0.00023942107509355992, 0.00021962008031550795, 8.5831721662543714e-05, 0.00034929296816699207, 0.00014046774595044553, 0.00033883959986269474, 0.00048135858378373086, 0.00017959106480702758, 0.0002529374323785305, 0.00031043245689943433, 0.00012484916078392416, 0.00010361479507992044, 0.00013115067849867046, 0.00018778043158818036, 0.00012935051927343011, 0.00032283129985444248, 0.001612952328287065, 0.00035094903432764113, 0.00014125087182037532, 0.00018049745995085686, 0.00015467990306206048, 0.00013080793723929673, 0.00029412881121970713, 0.00018717456259764731, 0.00029552719206549227, 8.1467529525980353e-05, 5.6699187553022057e-05, 0.00015733837790321559, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 2,-47,7,9,-18,-91,-38,44,-42,-2,3,10,42,-4,-14,5,100,22,29,-5,4,-28,-82,22,-7,-19,-2,-14,-61,72,-10,-117,61,-1,-62,-62,-12,-32,3,-6,-18,46,4,-3,-10,66,127,-27, -127,-100,-25,127,-63,55,-92,127,23,8,29,-4,49,25,-6,-40,-37,56,34,6,8,127,7,127,127,-35,-46,43,71,-118,-9,-89,59,-6,-47,-127,20,8,-57,-68,-127,-5,-85,-127,38,52,48,108, -17,-14,10,6,-22,35,34,56,7,-40,18,4,-21,7,-3,6,-65,28,-65,-27,-6,-32,127,22,-62,8,11,0,19,36,16,8,0,-9,-43,73,5,-1,23,62,35,-21,30,-37,-3,29,-27,-18, 
  /* [0][1][][] */ -17,-28,-29,1,32,-107,127,-100,-13,11,33,43,127,17,-2,-32,-28,-22,20,37,63,-73,34,12,-74,127,-81,-11,127,-88,55,-127,-35,7,-89,9,7,-65,-40,14,123,127,5,-111,-57,-58,-4,81, 98,-127,127,3,127,58,-66,-64,33,127,127,-127,-98,127,127,127,127,127,127,127,127,112,-3,0,120,-106,-127,124,29,127,127,-15,-127,127,127,121,-127,127,-127,-127,50,29,-127,-30,127,-127,-12,71, 25,22,-40,-3,-46,127,-115,107,120,-85,32,65,-32,16,11,-63,23,2,-122,19,23,-113,-46,-1,82,-8,-18,127,-83,-36,37,-53,-31,19,97,-22,32,-6,4,-95,125,-2,30,47,-48,85,108,-91, 
  /* [0][2][][] */ -10,11,5,-32,-3,-68,-13,-12,2,3,17,7,-18,-14,-5,0,-60,22,8,-39,1,-18,80,-5,-97,4,45,-22,12,-3,3,47,1,-6,-72,22,-3,-16,26,49,-33,5,5,11,-12,18,-17,15, 41,-27,-35,-32,28,32,122,-116,127,-39,1,11,-76,-22,-24,-66,-23,112,10,24,15,34,-22,-32,-80,60,89,-7,-94,10,-32,-11,-17,-3,-43,4,47,-23,5,120,-120,-4,-11,58,36,50,5,-127, -2,16,4,-23,-15,3,-1,-70,-25,-31,-1,2,25,-9,-15,13,50,43,-28,-16,-5,-16,-59,-10,29,-21,30,-22,-14,1,-10,10,22,-12,-32,-51,-11,4,37,10,-17,-9,5,12,-10,16,60,-56, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.012573392130434513, 0.0062893307767808437, 0.032341733574867249, 0.0090530999004840851, 0.010306983254849911, 0.01203377079218626, 0.010600314475595951, 0.010191735811531544, 0.0039046329911798239, 0.011691533029079437, 0.0081125488504767418, 0.053457401692867279, 0.01679660752415657, 0.023283584043383598, 0.016915110871195793, 0.02721765823662281, 0.0064157461747527122, 0.0026762853376567364, 0.0095678791403770447, 0.013298545964062214, 0.011030977591872215, 0.010118675418198109, 0.0039545716717839241, 0.016093164682388306, 0.0064718467183411121, 0.015611541457474232, 0.022177895531058311, 0.0082743968814611435, 0.011653724126517773, 0.014302724041044712, 0.0057522435672581196, 0.0047739008441567421, 0.0060425763949751854, 0.0086517101153731346, 0.0059596369974315166, 0.014873982407152653, 0.074314430356025696, 0.016169466078281403, 0.0065079284831881523, 0.0083161573857069016, 0.0071266512386500835, 0.0060267853550612926, 0.013551556505262852, 0.0086237955838441849, 0.013615984469652176, 0.003753497963771224, 0.0026123325806111097, 0.007249136921018362, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 4990, 6804, 21959, 2456, 3812, -2540, 9136, 23300, 5948, -1109, 5833, -3680, 30039, -2483, 3370, 30349, -551, 3396, 276, 3568, 5674, 5412, 783, 44931, 9029, 6329, 25242, 2593, 10362, 8106, 792, 1747, 1171, 2616, -508, 416, -3712, -962, 3847, 4139, 6671, 3630, 6332, 8146, 7462, 5696, 3011, 9315, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00012574555876199156, 0.00011885886488016695, 4.3417232518550009e-05, 0.00012399563274811953, 0.00013370206579566002, 0.00015003455337136984, 8.7254607933573425e-05, 4.1722683818079531e-05, 9.0654895757324994e-05, 0.00014794316666666418, 0.00014039073721505702, 0.00013480505731422454, 3.2137479138327762e-05, 0.00016989950381685048, 0.00014481185644399375, 3.5259825381217524e-05, 0.0002072233910439536, 0.00013273893273435533, 0.00017210179066751152, 0.00016352359671145678, 0.0001238326367456466, 0.00013562619278673083, 0.00022037044982425869, 2.4735656552365981e-05, 9.2644957476295531e-05, 8.6366671894211322e-05, 4.214212458464317e-05, 0.00016115640755742788, 7.6002048444934189e-05, 9.1647467343136668e-05, 0.00033203628845512867, 0.00024717350606806576, 0.00013855566794518381, 0.00014781509526073933, 0.00016984660760499537, 0.0001850598055170849, 0.00014241781900636852, 0.0001684726303210482, 0.0001446851238142699, 0.00012936948041897267, 0.00011460496898507699, 0.00014305130753200501, 0.0001324491313425824, 0.00010450165427755564, 9.4818526122253388e-05, 0.00012710227747447789, 0.00021730769367422909, 8.9276189100928605e-05, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 62,127,-87,-87,21,90,18,62, 
  /* [1][0][][] */ 50,-73,39,-127,-53,70,-75,-44, 
  /* [2][0][][] */ -42,127,112,46,121,-1,57,15, 
  /* [3][0][][] */ 91,38,-98,51,-16,-93,-127,-38, 
  /* [4][0][][] */ -46,32,5,-68,-39,115,127,48, 
  /* [5][0][][] */ 31,83,-127,-70,53,78,24,-27, 
  /* [6][0][][] */ -14,127,65,65,81,3,12,-103, 
  /* [7][0][][] */ 127,-20,-37,30,17,11,117,27, 
  /* [8][0][][] */ 62,127,60,92,119,83,112,-99, 
  /* [9][0][][] */ 40,104,-127,-97,9,101,16,62, 
  /* [10][0][][] */ -74,-45,28,-49,-5,-36,-50,127, 
  /* [11][0][][] */ 18,-111,-127,-13,21,-8,45,-10, 
  /* [12][0][][] */ -14,-109,-127,-41,-124,41,-54,41, 
  /* [13][0][][] */ -6,11,-98,108,-127,-33,-3,-19, 
  /* [14][0][][] */ -61,-44,-127,-14,39,-2,-9,-53, 
  /* [15][0][][] */ 22,-104,-127,19,-92,-28,-37,-24, 
  /* [16][0][][] */ 127,-68,-22,66,-87,31,27,110, 
  /* [17][0][][] */ -28,117,127,-28,-51,-7,-28,-23, 
  /* [18][0][][] */ 8,-127,55,82,0,-69,44,-84, 
  /* [19][0][][] */ 127,-43,-57,40,-97,5,39,98, 
  /* [20][0][][] */ -30,-127,75,72,-17,-90,-2,-75, 
  /* [21][0][][] */ -11,-58,-20,-37,127,-4,49,16, 
  /* [22][0][][] */ -127,20,-85,48,54,59,-96,-123, 
  /* [23][0][][] */ -87,-46,74,6,-98,120,127,-47, 
  /* [24][0][][] */ -36,65,0,-38,-41,127,111,13, 
  /* [25][0][][] */ -51,-121,-127,-67,-72,-10,-31,-63, 
  /* [26][0][][] */ -6,65,-10,127,-84,32,-43,4, 
  /* [27][0][][] */ 17,-127,29,74,12,-50,8,-127, 
  /* [28][0][][] */ 11,127,68,50,121,-21,19,-56, 
  /* [29][0][][] */ 104,19,-51,-21,95,-127,-96,28, 
  /* [30][0][][] */ 22,-5,26,-127,18,-25,21,-22, 
  /* [31][0][][] */ 45,-37,8,68,-17,36,18,127, 
  /* [32][0][][] */ -99,-55,26,-50,-59,127,53,104, 
  /* [33][0][][] */ -31,50,51,-34,32,127,-111,65, 
  /* [34][0][][] */ 23,127,-73,-53,22,40,-68,64, 
  /* [35][0][][] */ 12,-127,30,52,-19,-63,44,-74, 
  /* [36][0][][] */ -21,-36,-68,-2,-127,-53,-10,4, 
  /* [37][0][][] */ -50,-127,68,81,-49,-88,-10,-47, 
  /* [38][0][][] */ -75,21,60,-78,-127,-88,-60,94, 
  /* [39][0][][] */ 63,-127,108,66,-14,-72,-23,-99, 
  /* [40][0][][] */ -7,61,18,43,-127,-10,-64,27, 
  /* [41][0][][] */ 108,127,-82,-105,47,16,-7,6, 
  /* [42][0][][] */ -7,-31,-10,17,127,12,41,22, 
  /* [43][0][][] */ 127,28,72,20,-69,-29,53,104, 
  /* [44][0][][] */ 80,35,-36,3,88,-119,-127,25, 
  /* [45][0][][] */ 46,15,15,14,81,-127,-2,-49, 
  /* [46][0][][] */ 61,-41,-11,127,39,63,26,76, 
  /* [47][0][][] */ -74,-79,44,66,-43,27,127,-71, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0028006595093756914, 0.0026472760364413261, 0.00096700736321508884, 0.0027616841252893209, 0.0029778701718896627, 0.0033416345249861479, 0.0019433723064139485, 0.0009292656322941184, 0.0020191050134599209, 0.0032950541935861111, 0.0031268431339412928, 0.0030024363659322262, 0.00071577983908355236, 0.0037840751465409994, 0.0032253123354166746, 0.00078532204497605562, 0.0046153687871992588, 0.0029564187861979008, 0.0038331253454089165, 0.0036420682445168495, 0.0027580540627241135, 0.003020724980160594, 0.0049081859178841114, 0.00055092322872951627, 0.0020634285174310207, 0.0019235957879573107, 0.00093860761262476444, 0.0035893451422452927, 0.0016927503747865558, 0.0020412120502442122, 0.0073952553793787956, 0.0055051548406481743, 0.0030859718099236488, 0.0032922015525400639, 0.0037828970234841108, 0.0041217319667339325, 0.0031719913240522146, 0.0037522951606661081, 0.0032224894966930151, 0.0028813730459660292, 0.0025525314267724752, 0.0031861006282269955, 0.0029499642550945282, 0.0023275059647858143, 0.0021118391305208206, 0.0028308769688010216, 0.0048399707302451134, 0.0019883979111909866, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 7386, 15008, -4465, 7069, -683, 4428, -12008, -18446, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00022578064817935228, 0.00010544015822233632, 0.00014712283154949546, 0.00013374208356253803, 0.00017625780310481787, 0.00016162250540219247, 0.00020991550991311669, 0.00015023119340185076, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -43,-3,34,15,-30,-15,8,5,-41,-9,-65,-58,-23,-62,-11,-30,42,-41,39,42,-17,28,-38,16,-2,-36,59,-17,-3,-18,18,9,83,33,35,-127,19,1,-14,-34,3,-13,41,48,37,5,28,3, 
  /* [1][0][][] */ -1,40,62,-29,-14,47,-52,-30,0,25,-12,-97,13,92,-16,62,-22,20,-27,-57,11,-84,-27,23,-75,-13,1,-111,-24,-21,37,-48,49,84,-40,4,127,-32,1,50,-32,41,-79,-30,117,-25,-34,-24, 
  /* [2][0][][] */ -2,-23,-64,14,-1,50,29,0,-13,45,-3,30,64,-90,19,-63,33,-87,26,33,-22,52,-5,20,-14,62,-27,-68,17,-1,21,-75,-43,-80,30,-28,107,17,-11,-56,-2,25,80,29,127,15,16,25, 
  /* [3][0][][] */ -10,28,-65,44,15,-40,-71,-101,17,-24,-36,-1,7,28,36,77,-6,14,-36,25,5,-98,29,-57,-70,-4,127,-17,-38,7,-67,18,0,-84,13,-13,-19,-40,-23,101,-45,-33,0,18,38,0,-37,40, 
  /* [4][0][][] */ -28,-47,-7,9,28,-25,-12,-10,27,-25,61,-77,7,29,10,13,-17,-27,13,-16,-1,-55,2,-18,15,-10,42,50,31,23,-13,27,-11,2,0,1,-69,83,37,-29,28,-22,-20,-23,-74,13,127,12, 
  /* [5][0][][] */ 48,-26,6,18,26,-41,36,-127,25,-28,-15,120,-85,68,25,-69,-1,-90,16,1,-39,66,-41,-53,-63,77,-31,0,-20,48,-42,-36,27,58,30,-5,-42,-9,-49,-43,19,-38,-50,-8,-37,62,87,18, 
  /* [6][0][][] */ 52,-23,21,-9,-33,-16,-34,16,-40,8,-42,127,-40,-33,-3,58,11,45,16,33,36,-84,-22,18,21,43,-64,3,8,-43,11,35,7,19,-12,0,16,4,0,-5,-6,-11,41,60,1,-40,76,-13, 
  /* [7][0][][] */ -25,-1,-4,66,32,31,6,25,24,4,68,-2,120,109,61,48,44,45,-14,3,21,-18,-89,-27,13,2,-25,59,33,-25,-32,-18,41,7,41,-93,-72,44,42,56,-32,37,81,127,-56,-29,-104,61, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0095956772565841675, 0.0044812066480517387, 0.0062527204863727093, 0.005684038158506155, 0.0074909566901624203, 0.0068689566105604172, 0.0089214090257883072, 0.0063848253339529037, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 13375, 5587, 4568, -71, 407, -1640, -617, 31373, -127, 2039, 5949, 57997, 10, 3472, -60, 12226, -1669, 13673, 653, 7799, 11848, 164, 4078, -8794, 12953, 369, 1786, 13600, 1247, -1958, -8371, 10614, 6393, 2034, 10, 4005, -9658, 10455, -1111, 19216, 161, 340, 3318, 1314, 193, -527, 945, -392, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.5632618467789143e-05, 0.0001141266620834358, 0.00017764106451068074, 0.00016272267384920269, 0.00063578388653695583, 0.00016123766545206308, 0.00015890250506345183, 9.5484581834170967e-05, 0.00013076518371235579, 7.7131429861765355e-05, 8.1272512034047395e-05, 5.3403840865939856e-05, 0.00010697846300899982, 6.5586769778747112e-05, 0.00027565719210542738, 0.00015845184680074453, 0.00012412165233399719, 0.00031926186056807637, 0.00013157424109522253, 0.00015242831432260573, 0.00010692891373764724, 0.00043631508015096188, 0.00013100994692649692, 0.00025928695686161518, 0.00010143339022761211, 0.00012389897892717272, 5.7454242778476328e-05, 8.7227905169129372e-05, 0.00016934795712586492, 0.00083604245446622372, 0.00023911130847409368, 0.00010002878843806684, 0.00010613779886625707, 0.00015978171722963452, 0.00018963585898745805, 6.3106868765316904e-05, 8.6187166743911803e-05, 4.5427539589582011e-05, 0.00013261067215353251, 6.9797541073057801e-05, 0.00015395773516502231, 0.00013227274757809937, 8.3550577983260155e-05, 8.2469494373071939e-05, 8.9846333139576018e-05, 0.00037205943954177201, 7.0204026997089386e-05, 0.00019312310905661434, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -46,-83,-7,-22,127,-49,54,-54,-82,-89,-24,-45,98,29,76,-116,62,-29,3,-39,-83,81,-10,17,-26,90,73,-28,63,-62,15,-26,-121,-76,43,70,23,75,115,-85,-117,-26,26,83,42,-127,92,71, -60,-121,-69,44,-85,96,70,-56,-71,38,67,-115,127,88,115,-71,-72,-88,36,-70,-61,79,-73,104,-92,127,91,-125,80,-43,-3,-117,-41,-79,73,127,112,114,127,-79,-127,-84,61,94,80,103,91,78, -2,-53,-71,94,-42,-30,27,-9,88,30,52,-76,18,55,-42,1,-84,-26,38,-45,-32,11,-75,0,-73,52,11,-103,22,50,127,-64,30,17,-16,56,90,68,43,0,-17,89,51,44,31,33,19,-99, 
  /* [0][1][][] */ -127,-97,-6,-62,-75,-67,87,-116,-127,-127,76,-76,86,45,-108,-69,127,-127,-57,-82,-100,118,-53,9,-16,118,116,-50,-108,-68,-3,-40,-96,-127,-127,68,49,88,-1,-97,46,-27,76,123,70,101,127,-127, -123,-127,-127,-95,-23,127,127,-127,74,61,127,-127,93,127,69,-127,65,-98,-127,-127,-127,127,-127,127,-122,121,127,-127,-127,127,-4,-127,-127,-95,48,120,127,127,-24,-127,84,-118,127,127,127,-6,127,97, -37,-49,-124,127,74,-45,38,-26,68,36,14,-63,6,67,62,-64,-18,-6,-13,-72,-80,31,-63,-16,-127,42,21,-98,-57,41,111,-81,-73,15,60,86,96,75,-32,-38,41,127,62,16,43,-40,19,21, 
  /* [0][2][][] */ -113,-26,32,14,-44,-16,11,-50,25,-51,12,-47,9,17,-47,-19,-75,-30,102,-34,-1,59,-64,-7,-13,45,74,-7,25,61,-9,6,11,-76,-45,33,23,14,-50,-60,7,-8,38,37,27,48,15,-64, -111,-43,-27,-61,93,50,58,-51,93,13,-41,-60,3,40,-127,-87,41,-1,56,-71,-31,35,-61,52,-57,80,78,-35,28,7,-23,-44,-71,-30,-64,54,29,17,-89,-81,13,-52,80,70,33,-108,27,-3, -41,-29,-63,-13,-24,-10,14,-22,-60,20,-19,-23,-9,13,31,-35,37,29,1,-40,-37,4,-10,-25,-45,16,16,-27,1,-57,55,-23,-102,23,16,55,32,20,-40,-42,3,46,18,34,16,-2,10,41, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0040643862448632717, 0.0048503829166293144, 0.0075497450307011604, 0.0069157136604189873, 0.027020815759897232, 0.0068526007235050201, 0.0067533561959862709, 0.0040580946952104568, 0.0055575203150510788, 0.0032780857291072607, 0.0034540817141532898, 0.0022696631494909525, 0.0045465845614671707, 0.0027874377556145191, 0.011715429835021496, 0.0067342035472393036, 0.0052751698531210423, 0.013568628579378128, 0.0055919052101671696, 0.0064782034605741501, 0.0045444788411259651, 0.018543390557169914, 0.0055679227225482464, 0.011019695550203323, 0.0043109189718961716, 0.0052657062187790871, 0.0024418053217232227, 0.0037071858532726765, 0.0071972878649830818, 0.035531803965568542, 0.010162230581045151, 0.0042512235231697559, 0.0045108562335371971, 0.0067907227203249931, 0.0080595239996910095, 0.0026820418424904346, 0.0036629545502364635, 0.0019306704634800553, 0.0056359535083174706, 0.0029663955792784691, 0.0065432037226855755, 0.0056215915828943253, 0.0035508994478732347, 0.0035049535799771547, 0.0038184691220521927, 0.015812525525689125, 0.0029836711473762989, 0.0082077318802475929, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 1809, -756, -799, 2187, 25558, 2874, -919, 7777, 2249, 2330, 632, 5993, 1942, 1065, -2059, 1007, 5892, 17620, 5399, -1517, 1703, -2602, -160, 4684, -513, -1279, 2988, -95, 6444, 28622, 3754, 29, 888, -199, 5161, -3, 919, -388, 1833, 1882, 3676, 3849, 290, -583, 1521, 4010, 2671, -397, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.0002645431668497622, 0.00023854423488955945, 0.00016329213394783437, 0.00017934948846232146, 3.8440262869698927e-05, 0.00020254519768059254, 0.00027167997905053198, 0.00011508361058076844, 0.00018724857363849878, 0.00028091444983147085, 0.00017687604122329503, 0.0001553996407892555, 0.00012925064947921783, 0.00020856944320257753, 0.0001581394171807915, 0.00017875809862744063, 0.00012651822180487216, 5.0830447435146198e-05, 0.00013665905862580985, 0.00018484247266314924, 0.00023788287944626063, 0.00010783317702589557, 0.0002519165282137692, 0.00016218538803514093, 0.00024947273777797818, 0.00042497899266891181, 0.00017391009896527976, 0.00042564104660414159, 0.00013012613635510206, 3.4582713851705194e-05, 0.00018612491840030998, 0.00043077484588138759, 0.00022519919730257243, 0.00021884962916374207, 0.00014661323803011328, 0.00019742411677725613, 0.00021375276264734566, 0.00033774517942219973, 0.00022700383851770312, 0.00029775590519420803, 0.00016557677008677274, 0.00017705096979625523, 0.00018385118164587766, 0.00025537164765410125, 0.00021212897263467312, 0.00012569295358844101, 0.00014794025628361851, 0.00018734054174274206, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -37,28,0,-16,-81,-30,-127,30, 
  /* [1][0][][] */ 86,-70,-56,-58,127,-80,89,25, 
  /* [2][0][][] */ -97,122,-47,-127,56,-27,-32,37, 
  /* [3][0][][] */ 55,23,95,7,91,120,127,-7, 
  /* [4][0][][] */ -65,-127,64,15,-51,-115,2,-42, 
  /* [5][0][][] */ 127,-27,60,70,-66,-8,2,-22, 
  /* [6][0][][] */ 27,31,127,-25,47,-36,-42,28, 
  /* [7][0][][] */ 25,5,-127,-31,-36,96,97,-71, 
  /* [8][0][][] */ 1,127,-25,18,64,90,39,48, 
  /* [9][0][][] */ 8,116,-65,82,21,-127,39,117, 
  /* [10][0][][] */ 4,-127,-7,-32,-72,-125,-58,-84, 
  /* [11][0][][] */ -127,-78,97,45,-6,-64,95,58, 
  /* [12][0][][] */ -23,39,-127,73,35,-58,-67,88, 
  /* [13][0][][] */ 86,-127,92,76,12,32,32,-56, 
  /* [14][0][][] */ -22,101,-38,-127,-27,-113,-33,-65, 
  /* [15][0][][] */ 33,112,32,-17,35,-65,95,-127, 
  /* [16][0][][] */ -109,-127,-63,91,-58,22,-13,65, 
  /* [17][0][][] */ -23,-127,-127,103,-70,84,-45,74, 
  /* [18][0][][] */ -89,-84,-58,90,-4,65,2,127, 
  /* [19][0][][] */ 59,-120,107,-127,18,-68,28,-31, 
  /* [20][0][][] */ -10,71,26,14,39,127,72,-4, 
  /* [21][0][][] */ 30,114,49,-29,42,-65,95,-127, 
  /* [22][0][][] */ 20,12,102,18,-7,127,33,-33, 
  /* [23][0][][] */ -111,-61,28,-83,104,105,-66,-127, 
  /* [24][0][][] */ -89,-95,40,-85,104,100,-40,-127, 
  /* [25][0][][] */ 127,12,-59,-14,18,33,-63,-12, 
  /* [26][0][][] */ -127,-29,-119,-25,-48,-31,16,0, 
  /* [27][0][][] */ 81,31,-2,-61,-127,-27,89,87, 
  /* [28][0][][] */ -127,-81,-4,47,-75,-91,11,1, 
  /* [29][0][][] */ 127,85,37,-114,33,9,-59,-103, 
  /* [30][0][][] */ -83,-61,38,-68,69,79,-49,-127, 
  /* [31][0][][] */ 52,48,-3,127,10,-78,6,5, 
  /* [32][0][][] */ -20,127,-2,31,27,64,-20,44, 
  /* [33][0][][] */ -34,127,-76,21,19,-28,-18,-1, 
  /* [34][0][][] */ -127,-117,-40,101,-18,16,21,107, 
  /* [35][0][][] */ -52,127,-26,-1,67,101,47,72, 
  /* [36][0][][] */ 68,26,0,-37,-127,-33,99,103, 
  /* [37][0][][] */ -67,114,25,19,-127,103,-26,-99, 
  /* [38][0][][] */ 31,45,21,22,127,69,109,56, 
  /* [39][0][][] */ -20,-73,39,-17,7,41,-90,127, 
  /* [40][0][][] */ -77,-51,-68,127,-34,-6,3,69, 
  /* [41][0][][] */ 127,14,45,107,-47,-11,-3,-32, 
  /* [42][0][][] */ -41,9,-75,-127,57,-103,10,88, 
  /* [43][0][][] */ 27,-8,81,-2,32,127,91,4, 
  /* [44][0][][] */ -27,-27,-71,127,46,10,-34,-41, 
  /* [45][0][][] */ 65,127,120,-120,51,-51,35,-115, 
  /* [46][0][][] */ -39,-122,-42,37,-7,42,-63,127, 
  /* [47][0][][] */ 32,49,127,-4,90,112,113,-18, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0048735141754150391, 0.0043945517390966415, 0.0030082291923463345, 0.003304043784737587, 0.00070816103834658861, 0.0037313639186322689, 0.0050049908459186554, 0.0021201136987656355, 0.0034495638683438301, 0.0051751118153333664, 0.0032584771979600191, 0.0028628308791667223, 0.002381104277446866, 0.0038423449732363224, 0.0029133039060980082, 0.0032931489404290915, 0.0023307662922888994, 0.00093641766579821706, 0.0025175847113132477, 0.0034052375704050064, 0.0043823681771755219, 0.0019865434151142836, 0.0046409009955823421, 0.0029878404457122087, 0.0045958808623254299, 0.0078291231766343117, 0.0032038374338299036, 0.007841319777071476, 0.0023972326889634132, 0.00063709577079862356, 0.0034288633614778519, 0.0079358965158462524, 0.0041487044654786587, 0.0040317303501069546, 0.0027009642217308283, 0.0036370214074850082, 0.0039378339424729347, 0.0062220687977969646, 0.0041819503530859947, 0.0054853716865181923, 0.0030503177549690008, 0.0032616998068988323, 0.0033869757317006588, 0.0047045527026057243, 0.0039079198613762856, 0.002315562916919589, 0.0027254112064838409, 0.0034512579441070557, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -7395, -3241, 12384, -10189, 22750, 7188, -8866, 11050, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00017559459956828505, 0.00022550148423761129, 0.00018288999854121357, 0.00023128335305955261, 0.00018767226720228791, 0.0001557939249323681, 0.00016600599337834865, 0.00027744483668357134, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -12,-12,-16,-65,-25,-34,20,-18,40,6,-36,-5,108,127,-20,-107, 
  /* [1][0][][] */ 127,-59,-38,19,-47,69,-69,-38,-37,82,-35,-50,-8,5,-63,-20, 
  /* [2][0][][] */ -40,-93,39,40,43,-56,-77,-19,34,-93,30,-127,46,-27,-75,21, 
  /* [3][0][][] */ 39,15,13,16,-13,69,-55,-20,127,44,12,21,1,-15,14,25, 
  /* [4][0][][] */ -89,-39,-25,-127,-14,37,51,-120,29,-19,-44,-39,-120,33,-42,-28, 
  /* [5][0][][] */ 90,50,69,-25,52,-48,-127,-122,-15,-77,70,49,-53,52,60,-42, 
  /* [6][0][][] */ 101,43,-127,-72,27,-70,4,-85,-38,20,-125,90,93,-90,9,73, 
  /* [7][0][][] */ -127,1,96,-26,-61,0,-1,-58,-50,62,84,-31,63,-24,32,28, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0075069060549139977, 0.0096404924988746643, 0.0078187938779592514, 0.0098876748234033585, 0.0080232424661517143, 0.0066604004241526127, 0.0070969797670841217, 0.011861140839755535, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 20734, -544, 25, 3026, -1086, 470, 10839, 1988, -743, 262, -2385, 3058, 1011, -457, -395, -1285, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00011119835107820109, 0.00019297578546684235, 0.00014551039203070104, 0.0001467681722715497, 0.00088646711083129048, 0.0006706558633595705, 0.00014918220404069871, 0.00056464574299752712, 0.00030282975058071315, 0.00082667497918009758, 0.00025115165044553578, 0.00018740847008302808, 0.00010124941763933748, 0.00024955836124718189, 0.00019547069678083062, 0.00045661590411327779, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 4,-6,7,4,-17,10,4,16,-8,-10,0,-8,-5,-9,4,1, 7,0,3,3,13,-2,9,-27,-7,10,-3,82,-11,21,9,1, 3,-7,-3,5,2,-14,-5,11,5,3,-4,-6,1,-5,-9,-1, 
  /* [0][1][][] */ 13,-7,-1,1,127,-25,-127,-21,127,127,1,-6,105,-26,-1,-17, -127,127,127,-2,-83,-92,-16,-103,18,-103,127,127,127,127,127,127, 21,-6,-10,-1,-10,127,4,-10,1,-12,-4,-5,9,-5,-17,-7, 
  /* [0][2][][] */ 4,-1,-2,-15,-15,15,54,6,-9,-7,-3,0,0,-1,-10,-9, 25,-10,-3,-127,8,-16,-10,127,-5,2,0,-19,-5,-59,-6,-34, 5,-4,0,-3,1,-5,-2,-2,4,3,-5,2,0,-7,-8,-10, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0047259298153221607, 0.0082014705985784531, 0.0061841914430260658, 0.0062376474961638451, 0.037674851715564728, 0.028502874076366425, 0.0063402433879673481, 0.023997444659471512, 0.012870264239609241, 0.035133685916662216, 0.010673944838345051, 0.0079648597165942192, 0.0043031000532209873, 0.010606230236589909, 0.0083075044676661491, 0.01940617524087429, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 2533, 1506, -745, 94, 78536, 62260, 9845, 11314, 12933, 10978, 2680, 337, 10487, 6791, 982, 31254, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00011655122216325253, 0.00029678040300495923, 0.0001216915698023513, 9.4051894848234951e-05, 1.7507425582152791e-05, 2.3750271793687716e-05, 7.5661439041141421e-05, 2.2238526071305387e-05, 7.7448246884159744e-05, 2.7911015422432683e-05, 0.00020689875236712396, 0.0002228732337243855, 0.00015883328160271049, 1.4146146895654965e-05, 0.00022868323139846325, 2.7915199098060839e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -85, -109, -30, 
  /* [0][1][][] */ 67, -36, 16, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 102, -94, -11, 
  /* [1][1][][] */ -127, 102, 22, 
  /* [1][2][][] */ 12, -3, -14, 
  /* [2][0][][] */ -23, -2, -46, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -11, -92, -77, 
  /* [3][0][][] */ 121, 127, 60, 
  /* [3][1][][] */ 3, -20, -11, 
  /* [3][2][][] */ -100, -125, -41, 
  /* [4][0][][] */ 32, -55, -4, 
  /* [4][1][][] */ 27, -127, -3, 
  /* [4][2][][] */ 16, -94, -19, 
  /* [5][0][][] */ -60, 26, -3, 
  /* [5][1][][] */ -127, 27, 1, 
  /* [5][2][][] */ -85, 18, -3, 
  /* [6][0][][] */ -19, 78, 127, 
  /* [6][1][][] */ -53, 54, -18, 
  /* [6][2][][] */ -39, -53, -89, 
  /* [7][0][][] */ 42, 32, -11, 
  /* [7][1][][] */ 127, 77, -1, 
  /* [7][2][][] */ 29, 1, -26, 
  /* [8][0][][] */ -23, -32, 52, 
  /* [8][1][][] */ -56, -90, 127, 
  /* [8][2][][] */ -28, -64, 96, 
  /* [9][0][][] */ -19, 52, -6, 
  /* [9][1][][] */ -10, 127, -7, 
  /* [9][2][][] */ -4, 86, -2, 
  /* [10][0][][] */ 25, 88, 11, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 12, 41, 17, 
  /* [11][0][][] */ 6, -20, 9, 
  /* [11][1][][] */ 64, -95, 35, 
  /* [11][2][][] */ -86, 127, -47, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 87, 31, -6, 
  /* [13][1][][] */ 127, 95, -13, 
  /* [13][2][][] */ 66, 89, 25, 
  /* [14][0][][] */ -31, -28, 47, 
  /* [14][1][][] */ 43, 97, -127, 
  /* [14][2][][] */ -16, -70, 80, 
  /* [15][0][][] */ -87, -27, 24, 
  /* [15][1][][] */ -122, -127, 16, 
  /* [15][2][][] */ -12, -66, 0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.030778622254729271, 0.078373193740844727, 0.03213607519865036, 0.024837043136358261, 0.0046233269385993481, 0.0062719257548451424, 0.019980527460575104, 0.0058727068826556206, 0.020452383905649185, 0.0073706870898604393, 0.054637424647808075, 0.058855932205915451, 0.041944384574890137, 0.003735687118023634, 0.060390226542949677, 0.0073717921040952206, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023391075432300568, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.054281812161207199, } };
const TfArray<1, int> quant46_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.044898554682731628, } };
const TfArray<1, int> quant50_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.021704429760575294, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.022844269871711731, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.042625505477190018, } };
const TfArray<1, int> quant53_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.058391083031892776, } };
const TfArray<1, int> quant54_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.022993126884102821, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.022993126884102821, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.017489619553089142, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.038139965385198593, } };
const TfArray<1, int> quant58_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.015630271285772324, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.019538626074790955, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.038678605109453201, } };
const TfArray<1, int> quant61_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.058547403663396835, } };
const TfArray<1, int> quant62_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.018483897671103477, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.022966464981436729, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.035912014544010162, } };
const TfArray<1, int> quant65_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.075399212539196014, } };
const TfArray<1, int> quant66_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.058326061815023422, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.086801469326019287, } };
const TfArray<1, int> quant69_zero = { 1, { -51 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension44, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension47, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension50, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension51, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension53, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension55, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension57, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9840), (TfLiteIntArray*)&g0::tensor_dimension58, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension59, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension61, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8640), (TfLiteIntArray*)&g0::tensor_dimension62, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension63, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4032), (TfLiteIntArray*)&g0::tensor_dimension65, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension66, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension68, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 112), (TfLiteIntArray*)&g0::tensor_dimension69, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
